<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: How to Open the Call Slip or Other Route Slips</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>How to Open the Call Slip or Other Route Slips</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>How to Open the Call Slip or Other Route Slips  (12/19/95)</H3><DL><DD>Q:    How do I open the call slip (or other route slips) programmatically?<BR><BR>A:    Use the global function <CODE>OpenRoutingSlip</CODE>. Create a new item with the transport's <CODE>NewItem </CODE>method and add routing information such as the recipient information in the <CODE>toRef </CODE>slot. For the call slip, the transport symbol will be '<CODE>|phoneHome:Newton|</CODE>, but this approach will work for other transports. (For transports other than the call transports, you will also provide the data to route in the <CODE>item.body</CODE> slot.)<BR><BR><B>    Determining the value of the toRef slot<BR></B><BR>    The <CODE>toRef </CODE>slot in the item frame should contain an array of recipients in the form of nameRefs, which are the objects returned from <CODE>protoPeoplePicker </CODE>and other <CODE>protoListPicker</CODE>-based choosers. Each nameRef can be created from one of two forms: a cardfile soup entry, or just a frame of data with minimal slots. (The required slots vary depending on the transport. For instance, the current call transport requires only phone, name, and country.)<BR><BR>     1. Cardfile entry:<BR>        <CODE><PRE>        entry := myCursor:Entry();</PRE><BR></CODE>   <BR>     2. Create your own pseudo-entry:<BR>        <CODE><PRE>        entry := {        phone:"408 555 1234",        name: {first: "Glagly", last: "Wigout"},        country: "UK",    };</PRE><BR></CODE><BR><BR>    Make the entry into a "nameRef" using the nameRef's registered datadef -- an object which describes how to manipulate nameRefs of a specific class. Note that every transport stores its preferred nameRef class symbol in its <CODE>transport.addressingClass </CODE>slot. (Examples are <CODE>'|nameRef.phone|</CODE> and <CODE>'|nameRef.email|</CODE>).<BR><BR><CODE><PRE>local class := '|nameRef.phone|;local nameRef := GetDataDefs(class):MakeNameRef(myData, class);</PRE><BR></CODE><BR><BR><B>    Setting up the targetInfo Frame<BR></B><BR>    Your <CODE>GetTargetInfo </CODE>view method should return a <CODE>targetInfo </CODE>frame, consisting of <CODE>target </CODE>and <CODE>targetView </CODE>slots. Alternatively, you can create a frame consisting of these slots and pass it to <CODE>OpenRoutingSlip</CODE>. As a workaround to a ROM bug, you must also supply an <CODE>appSymbol </CODE>slot in the <CODE>targetInfo </CODE>frame containing your appSymbol. Note that <CODE>targetInfo.target </CODE>could be a multiple item target (see the <CODE>CreateTargetCursor </CODE>documentation for more info.)<BR><BR> <BR><B>    Opening The Slip<BR></B><BR>    You can use <CODE>OpenRoutingSlip </CODE>to open the slip after setting up slots such as <CODE>toRef </CODE>and <CODE>cc </CODE>within the item. You can use code such as the following:<BR><BR><CODE><PRE>/* example using Call Transport */local item, entry, class, nameRef;// just for testing, get an Name...entry := GetUnionSoup("Names"):Query(nil):Entry();item := TransportNotify('|phoneHome:Newton|, 'NewItem, [nil]);if item = 'noTransport or not item then    return 'noTransport; class := '|nameRef.phone|;nameRef := GetDataDefs(class):MakeNameRef(entry, class);item.toRef :=  [nameRef];targetInfo := {    targetView: getroot(),     target: {}/* for non-CALL transports, add your data here! */,     appsymbol: kAppSymbol    };// returns view (succeeded), or fails: nil or 'skipErrorMessageOpenRoutingSlip(item, targetInfo);</CODE></PRE></DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Using a Keyboard Equivalent to Close a Subview</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Using a Keyboard Equivalent to Close a Subview</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B>NEW: </B>Using a Keyboard Equivalent to Close a Subview  (5/12/97)</H3><DL><DD>Q:    In my application, I have a linked subview that is linked to a floater view. If I open that linked subview, then use a key command to close the view (on current devices, command-W), my application closes instead of the floater. How do I make the floater respond to a "close" key command?<BR><BR>A:    There is a very subtle implementation detail of key-closing a view that is causing your problem. If you close a view using the keyboard, the following algorithm is used.<BR><BR>    The children of each view, starting at the root view, are searched in reverse order for a close box.<BR><BR>    The order of your base view's children can affect which view is first closed.  If your close box or status bar child is after the linked layout child, then your application will be closed instead of the linked layout. If your close box or status bar child is before the linked layout child, then the linked layout will be closed first.<BR><BR>    You can override this behavior by adding a <CODE>_DoCloseButton</CODE> method to your application's base view. The <CODE>_DoCloseButton</CODE> method is called when a keyboard equivalent is used to close a view.  This method takes no arguments and must return <CODE>true</CODE> if you handled the close, or return <CODE>nil</CODE> to let the system continue to search for a close box in other applications.<BR><BR>    Alternately, instead of creating your child as a linked subview, you could create it using the global function <CODE>BuildContext</CODE>. This guarantees that it will be searched for a close box before your application is searched.</DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Changing ProtoStatusButton Text in ProtoStatusTemplate</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Changing ProtoStatusButton Text in ProtoStatusTemplate</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Changing ProtoStatusButton Text in ProtoStatusTemplate  (1/15/97)</H3><DL><DD>Q:    I am using a <CODE>protoStatusTemplate</CODE>-based view and am trying to rename the primary button through the <CODE>protoStatusTemplate</CODE>'s setup frame.  After doing this, I get an exception when I tap on the renamed button.  What am I doing wrong?<BR><BR>A:    You are not doing anything wrong.  There is a bug in <CODE>protoStatusTemplate</CODE> which will cause the primary button to function incorrectly if you do not include a <CODE>buttonClickScript</CODE> in the setup frame.<BR><BR>    When you specify a frame in the <CODE>primary</CODE> slot of the values frame of the setup, the primary button uses the <CODE>text</CODE> slot and the <CODE>buttonClickScript</CODE> slot of that frame to initalize itself.  Unfortunately, it does not check to see if either of those slots exist before trying to use them.   The result is that an exception is thrown when you tap the button.<BR><BR>    To work around this bug you must add a <CODE>buttonClickScript</CODE> to the primary frame.  From that method you will typically call your base view's <CODE>CancelRequest</CODE> method.<BR><BR>    Here is a code example:<BR><BR><CODE><PRE>// Add a buttonClickScript method which just calls the application's CancelRequest method.local viewSetValues :=  {    primary:         {        text: "Stop",         buttonClickScript: func() GetRoot().(kAppSymbol):CancelRequest('userCancel)        }    };                    local viewSet := {        appSymbol: kAppSymbol,         name: "The Name",         values: viewSetValues        };            // Setup the status templatestatusView:ViewSet( viewSet );</CODE></PRE></DL>
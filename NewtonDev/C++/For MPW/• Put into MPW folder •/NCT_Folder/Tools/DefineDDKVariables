# provide support for Newton DDK MakeFiles in NCT Build systemif {TraceFailures} ; Echo "## Beginning DefineDDKVariables script" ; endif "`Exists -d "{NCTSources}DDKIncludes:"`" ­ ""	Set 	DDK_Includes-dir	"{NCTSources}DDKIncludes:" else	Set DDK_Includes-dir "{NCTSources}NO-DDK_INCLUDES-FOUND"endExport DDK_Includes-dir# To support NCT DDK MakeFilesif "`Exists -d "{{NCTSources}}DDKLibraries:"`" ­ ""	Set		DDK_Libraries-dir 	"{NCTSources}DDKLibraries:"  else	Set DDK_Libraries-dir "{NCT_Libraries}"endExport DDK_Libraries-dir### ARM CFront Compiler ####	-mf																		# use MultiFinder memory if there is not enough MPW memory#	-w3	(actually useless 'cause -c)										# passed through to C compiler (supresses "unused" warnings)#	-l0																		# in C output generate no #line nn directives at all#	-patch (used to suppress header containing 'pascal' keyword)			# use AT&T's "patch" mechanism for static constructors (use with -comp)#	-a1																		# force ANSI-style intermediate C code (default)#	-z3																		# suppress name encoding of local vars and struct members (default)#	-z6																		# force enums always to be int variables# 	-z10																	# to support the use of volatile declaration in CFront#	-z15																	# optimize nested inline constructor-allocator code#	-z17																	# allow inline expansion of functions of any size#	-z99Set NCT-cfront ARMCFront ; Export NCT-cfrontSet NCT-cfront-options "-mf -w3 -l0 -patch -a1 -z3 -z6 -z10 -z15 -z17 -z99 -d forARM" ; Export NCT-cfront-optionsSet NCT-cfront-c ARM6c ; Export NCT-cfront-cset NCT-cfront-c-options "-apcs '/fpe2' -ff -fC -em -zo -d forARM" ; Export NCT-cfront-c-optionsSet NCT-cfront-redirection "-c >" ; Export NCT-cfront-redirection### C Compiler #### for compatability with older version and their makefilesSet NCT-ARM6c "ARM6c " ; Export NCT-ARM6cSet NCT-ARM6c-options "-apcs '/fpe2' -ff -fC -em -zo -d forARM" ; Export NCT-ARM6c-options
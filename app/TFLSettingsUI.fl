# data file for the Fltk User Interface Designer (fluid)
version 1.0400
use_FL_COMMAND
header_name {.h}
code_name {.cpp}
comment {// ==============================
// File:			TFLSettings
// Project:			Einstein
//
// Copyright 2003-2007 by Paul Guyot (pguyot@kallisys.net).
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
// ==============================
// $Id$
// ==============================
} {in_source in_header
}

decl {class TFLApp;} {public global
}

decl {\#include "TFLSettings.h"} {public global
}

decl {\#include "TFLApp.h"} {private local
}

decl {\#include "app/Version.h"} {private global
}

declblock {\#if TARGET_OS_WIN32} {open after {\#endif}
} {
  decl {\#include "winsock2.h"} {private local
  }
}

decl {\#include <string.h>} {private local
}

decl {\#include <FL/filename.H>} {private local
}

decl {\#include <FL/Fl_Native_File_Chooser.H>} {private local
}

decl {\#include <FL/Fl.H>} {private local
}

decl {Fl_Window *wProgressWindow = 0L;} {private local
}

decl {FILE *fROM;} {private local
}

decl {FL_SOCKET sData;} {private local
}

decl {int recvd;} {private local
}

class TFLSettingsUI {open : {public TFLSettings}
} {
  Function {TFLSettingsUI()} {} {
    code {// create the setting dialog so we have it available for the user
mSettingsPanel = CreateSettingsPanel();} {}
  }
  Function {CreateSettingsPanel()} {
    comment override open
  } {
    Fl_Window {} {
      label {Einstein Settings} open
      xywh {448 451 431 414} type Double visible
    } {
      Fl_Menu_Button RMB {
        label {RMB Menu} open
        xywh {4 1 10 10} labelsize 12 hide deactivate
      } {
        MenuItem {} {
          label {Install Package...}
          callback {app->UserActionInstallPackage();}
          xywh {12 12 100 20} labelsize 12
        }
        MenuItem {} {
          label Backlight
          callback {app->UserActionToggleBacklight();}
          xywh {12 12 100 20} labelsize 12 divider
        }
        Submenu {} {
          label Reset open
          xywh {12 12 100 20} labelsize 12 hide deactivate
        } {
          MenuItem {} {
            label {Soft Reset}
            xywh {12 12 100 20} labelsize 12 deactivate
          }
          MenuItem {} {
            label {Deep Reset}
            xywh {12 12 100 20} labelsize 12 deactivate
          }
          MenuItem {} {
            label {Reset w/o Extensions}
            xywh {12 12 100 20} labelsize 12 deactivate
          }
          MenuItem {} {
            label {Power Drain Reset}
            xywh {12 12 100 20} labelsize 12 deactivate
          }
          MenuItem {} {
            label {Hard Reset (Brain Wipe)}
            xywh {12 12 100 20} labelsize 12 deactivate
          }
          MenuItem {} {
            label {Cold Boot}
            xywh {12 12 100 20} labelsize 12 deactivate
          }
        }
        MenuItem {} {
          label {Settings...}
          callback {app->UserActionShowSettingsPanel();}
          xywh {12 12 100 20} labelsize 12
        }
        MenuItem {} {
          label {About...}
          callback {app->UserActionShowAboutPanel();}
          xywh {12 12 100 20} labelsize 12 divider
        }
        MenuItem {} {
          label Power
          callback {app->UserActionTogglePower();}
          xywh {12 12 100 20} labelsize 12
        }
      }
      Fl_Group {} {
        label {  ROM} open
        xywh {14 31 405 95} box GTK_DOWN_BOX labelsize 11 align 5
      } {
        Fl_Box wROMPath {
          label ROM
          xywh {19 36 395 35} labelsize 12 align 212
        }
        Fl_Box wROMDetails {
          label Test selected
          xywh {19 76 305 45} labelsize 11 align 209
        }
        Fl_Button wROMPathChoose {
          label {Choose...}
          callback {\#if TARGET_OS_MAC

const char *filename = fl_file_chooser(
    "Choose a ROM file",
    nullptr,
    wROMPath->label());
if (filename)
    wROMPath->copy_label(filename);
    wROMDetails->copy_label(GetROMDetails(wROMPath->label()));
    
\#else

char buf[FL_PATH_MAX];
    strncpy(buf, wROMPath->label(), FL_PATH_MAX);
    char *name = (char*)fl_filename_name(buf);
    if (name && name>buf)
        name[-1] = 0;
    else 
        name = buf;

    Fl_Native_File_Chooser fnfc;
    fnfc.title("Choose ROM file");
    fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
    //fnfc.filter("Package\\t*.pkg");
    fnfc.directory(buf);
    fnfc.preset_file(name);
    switch ( fnfc.show() ) {
        case -1: return; // Error text is in fnfc.errmsg()
        case  1: return; // user canceled
    }
    wROMPath->copy_label(fnfc.filename());
    wROMDetails->copy_label(GetROMDetails(wROMPath->label()));
    
\#endif}
          xywh {329 80 80 20} labelsize 12
        }
      }
      Fl_Group {} {
        label {  Internal Flash File} open
        xywh {14 146 405 70} box GTK_DOWN_BOX labelsize 11 align 5
      } {
        Fl_Box wFlashPath {
          xywh {19 151 395 35} labelsize 12 align 212
        }
        Fl_Button wFlashPathCreate {
          label {Create...}
          callback {char buf[FL_PATH_MAX];
    strncpy(buf, wFlashPath->label(), FL_PATH_MAX);
    char *name = (char*)fl_filename_name(buf);
    if (name && name>buf)
        name[-1] = 0;
    else 
        name = buf;

    Fl_Native_File_Chooser fnfc;
    fnfc.title("Create a new Flash Memory file");
    fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
    //fnfc.filter("Package\\t*.pkg");
    fnfc.directory(buf);
    fnfc.preset_file(name);
    fnfc.options(Fl_Native_File_Chooser::NEW_FOLDER);
    switch ( fnfc.show() ) {
        case -1: return; // Error text is in fnfc.errmsg()
        case  1: return; // user canceled
    }
    wFlashPath->copy_label(fnfc.filename());}
          xywh {240 184 80 20} labelsize 12 hide
        }
        Fl_Button wFlashPathChoose {
          label {Choose...}
          callback {\#if TARGET_OS_MAC

const char *filename = fl_file_chooser(
    "Choose a Flash Memory file",
    nullptr,
    wFlashPath->label());
if (filename)
    wFlashPath->copy_label(filename);
    
\#else

char buf[FL_PATH_MAX];
    strncpy(buf, wFlashPath->label(), FL_PATH_MAX);
    char *name = (char*)fl_filename_name(buf);
    if (name && name>buf)
        name[-1] = 0;
    else 
        name = buf;

    Fl_Native_File_Chooser fnfc;
    fnfc.title("Choose an existing Flash Memory file");
    fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
    //fnfc.filter("Package\\t*.pkg");
    fnfc.directory(buf);
    fnfc.preset_file(name);
    fnfc.options(Fl_Native_File_Chooser::NEW_FOLDER);
    switch ( fnfc.show() ) {
        case -1: return; // Error text is in fnfc.errmsg()
        case  1: return; // user canceled
    }
    wFlashPath->copy_label(fnfc.filename());
    
\#endif}
          xywh {329 184 80 20} labelsize 12
        }
      }
      Fl_Group {} {
        label {  Screen}
        xywh {14 236 200 100} box GTK_DOWN_BOX labelsize 11 align 5
      } {
        Fl_Input wWidth {
          xywh {24 246 80 20} type Int labelsize 12 textsize 12
        }
        Fl_Input wHeight {
          label {x }
          xywh {119 246 80 20} type Int labelsize 12 textsize 12
        }
        Fl_Check_Button wFullScreen {
          label {Full screen}
          xywh {24 271 175 20} down_box DOWN_BOX labelsize 12 deactivate
        }
        Fl_Check_Button wHideMouse {
          label {Hide mouse pointer}
          xywh {24 291 175 20} down_box DOWN_BOX labelsize 12
        }
        Fl_Check_Button wUseMonitor {
          label {Debug Terminal}
          xywh {24 311 175 20} down_box DOWN_BOX labelsize 12 deactivate
        }
      }
      Fl_Group {} {
        label {  Memory}
        xywh {219 236 200 100} box GTK_DOWN_BOX labelsize 11 align 5
      } {
        Fl_Box {} {
          label {RAM Size}
          xywh {229 251 55 20} labelsize 11 align 24
        }
        Fl_Box wRAMSizeMB {
          label 4
          xywh {284 251 18 20} labelsize 11 align 24
        }
        Fl_Box {} {
          label MB
          xywh {301 251 20 20} labelsize 11 align 20
        }
        Fl_Box wRAMSizeKB {
          label 0
          xywh {324 251 25 20} labelsize 11 align 24 hide
        }
        Fl_Box wRAMSizeKBLabel {
          label KB
          xywh {349 251 20 20} labelsize 11 align 20 hide
        }
        Fl_Slider wRAMSize {
          callback {updateRAMSizeLabel();}
          xywh {229 276 180 20} type Horizontal minimum 16 maximum 240 step 16 value 64
        }
      }
      Fl_Check_Button wDontShow {
        label {Don't show at startup}
        xywh {24 348 140 20} down_box DOWN_BOX labelsize 12
      }
      Fl_Button wQuit {
        label Quit
        callback {exit(0);}
        xywh {217 377 95 25} color 50 labelsize 12
      }
      Fl_Button wStart {
        label Start
        callback {applyDialog();
savePreferences();
mSettingsPanel->hide();}
        xywh {322 377 95 25} color 50 labelsize 12
        code0 {Fl::focus(wStart);}
      }
      Fl_Box wRestartWarning {
        label {Preferences only apply at restart}
        xywh {217 348 200 20} labelfont 1 labelsize 12 align 20 hide
      }
      Fl_Button wRevert {
        label Revert
        callback {revertDialog();
mSettingsPanel->redraw();}
        xywh {217 377 95 25} color 50 labelsize 12 hide
      }
      Fl_Button wSave {
        label Save
        callback {applyDialog();
savePreferences();
mSettingsPanel->hide();}
        xywh {322 377 95 25} color 50 labelsize 12 hide
      }
    }
  }
  Function {revertDialog()} {open return_type void
  } {
    code {char buf[32];

wROMPath->copy_label(ROMPath);

wFlashPath->copy_label(FlashPath);

sprintf(buf, "%d", screenWidth);
wWidth->value(buf);
sprintf(buf, "%d", screenHeight);
wHeight->value(buf);
wFullScreen->value(fullScreen);
wHideMouse->value(hideMouse);
wUseMonitor->value(useMonitor);

wRAMSize->value(RAMSize);
updateRAMSizeLabel();

wDontShow->value(dontShow);

wROMDetails->copy_label(GetROMDetails(wROMPath->label()));} {}
  }
  Function {applyDialog()} {open return_type void
  } {
    code {free(ROMPath);
ROMPath = strdup(wROMPath->label());

free(FlashPath);
FlashPath = strdup(wFlashPath->label());

screenWidth = atoi(wWidth->value());
screenHeight = atoi(wHeight->value());
fullScreen = wFullScreen->value();
hideMouse = wHideMouse->value();
useMonitor = wUseMonitor->value();

RAMSize = (int)wRAMSize->value();

dontShow = wDontShow->value();} {}
  }
  Function {runningMode()} {return_type void
  } {
    code {wRestartWarning->show();
wQuit->hide();
wStart->hide();
wRevert->show();
wSave->show();} {}
  }
  Function {updateRAMSizeLabel()} {open private return_type void
  } {
    code {char buf[32];
int ram = (int)(wRAMSize->value());
int m = ram/16;
sprintf(buf, "%d", m);
wRAMSizeMB->copy_label(buf);

int k = (ram*64)%1024;
sprintf(buf, "%d", k);
wRAMSizeKB->copy_label(buf);

if (k==0) {
  wRAMSizeKB->hide();
  wRAMSizeKBLabel->hide();
} else {
  wRAMSizeKB->show();
  wRAMSizeKBLabel->show();
}} {}
  }
  Function {close_window_cb(Fl_Widget*, void *user)} {private return_type void
  } {
    code {Fl_Window *win = (Fl_Window*)user;
win->hide();} {}
  }
  Function {createAboutDialog()} {} {
    Fl_Window wAbout {
      user_data wAbout
      callback {o->hide();} open
      xywh {484 208 335 200} type Double non_modal visible
    } {
      Fl_Box {} {
        image {../Resources/icons/EinsteinApp64.png} xywh {133 5 69 75}
      }
      Fl_Box {} {
        label {Einstein Platform}
        xywh {72 81 190 25} labelfont 1
        code0 {o->label(PROJECT_NAME);}
      }
      Fl_Box {} {
        label {Version xxxx.xx.xx}
        xywh {72 108 190 20} labelsize 11
        code0 {o->label("Version " PROJECT_VER);}
      }
      Fl_Button {} {
        label Close
        user_data wAbout
        callback {o->window()->hide();}
        xywh {215 165 95 20} labelsize 12
      }
      Fl_Box {} {
        label {Copyright 2003-2020 by Paul Guyot and others}
        xywh {20 130 295 20} labelsize 11
        code0 {o->label(COPYRIGHT_STRING);}
      }
    }
  }
  Function {HandlePopupMenu()} {
    comment override return_type void
  } {
    code {const Fl_Menu_Item *choice = TFLSettingsUI::menu_RMB->popup(Fl::event_x(), Fl::event_y());
if (choice && choice->callback()) {
    choice->callback_(RMB, choice->user_data_);
}} {}
  }
}

comment {
// ======================================================== //
// Of course the code works. It just compiled, didn't it?   //
// --helixcode123, 11/8/2001 on slashdot.                   //
// ======================================================== //

} {in_source in_header
}

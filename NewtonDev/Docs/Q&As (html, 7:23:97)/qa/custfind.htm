<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Creating Custom Finders</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Creating Custom Finders</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Creating Custom Finders  (2/5/96)</H3><DL><DD>Q:    My application uses more than one soup, so <CODE>ROM_soupFinder </CODE>is not appropriate, but <CODE>ROM_compatibleFinder </CODE>seems to throw many exceptions. Which should I use?<BR><BR>A:    The answer depends on how much modification you will make. What you need is documentation on how they work and what you can override:<BR><BR>    Each of the finder base protos (soupFinder and compatibleFinder) are magic pointers, so can create your own customizations at compile time.<BR><BR>    So to do a <CODE>soupFinder</CODE> based item you could do something like:<BR><BR><CODE><PRE>DefConst('kMySoupFinder, {    _proto: ROM_soupFinder,    Delete: func()    begin        print("About to delete " & Length(selected) && "items") ;        inherited:Delete() ;    end,}) ;</PRE><BR></CODE><BR>    Most of these routines are only callable by your code. They should not be overwritten. Those routines that can be safely overriden are specified.<BR><BR>    Some of methods and slots are common to both types of finders:<BR><BR><CODE><PRE>finder.selected</PRE><BR></CODE>    An array of selected items stored in an internal format. All you can do with this array is figure out the number of selected items by taking the Length of this array.<BR><BR><CODE><PRE>finder:Count()</PRE><BR></CODE>    Returns an integer with the total number of found items.<BR><BR><CODE><PRE>finder:ReSync()</PRE><BR></CODE>    Resets the finder to the first item.<BR><BR><CODE><PRE>finder:ShowFoundItem(item)</PRE><BR></CODE>    Displays the item passed. item is an overview item that resides in the<BR>    overview's items array.<BR><BR><CODE><PRE>finder:ShowOrdinalItem(ordinal)</PRE><BR></CODE>    Display an item based on the symbol or integer passed in ordinal:<BR>    <CODE>'first </CODE>- the first found item<BR>    <CODE>'prev </CODE>- the previous item<BR>    <CODE>'next </CODE>- the next item<BR>    <CODE>&lt;an-integer&gt;</CODE> - display the nth item based on the integer.<BR><BR>    Under no circumstances should you call or override:<BR>        <CODE><PRE>        finder:MakeFoundItem</PRE><BR></CODE>        <CODE><PRE>        finder:AddFoundItems</PRE><BR></CODE><BR><BR><B>    ROM_SoupFinder<BR></B><BR>    SoupFinder has the following methods and slots:<BR><BR>    All the documented items from the simple use of soupFinder as documented in the Newton Programmer's Guide 2.0.<BR>    <BR><CODE><PRE>soupFinder:Reset()</PRE><BR></CODE>    Resets the soupFinder cursor to the first found entry. In general, you<BR>    should use the ReSync method to reset a finder.<BR>    <BR><CODE><PRE>soupFinder:ZeroOneOrMore()</PRE><BR></CODE>    Returns 0 if no found entries, 1 if one found entry or another number<BR>    for more than one entry.<BR><BR><CODE><PRE>soupFinder:ShowEntry(entry)</PRE><BR></CODE>    causes the finding application to display entry. This may involve<BR>    opening the application and moving it to that item.<BR>    This does not close the findOverview.<BR>        <BR><CODE><PRE>soupFinder:SelectItem(item)</PRE><BR></CODE>    mark the item as selected.<BR>    If this method is set to <CODE>nil </CODE>in the soupFinder proto, items will not have a checkbox in front of them (not selectable).<BR>    <BR><CODE><PRE>soupFinder:IsSelected(item)</PRE><BR></CODE>    Returns true if the item is selected.<BR>    <BR><CODE><PRE>soupFinder:ForEachSelected(callback)</PRE><BR></CODE>    Calls callback function with each selected item. The callback function has one argument, the entry from the soup cursor.<BR>    <BR><CODE><PRE>soupFinder:FileAndMove(labelsChanged, newLabel,storeChanged, newStore)</PRE><BR></CODE>    File and/or move the selected items.<BR>    <CODE>newLabel </CODE>is the new label if and only if <CODE>labelsChanged </CODE>is <CODE>true.<BR></CODE>    <CODE>newStore </CODE>is the new store if and only if <CODE>storeChanged </CODE>is <CODE>true.<BR></CODE>    <BR>    Developers can override this, though they may want to call the inherited routine to do that actual work. Note that <CODE>FileAndMove </CODE>can be called even if no items are selected. If you override this method you MUST check if there are selected items by doing:<BR>    <BR><CODE><PRE>    if selected then        // do the work</PRE><BR></CODE>    <BR><CODE><PRE>soupFinder:FileAs(labels)</PRE><BR></CODE>    Deprecated. Do not use.<BR>    <BR><CODE><PRE>soupFinder:MoveTo(newStore)</PRE><BR></CODE>    Deprecated. Do not use.<BR>    <BR><CODE><PRE>soupFinder:Delete()</PRE><BR></CODE>    Deletes all selected items from read/write stores.<BR>    <BR>    Developer can override. Note: if you override this, the crumple effect will<BR>    still happen. There is no way to prevent the ability to delete the items or<BR>    prevent the crumple effect at this time.<BR>    <BR><CODE><PRE>soupFinder:GetTarget()</PRE><BR></CODE>    Returns a cursor used by routing.<BR>    <BR>    The following methods should not be called or modified:<BR>    <CODE><PRE>    soupFinder.MakeFoundItemsoupFinder.AddFoundItems</PRE><BR></CODE><BR><BR><B>    ROM_CompatibleFinder<BR></B><BR><CODE><PRE>compatibleFinder:ShowFakeEntry(index)</PRE><BR></CODE>    Show the <CODE>index</CODE>'th item from the found items. Note that items will likely be an array of the found items.<BR>    <BR><CODE>    ShowFakeEntry </CODE>should behave just like <CODE>ShowFoundItem</CODE>. In other words, it should open the application then send a <CODE>ShowFoundItem </CODE>to the application.<BR>    <BR><CODE><PRE>compatibleFinder:ConvertToSoupEntry(item)</PRE><BR></CODE>    Return a soup entry that corresponds to the item. item is an item from the found items array.<BR><BR>    The following methods are defined to be the same as the soupFinder:<BR>        <CODE><PRE>        FileAs, MoveTo, Delete, IsSelected, SelectItem,    ForEachSelected, GetTarget, FileAndMove</PRE><BR></CODE>    <BR>    Note that this causes problems in some cases: most notably, the <CODE>ForEachSelected </CODE>call is expected to return an array of soup entries. The chances are you will need to override most of those methods. See <CODE>soupFinder </CODE>for a description of what the methods are supposed to do.</DL>
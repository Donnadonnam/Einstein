<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: How to Respond to Changes From a Keyboard</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>How to Respond to Changes From a Keyboard</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>How to Respond to Changes From a Keyboard  (2/6/96)</H3><DL><DD>Q:    I open a custom keyboard to edit my view.  How can I tell that the keyboard has been closed so that I can process the potentially modified contents of the view?<BR><BR>A:    The <CODE>viewChangedScript </CODE>for the view will be called each time the user does something to modify the view.  For keyboards, this means the script is called each time the user taps a key. This is the only notification that is provided to indicate the view contents have changed.<BR><BR>    There are no hooks you can use to tell you when standard keyboards have closed.  If you implement your own keyboard, you could provide a <CODE>viewQuitScript </CODE>or other custom code to explicitly notify the target that the keyboard is going away, but we do not recommend this.  (There may be a hardware keyboard attached, a system keyboard may be open, or the user may be writing into your view.  It is a mistake to assume that the only way to modify your view is through your own keyboard.)<BR><BR>    If the processing you need to do is lengthy and would interfere with normal typing on the keyboard, you can arrange it so the processing won't start for a few seconds.  This usually gives the user time to type another key, which can then further delay the processing.<BR><BR>    To make this "watchdog timer" happen, use the idle mechanism as your timer.  Put the code to process the changes in the <CODE>viewIdleScript </CODE>(or call it from the <CODE>viewIdleScript</CODE>.)  In the <CODE>viewChangedScript</CODE>, if  the <CODE>'text</CODE> slot has changed, use <CODE>:SetupIdle(&lt;delay&gt;)</CODE> to arrange for the <CODE>viewIdleScript </CODE>to be called in a little while.<BR><BR>    If <CODE>:SetupIdle(&lt;delay&gt;)</CODE> happens again before the first delay goes by (perhaps because the user typed another key,) the idle script will be called after the new delay.  The older one is ignored.  <CODE>SetupIdle </CODE>resets the timer each time it's called.<BR><BR>    Don't forget to have the <CODE>viewIdleScript </CODE>return <CODE>NIL </CODE>so it won't be called repeatedly.<BR></DL>
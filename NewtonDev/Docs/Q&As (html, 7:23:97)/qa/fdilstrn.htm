<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Corruption of Some Binary Objects</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Corruption of Some Binary Objects</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Corruption of Some Binary Objects  (5/13/96)</H3><DL><DD>Q:    Sometimes when I send a binary object (including a real) from the Newton device, it is corrupted when I read it with the FDILs on the desktop.  What's going on?<BR><BR>A:    When FDILs 1.0 receive a binary object, they must "guess" whether it is a string or not.  This guessing algorithm has a flaw which can result in non-string binary objects being treated as strings, and thus the Unicode conversion process is performed on them, which results in corruption of the desktop binary object.<BR><BR>    The easiest ways to avoid this problem are to either receive the data with the CDIL (in other words, don't include them in the frame), or else to ensure that either the first two or the last two bytes of the binary object are non-zero.  This workaround will not be necessary in future versions of the DIL libraries.<BR><BR>    Note: this has been fixed in the 1.0.2 Windows DILs.</DL>
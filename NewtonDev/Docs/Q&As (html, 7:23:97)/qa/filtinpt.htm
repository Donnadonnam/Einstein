<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Customizing Filters with Labelled Input Lines</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Customizing Filters with Labelled Input Lines</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Customizing Filters with Labelled Input Lines  (9/4/96)</H3><DL><DD>Q:    I need to open a slot view on a slot that isn't a standard data type (int, string, etc). How do I translate the data from the soup format to and from a string?<BR><BR>A:    Here is some interim documentation on the filter objects that <CODE>newtLabelInputLines</CODE> (and their variants) use to accomplish their work.<BR><BR>    A filter is an object, specified in the <CODE>'flavor</CODE> slot of the <CODE>newtLabelInputLine</CODE> set of protos, which acts as a translator between the target data frame (or more typically a slot in that frame) and the text field which is visible to the user.  For example, it's the filter for <CODE>newtDateInputLines</CODE> which translates the time-in-minutes value to a string for display, and translates the string into a time-in-minutes for the target data.<BR><BR>    You can create your own custom filters by protoing to <CODE>newtFilter</CODE> or one of the other specialized filters described in Chapter 4 of the Newton Programmer's Guide.<BR><BR>    When a <CODE>newtLabelInputLine</CODE> is opened, a new filter object is instantiated from the template found in the <CODE>'flavor</CODE> slot for that input line.  The instantiated filter can then be found in the <CODE>filter</CODE> slot of the view itself.  The <CODE>_parent</CODE> slot of the instantiated filter will be set to the input line itself, which allows methods in the filter to get data from the current environment.<BR><BR>    Here are the slots which are of interest.  The first four are simply values that you specify which give you control over the recognition settings of the <CODE>inputLine</CODE> part of the field, and the rest are methods which you can override or call as appropriate.<BR><BR>    Settings:<BR>    <CODE>recFlags</CODE><BR>    Works like entryFlags in <CODE>protoLableInputLine</CODE>.  This provides the <CODE>'viewFlags</CODE> settings for the <CODE>inputLine</CODE> part of the proto -- the field the user interacts with.<BR><BR>    <CODE>recTextFlags</CODE><BR>    Provides the <CODE>'textFlags</CODE> settings for the <CODE>inputLine</CODE> part of the proto.<BR><BR>    <CODE>recConfig</CODE><BR>    Provides the <CODE>'recConfig</CODE> settings for the <CODE>inputLine</CODE> part of the proto.<BR><BR>    <CODE>dictionaries</CODE><BR>    Like the <CODE>'dictionaries</CODE> slot used in recognition,  Provides custom dictionaries if <CODE>vCustomDictionaries</CODE> is on in the <CODE>recFlags</CODE> slot.<BR><BR>    Methods:<BR>    <CODE>PathToText()</CODE><BR>    Called when the <CODE>inputLine</CODE> needs to be updated.  The function should read data out of the appropriate slot in the <CODE>'target</CODE> data frame (usually specified in the '<CODE>path</CODE> slot) and return a user-visible string form of that data.  For example, for numbers the function might look like <CODE>func() NumberStr(target.(path))</CODE><BR><BR>    <CODE>TextToPath(str)</CODE><BR>    Called when the <CODE>inputLine</CODE> value changes.  The result will be written into the appropriate slot in the <CODE>'target</CODE> data frame.  The string argument is the one the user has modified from the <CODE>inputLine</CODE> part of the proto.  For example, for numbers the function might look like <CODE>func(str) if StrFilled(str) then StringToNumber(str)</CODE><BR><BR>    <CODE>Picker()</CODE><BR>    An optional function.  If present, this method is called when the user taps on the label part of the item.  It should create and display an appropriate picker for the data type.  For the pre-defined filters, you may also wish to call this method to open the picker.  You should store a reference to the filter in the picker view.  Then if the user picks an item, send the filter instance a <CODE>PickActionScript</CODE> message.  If the picker is cancelled, send a <CODE>PickCancelledScript</CODE> message.<BR><BR>    Note: If this method is defined, a pick separator line and the text "Other..." will be added to the <CODE>labelCommands</CODE> array.<BR><BR>    <CODE>PickActionScript( newValue )</CODE><BR>    An optional function.  This method should be called when the user selects something from the picker opened through the filter's <CODE>Picker</CODE> method.  If you override this method be sure to call the inherited <CODE>PickActionScript</CODE> method.<BR><BR><CODE>    PickCancelledScript()</CODE><BR>    An optional function.  This method should be called when the user cancels the picker opened through the filter's <CODE>Picker</CODE> method.  If you override this method be sure to call the inherited <CODE>PickCancelledScript</CODE> method.<BR><BR><CODE>    InitFilter()</CODE><BR>    Optional.  This method is called when an <CODE>inputLine</CODE> that uses this filter is first opened.  This method can be used to get data from the current environment (for example, the <CODE>'path</CODE> slot of the <CODE>inputLine</CODE>) and adjust other settings as appropriate.</DL>
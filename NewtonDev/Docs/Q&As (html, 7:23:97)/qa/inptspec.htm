<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: InputSpec Input Form 'Frame or 'Binary Buffer Bug</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>InputSpec Input Form 'Frame or 'Binary Buffer Bug</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>InputSpec Input Form 'Frame or 'Binary Buffer Bug  (1/22/97)</H3><DL><DD>Q:    I have an <CODE>inputSpec</CODE> of form <CODE>'string</CODE>.  When its <CODE>inputScript</CODE> triggers, I switch to an input form of <CODE>'binary</CODE>.  When the binary <CODE>inputScript</CODE> triggers, the first few bytes of the data are garbage, and sometimes the <CODE>inputScript</CODE> doesn't trigger at all.  The same behavior occurs when switching to the <CODE>'frame</CODE> input form.  Why?<BR><BR>A:    Binary and frame (B/F) input forms do not buffer incoming data the same way other input forms do.  For maximum performance, the data is written directly into the destination object, rather than into an intermediate NewtonScript buffer for <CODE>endSequence</CODE> and <CODE>filter</CODE> processing.<BR><BR>    Unfortunately, all data that has been buffered using a non-B/F input form is lost when switching to a B/F input form, resulting in corrupted data at the start of input, incorrect <CODE>byteCount</CODE>, or end-of-packet (<CODE>EOP</CODE>) detection failure.<BR><BR>    The only workaround for this problem is to have the sender wait until the receiver has switched input forms and has flushed the input buffers before sending the binary data.  In other words:<BR>    <CODE>    </CODE>1.  receive data using a non-B/F input form<BR>        2.  flush the input buffer<BR>        3.  switch to a B/F input form<BR>        4.  tell the sender you're ready to receive more data<BR>        5.  receive data<BR></DL>
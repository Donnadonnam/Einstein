<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Creating About Slips for Extensions</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Creating About Slips for Extensions</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B>NEW: </B>Creating About Slips for Extensions  (4/27/97)</H3><DL><DD>Q:    The default behavior of tapping on an icon in the Extensions folder is to bring up a generic notification. How can I make it so that tapping on it brings up my own informational slip?<BR><BR>A:    Here are the steps to follow if you want an Extension to display a custom slip when it is tapped:<BR><BR>    1) Change your part to be a form/application part instead of an auto part. This is necessary so that a slip can be displayed when the icon is tapped. <BR>    2) Add a layout to your project that is just a floater with the information you want to display. Mark this layout as the main layout. A view based on this floater will open when a user taps on your part's icon. <BR>    3) Add the following code to a text file in your project. This will ensure that the icon will show up in the Extensions folder and not the Unfiled Icons folder:<BR>        <CODE>SetPartFrameSlot('labels, '_extensions); </CODE><BR><BR>    Note that form/application parts and auto parts have two important differences in the behavior of their <CODE>InstallScript</CODE> part method. <BR>        * The <CODE>InstallScript</CODE> for a form/application part only takes one argument, whereas the <CODE>InstallScript</CODE> of an auto part takes two arguments. <BR>        * The <CODE>InstallScript</CODE> of a form/application part is <CODE>EnsureInternal</CODE>'ed, an auto part's <CODE>InstallScript</CODE> is not. </DL>
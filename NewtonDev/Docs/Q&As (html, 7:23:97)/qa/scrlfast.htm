<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Scrollers Sometimes Go Too Fast</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Scrollers Sometimes Go Too Fast</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B>NEW: </B>Scrollers Sometimes Go Too Fast  (6/9/97)</H3><DL><DD>Q:    When using <CODE>protoUpDownScroller</CODE> on an Apple MessagePad 2000 , tapping on the scroller once calls the  <CODE>viewScroll2DScript</CODE> two or three times.  Shouldn't the scroller call the script only once per tap? <BR><BR>A:    The problem happens because the processor in the MessagePad 2000 is so fast.  The scroller doesn't call the <CODE>viewScroll2DScript</CODE> once per tap, but rather calls it repeatedly while the pen is held down over the scroll arrow.  This is normal scroller behavior, and has in fact been there all along.  with the MP2000, the processor is so much faster that it can chug through many scroll operations before the pen is released.<BR><BR>    That is, the scrolling code in the scroller itself does the equivalent of a "<CODE>while not StrokeDone(unit) do targetView:viewScroll2dscript(....)"</CODE>.  If it takes even 1 tick for the <CODE>StrokeDone</CODE> function to report true, it's possible that the <CODE>viewScroll2DScript</CODE> might have been called more than once.<BR><BR>    If you need to slow down scrolling, add a delay in your <CODE>viewScroll2DScript</CODE>.  Use the global function <CODE>Sleep</CODE> for this, as that call will yeild the NewtonScript task and let other parts of the OS work (or sleep the processor, saving battery power.)<BR><BR>    A simple delay after each scroll event will work fine, and is probably the best solution overall.  If you want to have the function operate consistently on all processors, you might do something like this;<BR><BR><CODE><PRE>    constant kMaxScrollSpeed := 60;  // ticks    viewScroll2DScript: func(...)        begin            local t := ticks();            ... // do scrolling stuff            RefreshViews(); // show scrolled result            Sleep(MAX(kMaxScrollSpeed - (ticks() - t), 0));        end;</PRE><BR></CODE><BR>    The above code should have the unit scrolling at a fairly consistent one-scroll-per-second unless the time it takes to do the scrolling stuff is more than 1 second, in which case it'll just go as fast as it can.  The drawback to this approach is that the script will always delay for at least a second, so if for example the user taps the up arrow then the down arrow in less than a second, there will seem to be a delay between the up scroll and down scroll that would not necessarily need to be there.<BR><BR>    You could certainly be more clever with your delays by counting ticks and watching the count paramater to your scroll script.  This might even result in a better performing delay.  However, it's probably not worth the effort it would take to implement this.  The one-scroll-per-second approach works well, is simple, and it's unlikely that the user will ever notice the small extra delay.  (Don't try to do one-scroll-every-5-seconds using this method though, your users may quickly grow annoyed at the extra delay!)<BR></DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Constraints on Keyboards Sizing to the View</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Constraints on Keyboards Sizing to the View</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Constraints on Keyboards Sizing to the View  (4/7/97)</H3><DL><DD>Q:    I am having a problem with dynamically adjusting the size of keyboards. According to the documentation, adjusting the size of my keyboard view should cause the keys to size correctly to the bounds of the view. This does not happen.  If I set the viewbounds of the keyboard (a full alphanumeric keyboard) to anything less than 224x80, the keys scrunch up only taking up about half the view (horizontally).  They seem to size fine vertically.  This happens even if I set the viewbounds to 222 (only 2 pixels shorter.) What is going on?<BR><BR>A:    It turns out the the documentation does not give the full story. The final size of the keys in a keyboard is constrained by the smallest fractional key unit width you specify in the keyboard. To understand key units and key dimensions, read the "Key Dimensions" section of the Newton Programmer's Guide (pages 8-35,6). You can also find this information in the "Key Descriptor Constants" section of the Newton Programmer's Reference.<BR><BR>    In addition to calculating the size (in key units) of the longest key row, the <CODE>clKeyboardView</CODE> also finds the smallest key unit specified in the keyboard and uses this to constrain the final horizontal size. It calculates a minimal pixel size for the keyboard and makes sure that the final keyboard size is an integral multiple of this value. For example, if the smallest size is 10 pixels, then the final keyboard can be 10 pixels or 20 pixels, but not 15 pixels. If the view is 15 pixels, the keyboard will be 10 pixels.<BR><BR>    The calculation for this minimal size is:<BR><CODE><PRE>    m = w * (1/s)</PRE><BR></CODE><BR><CODE><PRE>m - minimal sizew - width of the longest keyboard row in key unitss   - numeric equivelent for smallest keyboard unit specified in the keyboard:    (keyHUnit = 1,  keyHHalf = 0.5, keyHQuarter = 0.25, keyHEighth = 0.125)</PRE><BR></CODE><BR>    For the built-in ASCII keyboard in current ROMs, the longest row is 14 key units, the smallest key unit used is <CODE>keyHQuarter</CODE>, so the minimal width for the ASCII keyboard is:<BR><BR><CODE><PRE>    m = 14 * (1 / 0.25) = 14 * 4 = 56 pixels.</PRE><BR></CODE><BR>    The keyboard will always be an integral multiple of 56 pixels in width. Note that 224 pixels is exactly 4 * 56. By changing the width to 223, the keyboard now becomes 168 pixels wide.</DL>
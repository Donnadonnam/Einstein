<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Accessing Views Between Layout Windows</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Accessing Views Between Layout Windows</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Accessing Views Between Layout Windows  (6/7/94)</H3><DL><DD>Q:    I have problems setting a <CODE>protoStaticText </CODE>text slot that is in one linked layout window from a button that is in another linked layout window. I tried to allow access to the base view from both linked layouts, but this didn't help. I even tried to allow access from the base view to both layouts, but this didn't help, either. What should I do?<BR><BR>A:    There is no way to declare views across the artifical boundary imposed by the linked layouts.  Until this feature of NTK is implemented, you must either create the link yourself at run time, or declare the button to the top level of the linked layout, and then declare the link.<BR><BR>    For example, consider a view called <CODE>textThatChanges</CODE> which a child of a view called <CODE>changingContainer</CODE> and is declared to <CODE>changingContainer</CODE> with the name <CODE>textThatChanges</CODE>. <CODE>ChangingContainer</CODE> is the base view for a layout which is linked into the main layout, and the link (in the main layout) is declared as <CODE>changingContainerLink</CODE>.  Code in the main layout can change the text of the <CODE>textThatChange</CODE> view like so:<BR><CODE><PRE>    SetValue(containerLink.whatToDo, 'text, "Turn and face the...")</PRE><BR></CODE><BR>    To do the equivalent of the declare yourself:<BR><BR>    1)      In the <CODE>viewSetupFormScript </CODE>script of the <CODE>'buttonThatChanges </CODE>button, set the value of the base view's slot <CODE>'theTextView </CODE>to <CODE>self</CODE>, as in the following code fragment:<BR><CODE><PRE>    func()    begin           base.theTextView := self;    end</PRE><BR></CODE>    2)     In the <CODE>buttonClickScript </CODE>script of the <CODE>'buttonThatSetsText </CODE>button, use the global function <CODE>SetValue </CODE>to store new text in the text slot of the <CODE>'buttonThatChanges </CODE>button, as in the following code fragment:<BR><BR><CODE><PRE>    func()    begin       SetValue(base.theTextView, 'text, "Now something happened!");    end</PRE><BR></CODE>    Note that this example assumes the self-declared view called <CODE>base</CODE>. In your application, you may access your base view in a different way.</DL>
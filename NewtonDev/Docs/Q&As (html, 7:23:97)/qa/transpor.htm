<HTML><HEAD><TITLE>Newton 2.x Q&amp;A Category: Transports</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><img src="pictures/newtninc.gif" HEIGHT=42 WIDTH=187 BORDER=0><H2>Newton 2.x Q&amp;A Category: Transports</H2><H4>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H2><A HREF="transpor.htm">Transports</H2></A><UL><A HREF="#Adding_Child_Views_to_a_ProtoTransportHeader-based_View"><B> </B>Adding Child Views to a ProtoTransportHeader-based View  (1/19/96)<BR></A><A HREF="#How_to_Omit_Default_Transport_Preference_Views"><B> </B>How to Omit Default Transport Preference Views  (5/6/96)<BR></A><A HREF="#How_to_Stop_ProtoAddressPicker_Memory"><B> </B>How to Stop ProtoAddressPicker Memory  (9/20/96)<BR></A><A HREF="#ReceiveRequest_Requests_Incorrect_After_Using_RemoveTempItems"><B> </B>ReceiveRequest Requests Incorrect After Using RemoveTempItems  (10/1/96)<BR></A><A HREF="#Filing_Sent_Entries_in_the_Out_Box"><B> </B>Filing Sent Entries in the Out Box  (1/14/97)<BR></A><A HREF="#Documentation_on_the_InboxFiling_Preference"><B> </B>Documentation on the InboxFiling Preference  (1/15/97)<BR></A><A HREF="#Adding_an_Auto_Put_Away_Transport_Preference"><B>NEW: </B>Adding an Auto Put Away Transport Preference  (5/14/97)<BR></A></UL><A NAME="Adding_Child_Views_to_a_ProtoTransportHeader-based_View"><H3><HR><B> </B>Adding Child Views to a ProtoTransportHeader-based View  (1/19/96)</A></H3><DL><DD>Q:    How can I add child views to a <CODE>protoTransportHeader</CODE>-based view?<BR><BR>A:    First, you need to specify an <CODE>addedHeight </CODE>slot.  The height of the transport header will be increased by this amount.<BR><BR>    Next, add the following code to the <CODE>viewSetupFormScript </CODE>method of your <CODE>protoTransportHeader </CODE>view. This works around a bug  with <CODE>protoTransportHeader:<BR></CODE>    <BR>         <CODE><PRE>        self.stepChildren := SetUnion( self._proto.stepChildren,           self._proto._proto.stepChildren, true );</PRE><BR></CODE>                                <BR>    Finally, use NTK as you normally would to create the child views.<BR></DL><A NAME="How_to_Omit_Default_Transport_Preference_Views"><H3><HR><B> </B>How to Omit Default Transport Preference Views  (5/6/96)</A></H3><DL><DD>Q:    I want to omit some transport preferences that appear automatically. If I specify <CODE>nil </CODE>for the <CODE>sendPrefs</CODE>, <CODE>outboxPrefs</CODE>, or <CODE>inboxPrefs </CODE>slots in my transport preferences template, opening the slip throws -48204. What is going wrong?<BR><BR>A:    The documentation states if you don't want to include <CODE>sendPrefs</CODE>, <CODE>outboxPrefs</CODE>, or <CODE>inboxPrefs </CODE>in your preferences dialog to set those slot to <CODE>nil</CODE>. Due to a bug in the cooresponding views for those preference items, -48204 is thrown when an attempt is made to open the views. This will be fixed in a future ROM.</DL><A NAME="How_to_Stop_ProtoAddressPicker_Memory"><H3><HR><B> </B>How to Stop ProtoAddressPicker Memory  (9/20/96)</A></H3><DL><DD>Q:    How do I stop <CODE>protoAddressPicker</CODE> from remembering the last people picked?<BR><BR>A:    <CODE>protoAddressPicker</CODE> has a slot called <CODE>useMemory</CODE> that was left out of the documentation. If this slot is set to <CODE>nil</CODE>, the memory mechanism will be disabled.</DL><A NAME="ReceiveRequest_Requests_Incorrect_After_Using_RemoveTempItems"><H3><HR><B> </B>ReceiveRequest Requests Incorrect After Using RemoveTempItems  (10/1/96)</A></H3><DL><DD>Q:    If my transport calls the owner method <CODE>RemoveTempItems</CODE> when items are selected, the <CODE>ReceiveRequest</CODE> message sometimes has bogus request arguments (for instance, the <CODE>cause</CODE> is set to <CODE>'remote</CODE>). Is this a known bug?<BR><BR>A:    Yes, this is a known bug in <CODE>RemoveTempItems</CODE>.  The call to <CODE>RemoveTempItems</CODE> does not clear out the cache of selected items correctly.  This will be fixed in a future version of the Newton OS.<BR><BR>    To workaround the problem, assume the following:  If your transport's communications channel is not currently connected and you receive a request with its cause slot set to <CODE>'remote</CODE>, assume that the cause slot is actually <CODE>'user</CODE> and act accordingly.  If you receive a request with its <CODE>'cause</CODE> slot set to <CODE>'remote </CODE>and your transport's communications channel is connected then perform the appropriate action for receiving remote items.<BR></DL><A NAME="Filing_Sent_Entries_in_the_Out_Box"><H3><HR><B> </B>Filing Sent Entries in the Out Box  (1/14/97)</A></H3><DL><DD>Q:    If a user has selected to file sent entries into a folder that has been deleted, my transport throws an exception when it calls <CODE>ItemCompleted</CODE>.  Why is this problem occuring?<BR><BR>A:    This is caused by a bug in <CODE>ItemCompleted</CODE>.  To work around this, you should check to make sure the folder exists before calling <CODE>ItemCompleted</CODE>.  If it does not exist, then set the transport's <CODE>'outboxFiling</CODE> preference to <CODE>nil</CODE>.  Here is a code example:<BR><CODE><PRE>// This code assumes that the current receiver (self) is your transportif NOT GetFolderStr( :GetConfig( 'outboxFiling ) ) then    :SetConfig( 'outboxFiling, nil );</CODE></PRE></DL><A NAME="Documentation_on_the_InboxFiling_Preference"><H3><HR><B> </B>Documentation on the InboxFiling Preference  (1/15/97)</A></H3><DL><DD>Q:    The documentation on In Box filing appears to be incorrect.  It says that incoming items will be filed when they are received, however it appears that they are actually filed when they are read.  Is the documentation incorrect?<BR><BR>A:    Yes, the documentation is incorrect.  Items are filed when they have been read, not when they have been received.  The default for <CODE>inboxFiling</CODE> is <CODE>nil</CODE>.<BR><BR>        Note that if the In/Out Box is not the backdrop application, filing does not occur until you close the In/Out Box.  If the In/Out Box is the backdrop application, filing occurs when the user switches between the overview and the main view.</DL><A NAME="Adding_an_Auto_Put_Away_Transport_Preference"><H3><HR><B>NEW: </B>Adding an Auto Put Away Transport Preference  (5/14/97)</A></H3><DL><DD>Q:    How do I add a transport preference to control whether received items are automatically put away?<BR><BR>A:    For the item to be automatically put away, two conditions must exist.  First, the application to which the item is put away must implement the <CODE>AutoPutAway</CODE> method.  Second, the transport configuration slot <CODE>'dontAutoPutAway</CODE> must be set to <CODE>nil</CODE> (or not be present).  This configuration slot is new to Newton 2.1 OS and must contain the value nil or the value <CODE>'never</CODE>.  If <CODE>nil</CODE>, items will be put away automatically provided the application defined by the item's <CODE>appSymbol</CODE> slot has the <CODE>AutoPutAway</CODE> method.  If <CODE>'never</CODE>, items will not be automatically put away regardless of whether the application defined by the item's <CODE>appSymbol</CODE> slot implements the <CODE>AutoPutaway</CODE> method. <BR><BR>    This new configuration preference is only used on Newton 2.1 OS and higher.</DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A Category: Recognition</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><img src="pictures/newtninc.gif" HEIGHT=42 WIDTH=187 BORDER=0><H2>Newton 2.x Q&amp;A Category: Recognition</H2><H4>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H2><A HREF="recognit.htm">Recognition</H2></A><UL><A HREF="#Custom_Recognizers"><B> </B>Custom Recognizers  (2/8/96)<BR></A><A HREF="#How_to_Save_and_Restore_Recognition_Settings"><B> </B>How to Save and Restore Recognition Settings  (4/9/96)<BR></A><A HREF="#Opening_the_Corrector_Window"><B> </B>Opening the Corrector Window  (3/17/97)<BR></A></UL><A NAME="Custom_Recognizers"><H3><HR><B> </B>Custom Recognizers  (2/8/96)</A></H3><DL><DD>Q:    Can I build recognizers for gestures and objects other than those built into the Newton system? <BR><BR>A:    In Newton 2.0 OS, theres no support to add custom recognizers using the Newton Toolkit.  Stay tuned for more information concerning this. <BR><BR>    Some recognition engines can work in a window separate from the edited text. For instance, writing a "w" in a special view might causes "w" to appear in the currently edited text view (the key view.) This type of recognition system can be implemented as a keyboard. If you want to use this approach, you might want to use a function in the Newton 2.0 Platform file that allows your keyboard to replace the built-in alphanumeric "typewriter" keyboard. See the Platform File Notes documentation for more information on the <CODE>RegGlobalKeyboard </CODE>function.</DL><A NAME="How_to_Save_and_Restore_Recognition_Settings"><H3><HR><B> </B>How to Save and Restore Recognition Settings  (4/9/96)</A></H3><DL><DD>Q:    Can I capture a user's recognition settings, which then may later be restored?<BR><BR>A:    Yes, the global functions <CODE>GetUserSettings</CODE>, <CODE>SetDefaultUserSettings </CODE>and <CODE>SetUserSettings </CODE>allow you to manipulate recognition-related user preference data.  These functions can allow an application to keep and manage recognition settings for multiple users.  These functions only manage information about the recognition settings, and no other user preference settings.  <BR><BR>    <CODE><PRE>    GetUserSettings()</PRE><BR></CODE>    This function returns a frame of the current user recognition settings; this frame is the argument for <CODE>SetUserSettings</CODE>.  Do not modify the frame this function returns.  Do not rely on any values, as the frame may change in future releases.<BR><BR>    <CODE><PRE>    SetDefaultUserSettings()</PRE><BR></CODE>    This function sets recognition-related user preference settings to default values.<BR><BR>    <CODE><PRE>    SetUserSettings(savedSettings)</PRE><BR></CODE>    savedSettings   -    Recognition preferences frame returned by <CODE>GetUserSettings</CODE>.<BR>    Sets user preferences for recognition as specified.<BR></DL><A NAME="Opening_the_Corrector_Window"><H3><HR><B> </B>Opening the Corrector Window  (3/17/97)</A></H3><DL><DD>Q:    I want the corrector window available for the user at specific times, can I open it from within my application?<BR><BR>A:    Yes, below is the code you should use to open the corrector window.  For compatibility, you should always make sure the corrector exists.  The corrector itself requires that a correctable key view exists.<BR><BR><CODE><PRE>local correctView := GetRoot().correct;if correctView and (GetCaretBox() or GetHiliteOffsets()) then   correctView:Open();</PRE><BR></CODE>    Note: An older version of this Q&amp;A (from 12/8/95) showed using <CODE>GetKeyView</CODE> as a test to make sure a correctable view was the key view.  With the changes to the OS with the Newton 2.1 release that allow any view to be a key view, this is no longer a reliable test.  The corrector will fail to open (generating a -48204 "bad path" error) if the key view does not support the caret or a selection.  Calling <CODE>GetCaretBox</CODE> and <CODE>GetHiliteOffsets</CODE> is a more reliable test to see if a correctable view is available.</DL>
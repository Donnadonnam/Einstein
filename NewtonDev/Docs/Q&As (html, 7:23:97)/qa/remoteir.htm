<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Newton Remote Control IR (Infra-red) API</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Newton Remote Control IR (Infra-red) API</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Newton Remote Control IR (Infra-red) API  (6/9/94)</H3><DL><DD>    NTK 1.0.1 and future NTK development kits contain the needed resources to build applications that control infrared receive systems, consumer electronics systems and similar constructs.<BR><BR>    This development kit is fairly robust, and will produce send-only applications.<BR><BR>    Note:  The NTK 1.1 platforms file is required to produce code that will execute correctly on the MessagePad 100 upgrade units.<BR><B><BR></B><CODE><PRE>cookie := OpenRemoteControl();</PRE><BR></CODE>    Call this function once to initialize the remote control functions.  It returns a magic cookie that must be passed to subsequent remote control calls, or nil if the initialization failed.<BR><BR><CODE><PRE>CloseRemoteControl(cookie);</PRE><BR></CODE>    Call this function once when all remote control operations are completed, passing cookie returned from <CODE>OpenRemoteControl</CODE>.  Always returns <CODE>nil</CODE>.  cookie is invalid after this call returns.<BR><BR><CODE><PRE>SendRemoteControlCode(cookie, command, count);</PRE><BR></CODE>    Given the cookie returned from <CODE>OpenRemoteControl</CODE>, this function sends the remote control command (see below for format of data).  The command is sent count times.  count must be at least 1.  Returns after the command has been sent (or after the last loop for <CODE>count </CODE>&gt; 1). (see diagram)<BR><BR>    Each command code has the following structure:<BR><CODE><PRE>struct IRCodeWord {    unsigned long name;    unsigned long timeBase;    unsigned long leadIn;    unsigned long repeat;    unsigned long leadOut;    unsigned long count;    unsigned long transitions[];};</PRE><BR></CODE>    <CODE>name</CODE>                identifies the command code; set to anything you like<BR>    <CODE>timeBase</CODE>            in microseconds; sets the bit time base<BR>    <CODE>leadIn</CODE>            duration in timeBase units of the lead bit cell<BR>    <CODE>repeat</CODE>            duration in timeBase units of the last bit cell for loop commands<BR>    <CODE>leadOut</CODE>            duration timeBase units of the last bit cell for non-loop commands<BR>    <CODE>count</CODE>                one-based count of transitions following<BR>    <CODE>transitions</CODE>[ ]    array of transition durations in timeBase units<BR><CODE><PRE></PRE><BR></CODE>    Note that the repeat time is used only when the code is sent multiple times.<BR><BR>    See Remote.¹, Sony.r, RC5.r, and RemoteTypes.r files for examples. The .rsrc files have templates for ResEdit editing of the Philips and Sony resources. See Remote IR Sample code for more details.<BR><BR><B>    Things To Know Before You Burn The Midnight Oil:<BR><BR></B>    If the Newton goes to sleep, the IR circuits are powered down, and any subsequent sends will fail. If you want to override this, you need to have a powerOffhandler close the remote connection, and when Newton wakes up the application could re-open the connection.<BR><BR>    If two applications are concurrently trying to use the IR port (beaming and remote control use for instance), this will cause a conflict.<BR><BR><B>    Sample Code<BR><BR></B>    The Remote IR Sample is part of the DTS Sample code distribution, you should find it on AppleLink and on the Internet ftp server (ftp.apple.com).<BR><BR>    By way of a quick summary: the sample has an array of picker elements with the resource definitions bound to the index (ircode inside the application base view). <BR><BR>    You specify the constant that is an index to the array, get the resource using the NTK function <CODE>GetNamedResource </CODE>and when you send data, use the constant as the resource used.<BR><BR><CODE>    OpenRemoteControl </CODE>is called in <CODE>viewSetupFormscript</CODE>, and <CODE>closeRemoteControl </CODE>is called in <CODE>viewQuitScript</CODE>. Note that these are methods, not global functions; same is true of <CODE>SendRemoteControlCode</CODE>.<BR><BR><B>    More Information<BR></B><BR>    Consult the IR samples available on ftp.apple.com (Internet) and on the Newton Developer CD-ROMs.<BR></DL><CENTER><IMG BORDER="0" SRC="pictures/remtcntl.gif" ALT="Q&amp;A Diagram"></CENTER>
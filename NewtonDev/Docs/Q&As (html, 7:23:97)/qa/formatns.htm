<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: What Happened to FormattedNumberStr</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>What Happened to FormattedNumberStr</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>What Happened to FormattedNumberStr  (2/12/96)</H3><DL><DD>Q:    The Newton 1.x documentation and OS included a <CODE>sprintf</CODE>-like function for formatting numbers called <CODE>FormattedNumberStr</CODE>.  The Newton Programmer's Guide 2.0 First Edition (beta) says this function is no longer supported.  How do I format my numbers?<BR><BR>A:    You may continue to use <CODE>FormattedNumberStr</CODE>.  Here is the <CODE>FormattedNumberStr</CODE>API that is supported.  <CODE>FormattedNumberStr</CODE> should be considered to have undefined results if passed arguments other than those specified here.<BR><BR><CODE><PRE>FormattedNumberStr(number, formatString)</PRE><BR></CODE>    Returns a formatted string representation of a real number. <BR><BR><CODE>    number</CODE>        A real number.<BR><CODE>    formatString</CODE>    A string specifying how the number should be formatted.<BR><BR>    This function works similar to the C function <CODE>sprintf</CODE>. The <CODE>formatString</CODE> specifies how the real number should be formatted; that is, whether to use decimal or exponential notation and how many places to include after the decimal point. It accepts the following format specifiers:<BR><CODE>    %f</CODE>    Use decimal notation (such as "123,456.789000").<BR><CODE>    %e</CODE>    Use exponential notation (such as "1.234568e+05").<BR><CODE>    %E</CODE>    Use exponential notation (such as "1.234568E+05").<BR><BR>    You can also specify a period followed by a number after the % symbol to indicate how many places to show following the decimal point.  (<CODE>"%.3f"</CODE> yields <CODE>"123,456.789"</CODE> for example.)<BR><BR>    Note:<CODE> FormattedNumberStr</CODE> uses the current values of <CODE>GetLocale().numberFormat</CODE> to get the separator and decimal characters and settings.  The example strings above are for the US English locale.<BR><BR><B>    Known Problems<BR></B><I>    Other specifiers<BR></I>    Do <I>not</I> use other <CODE>formatStrings</CODE>.  Previous releases of the documentation listed <CODE>%g</CODE> and <CODE>%G</CODE> as supported specifiers.  The behavior of these specifiers has changed with the Newton 2.0 OS.  Given the similarities to the<CODE> sprintf</CODE> function, it may occur to you to try other sprintf formatting characters.   Specifiers other than above have an undefined result and should be considered undocumented and unsupported.<BR><BR><I>    Large numbers<BR></I><CODE>    FormattedNumberStr</CODE> does not work properly for numbers larger than <CODE>1.0e24</CODE>.  If the number is very large the function can cause the Newton device to hang.<BR><BR><I>    Small numbers or long numbers<BR></I>    If more than 15 characters of output would be generated, for example because you are using <CODE>%f</CODE> with large number or a large number of digits following the decimal, <CODE>FormattedNumberStr</CODE> has undefined results, and can cause the Newton device to hang.<BR><I><BR>    Rounding<BR></I><CODE>    FormattedNumberStr</CODE> does not guarantee which direction it will round.  In the Newton 2.0 OS, it rounds half cases down rather than up or to an even digit.  If you need a precisely rounded number you should use the math functions <CODE>Ceiling</CODE>, <CODE>Floor</CODE>, <CODE>NearbyInt</CODE>, or <CODE>Round</CODE> with suitable math.<BR><BR><I>    Trailing decimals<BR></I>    In early releases of the Newton 1.0 OS, there was a bug in <CODE>FormattedNumberStr</CODE> that caused a trailing decimal character to be added when zero decimal positions was specified.  That is, <CODE>FormattedNumberStr(3.0, "%.0f")</CODE> resulted in  <CODE>"3."</CODE> not <CODE>"3"</CODE>.  To properly test for and remove this unwanted extra character you must be sure to use the character specified in the Locale settings and not assume the decimal character will be a period.</DL>
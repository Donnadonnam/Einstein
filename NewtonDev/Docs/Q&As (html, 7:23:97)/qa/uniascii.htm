<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Unicode-ASCII Translation Issues</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Unicode-ASCII Translation Issues</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Unicode-ASCII Translation Issues  (6/16/94)</H3><DL><DD>Q:    How are out-of-range translations handled by the endpoints?  For example, what happens if I try to output "\u033800AE\u Apple Computer, Inc."?<BR><BR>A:    The first Unicode character (0338) is mapped to ASCII character 255 because is it out of the range of valid translations, and the second Unicode character (00AE) is mapped to ASCII character A8 because the Mac character set has a corresponding character equivalent in the upper-bit range.<BR><BR>    All out-of-range translations, such as the 0338 diacritical mark above, are converted to ASCII character 255.  However, the reverse is not true!  ASCII character 255 is converted to Unicode character 02C7.  This means you will need to escape or strip all 02C7 characters in your strings before sending them if you want to use ASCII character 255 to detect out-of-range translations.  Character 255 was picked over character 0 because 0 is often used as the C-string terminator character.<BR><BR>    The built-in Newton Unicode-ASCII translation table is set up to handle the full 8-bit character set used by the MacOS operating system.  Although <CODE>kMacRomanEncoding </CODE>is the default encoding system for strings on most Newtons, you can specify it explicitly by adding one of the following encoding slots to your endpoint:<BR><BR><CODE><PRE>encoding:  kMacRomanEncoding;    // Unicode&lt;-&gt;Mac translation</PRE><BR>    encoding:  </CODE>kWizardEncoding <CODE>;        // Unicode&lt;-&gt;Sharp Wizard translation<BR>    encoding:  </CODE>kShiftJISEncoding <CODE>;        // Unicode&lt;-&gt;Japanese ShiftJIS translation<BR></CODE><BR>    For <CODE>kMacRomanEncoding</CODE>, the upper 128 characters of the MacOS character encoding are sparse-mapped to/from their corresponding unicode equivalents.  The map table can be found in Appendix B of the NewtonScript Programming Language reference.  The upper-bit translation matrix is as follows:<BR><BR><CODE><PRE>short gASCIIToUnicode[128] = {        0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1,        0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,        0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3,        0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,        0x2020, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF,        0x00AE, 0x00A9, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x00C6, 0x00D8,        0x221E, 0x00B1, 0x2264, 0x2265, 0x00A5, 0x00B5, 0x2202, 0x2211,        0x220F, 0x03C0, 0x222B, 0x00AA, 0x00BA, 0x2126, 0x00E6, 0x00F8,        0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB,        0x00BB, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,        0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA,        0x00FF, 0x0178, 0x2044, 0x00A4, 0x2039, 0x203A, 0xFB01, 0xFB02,        0x2021, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x00CA, 0x00C1,        0x00CB, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,        0xF7FF, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC,        0x00AF, 0x02D8, 0x02D9, 0x02DA, 0x00B8, 0x02DD, 0x02DB, 0x02C7};</CODE></PRE></DL>
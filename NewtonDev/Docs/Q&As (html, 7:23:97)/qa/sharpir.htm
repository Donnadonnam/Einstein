<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Sharp IR Protocol</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Sharp IR Protocol</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Sharp IR Protocol  (4/9/97)</H3><DL><DD>    <BR><B>    1    Serial Chip Settings<BR></B><CODE><PRE>    Baud rate    9600    Data bits    8    Stop bits    1    Parity       Odd</PRE><BR></CODE><BR><B>    2    Hardware Restrictions<BR></B>    The IR hardware used in the Sharp Wizard series (as well as Newtons and other devices) requires a brief stablizing period when switching from transmitting mode to receiving mode.  Specifically, it is not possible to receive data for two milliseconds after transmitting. Therefore, all devices should wait three milliseconds after completion of a receive before transmitting.<BR><BR><B>    3    Packet Structure<BR></B>    There are two kinds of Packets: "Packet I" and "Packet II". Because the IR unit is unstable at the start of a data transmission, <CODE>DUMMY (5 bytes of null code (0x00))</CODE> and <CODE>START ID (0x96)</CODE> begin both packet types. At least two null bytes must be processed by the receiver as <CODE>DUMMY</CODE> before the <CODE>START ID</CODE> of a packet is considered.  After this <CODE>(DUMMY, START ID)</CODE> sequence the <CODE>PACKET ID</CODE> is transmitted.  Code <CODE>0x82</CODE> is the packet ID for a PACKET I transmission, and code <CODE>0x81</CODE> is the packet ID for a PACKET II transmission.<BR><BR><B>    3.1    Packet I<BR></B>    This packet type is used to transmit the following control messages:<BR><BR>    3.1.1    Request to send                        <CODE>ENQ (0x05)</CODE><BR>    3.1.2    Clear to send                        <CODE>SYN (0x16)</CODE><BR>    3.1.3    Completion of receiving data        <CODE>ACK (0x06)</CODE><BR>    3.1.4    Failed to receive data                <CODE>NAK (0x15)</CODE><BR>    3.1.5    Interruption of receiving data        <CODE>CAN (0x18)</CODE><BR><BR>    The format of this packet type is as follows:<BR><BR><CODE><PRE>             Byte length    Set value in transmission    Detection method in reception    DUMMY        5              0x00 * 5                     Only 2 bytes are detected when received.    START ID     1              0x96PACKET ID    1              0x82DATA         1              above mentioned data</PRE><BR></CODE><BR>    Packet I example:<BR><BR><CODE><PRE>DUMMY                     START ID    PACKET ID    DATA    0x00, 0x00, 0x00, 0x00    0x96        0x82         0x05    </PRE><BR></CODE><BR><BR><B>    3.2    Packet II<BR></B>    This packet type is used to transmit data.  The maximum amount of data that may be transmitted in one packet is 512 bytes. If more than 512 bytes are to be transmitted, they are sent as several consecutive 512-byte packets.  The last packet need not be padded if it is less than 512 bytes and is distinguished by a <CODE>BLOCK NO</CODE> value of <CODE>0xFFFF</CODE>.<BR><BR>    The format of this packet type is as follows:<BR><BR><CODE><PRE>             Byte length    Set value in transmission    Detection method in receptionDUMMY        5              0x00 * 5                     Only 2 bytes are detected.START ID     1              0x96PACKET ID    1              0x81VERSION      1              0x10                         Judge only bits 7-4BLOCK NO     2 (L/H)        0x0001 ~ 0xFFFFCTRL CODE    1              0x01                         Don't judgeDEV CODE     1              0x40                         Don't judgeID CODE      1              0xFE                         Don't judgeDLENGTH      2 (L/H)        0x0001 ~ 0x0200DATA         1 ~ 512CHKSUM       2 (L/H)</PRE><BR></CODE> <BR>    <CODE>BLOCK NO</CODE> in last block must be set to <CODE>0xFFFF</CODE>.<BR><BR>    <CODE>CHKSUM</CODE> is the two-byte sum of all of the data bytes of <CODE>DATA</CODE> where any overflow or carry is discarded immediately.<BR><BR>    Send all two-byte integers lower byte first and upper byte second.<BR><BR>    Packet II example:<BR><BR><CODE><PRE>DUMMY                      START ID    PACKET ID    VERSION    BLOCK    NO      CTRL CODE0x00, 0x00, 0x00, 0x00     0x96        0x81         0x10       Low      High    0x01</PRE><BR></CODE><BR><CODE><PRE>DEV CODE    ID CODE    DLENGTH            data    CHECKSUM0x40        0xFE       Low        High    ????    Low         High</PRE><BR></CODE><BR><BR><B><CODE>    </CODE>4    Protocol<BR></B>    Data will be divided into several blocks of up to 512 bytes each.  These blocks are transmitted using type I and II packets as follows:<BR><BR><B>    4.1    Transmission Protocol<BR></B><BR>    4.1.1    The initiating device (A) begins a session by sending an <CODE>ENQ</CODE> (type I) packet.  The receiving device (B) will acknowledge the <CODE>ENQ</CODE> by transmitting a <CODE>SYN</CODE> packet.<BR><BR>    4.1.2    When (A) receives a <CODE>SYN</CODE> packet, it goes to step 4.1.4 below.<BR><BR>    4.1.3    When (A) receives a <CODE>CAN</CODE> packet, or when 6 minutes have elapsed without a <CODE>SYN</CODE> packet reply to an <CODE>ENQ</CODE> packet, (A) terminates the session.  If (A) receives any other packet, no packet, or an incomplete packet, it begins sending <CODE>ENQ</CODE> packets every 0.5 seconds.<BR><BR>    4.1.4    When (A) receives a <CODE>SYN</CODE> packet, it transmits a single type II data packet, then awaits an <CODE>ACK</CODE> packet from (B).<BR><BR>    4.1.5    When (A) receives an <CODE>ACK</CODE> packet, the transmission is considered successful.<BR><BR>    4.1.6    If no <CODE>ACK</CODE> packet is received within 1 second from completion of step 4.1.4, or if any other packet is received, (A) goes to step 4.1.1 and transmits the data again. Retransmission is attempted once. The session is terminated if the second transmission is unsuccessful.<BR><B><BR>    4.2    Reception Protocol<BR></B><BR>    4.2.1    The receiving device (B) begins a session by waiting for an <CODE>ENQ</CODE> (type I) packet. If no <CODE>ENQ</CODE> packet is received after 6 minutes (B) terminates the session.<BR><BR>    4.2.2    When (B) receives an <CODE>ENQ</CODE> packet, (B) transmits either a <CODE>SYN</CODE> packet to continue the session or a <CODE>CAN</CODE> packet to terminate the session.<BR><BR>    4.2.3    When (B) receives a valid type II packet (for example, the checksum and all header fields appear to be correct), (B) transmits an <CODE>ACK</CODE> packet.<BR><BR>    4.2.4    If one or more header fields of the data packet are not correct, or if the time between data bytes is more than 1 second, (B) goes to step 4.2.1 and does not transmit the <CODE>ACK</CODE> packet (this will cause (A) to retransmit the packet after a one second delay).<BR><BR>    4.2.5    If the header fields of the data packet appear to be correct but the checksum is incorrect, (B) transmits a <CODE>NAK</CODE> packet (this will cause (A) to retransmit the packet immediately).<BR><BR>    Because of the restriction in hardware mentioned in item 2 above, it is not possible to receive data for two  milliseconds after a data transmission.  Please wait three milliseconds before transmitting a response to the other device.<BR><BR>    (see diagram)</DL><CENTER><IMG BORDER="0" SRC="pictures/sharpir.gif" ALT="Q&amp;A Diagram"></CENTER>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: ProtoPeoplePicker Name Display Changed in Newton 2.1</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>ProtoPeoplePicker Name Display Changed in Newton 2.1</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B>NEW: </B>ProtoPeoplePicker Name Display Changed in Newton 2.1  (7/2/97)</H3><DL><DD>Q:    In Newton OS 2.0, the <CODE>protoPeoplePicker</CODE> displayed names as "last, first", but in Newton 2.1 OS it displays "first last". How can I make <CODE>protoPeoplePicker</CODE> display the original way?<BR><BR>A:    You will need to create a subclass of the <CODE>nameRefDataDef</CODE> for people that will display the name in "last, first" format. The good news is that this workaround will work on both Newton 2.0 and Newton 2.1. The basic steps are:<BR><BR>    1. Register your own subclass of <CODE>nameRefDataDef</CODE> that does the right thing<BR><BR>    2. Use this new data def class in the <CODE>dataClass</CODE> slot of your <CODE>peoplePicker</CODE><BR><BR>    3. Unregister your subclass when you are done (for instance, when quitting the application)<BR><BR><BR>    Here is some code that can be used to register a subclass. Put the following in a text file in your project:<BR><BR><CODE><PRE>    // create a unique symbol for the the data def    DefineGlobalConstant('kMyDataDefSym,        Intern("nameRef.people.lastFirst:" & kAppSymbol)) ;    DefineGlobalConstant('kMyGetFunc,        func(item, fieldPath, format)        begin            // if this is a person, not a company, modify stuff            local entry := EntryFromObj(item) ;                if fieldPath = 'name AND format = 'text AND entry AND                 IsFrame(entry) AND ClassOf(entry) = 'person then            begin                local nameFrame := entry.name ;                if nameFrame AND nameFrame.first AND nameFrame.last then                    return nameFrame.last & ", " & nameFrame.first ;                else                    return inherited:Get(item, fieldPath, format) ;            end             else                return inherited:Get(item, fieldPath, format) ;        end    ) ;</PRE><BR></CODE>    <BR>        Put this code into the <CODE>viewSetupFormScript</CODE> of the base view of your application:<BR>    <BR>            <CODE><PRE>            // register my modified people data def        RegDataDef(kMyDataDefSym, {_proto: GetDataDefs('|nameRef.people|),                        Get: kMyGetFunc}) ;</PRE><BR></CODE>    <BR>        Put this code into the <CODE>viewQuitScript</CODE> of the base view of your application:<BR>    <BR><CODE><PRE>        // unregister my modified people data def        UnRegDataDef(kMyDataDefSym) ;</PRE><BR></CODE>    <BR><BR>        Use the <CODE>kMyDataDefSym</CODE> constant as the value for the <CODE>dataClass</CODE> slot of your <CODE>protoPeoplePicker</CODE> or <CODE>protoPeoplePopup</CODE><BR>                        </DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Setting the User Visible Name With NewtSoup</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Setting the User Visible Name With NewtSoup</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Setting the User Visible Name With NewtSoup  (2/6/96)</H3><DL><DD>Q:    How can I make the user visible name for my NewtApp's soup be something besides the internal soup name, as I can do with <CODE>RegUnionSoup</CODE>?<BR><BR>A:    There is a method of <CODE>newtSoup</CODE> called <CODE>MakeSoup</CODE> which you can override.  The <CODE>MakeSoup</CODE> method is responsible for calling <CODE>RegUnionSoup</CODE> (or otherwise making a soup) and then calling the <CODE>FillNewSoup</CODE> method if the soup is new/empty.<BR><BR><CODE>    MakeSoup</CODE> is called normally as part of initializing the <CODE>newtSoup</CODE> object.  Here is a sample <CODE>MakeSoup</CODE> method that will use a newly defined slot (from the <CODE>newtSoup</CODE> based template) for the user name.<BR><BR>    The current documentation doesn't tell you everything you need to do to properly override the <CODE>MakeSoup</CODE> method.  In particular, <CODE>MakeSoup</CODE> is used by the <CODE>newtSoup</CODE> implementation to initialize the object, so it needs to set up other internal slots.  It's vital that the <CODE>'appSymbol</CODE> slot in the message context be set to the passed argument, and that the <CODE>'theSoup</CODE> slot be set to the soup or unionSoup that <CODE>MakeSoup</CODE> creates or gets.  (Recall that <CODE>RegUnionSoup</CODE> returns the union soup, whether it previously existed or not.)<BR><BR>    The <CODE>GetSoupList</CODE> method of union soups used in this code snippet returns an array with the member soups.  It should be considered documented and supported.  A newly created union will have no members, so <CODE>FillNewSoup</CODE> should be called.  This is an improvement over the default <CODE>MakeSoup</CODE> method, which always calls <CODE>FillNewSoup</CODE> if the soup on the internal store is empty.<BR><BR>    The user visible name is supplied via the newtSoup <CODE>'userName</CODE> slot, which is looked up in the current context.  As with <CODE>soupName</CODE>, <CODE>soupDescr</CODE>, etc, you should set a new <CODE>userName</CODE> slot in the frame in the <CODE>allSoups</CODE> frame in the <CODE>newtApplication </CODE>template.<BR><BR><CODE><PRE>    MakeSoup: func(appSymbol)        begin            self.appSymbol := appSymbol;    // just do it...            self.theSoup := RegUnionSoup(appSymbol, {                name: soupName,                userName: userName,                ownerApp: appSymbol,                userDescr: soupDescr,                indexes: soupIndices,            });            if Length(theSoup:GetSoupList()) = 0 then                :FillNewSoup();        end;</CODE></PRE></DL>
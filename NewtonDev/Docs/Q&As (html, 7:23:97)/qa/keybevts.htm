<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: How to Intercept Keyboard Events</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>How to Intercept Keyboard Events</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>How to Intercept Keyboard Events  (5/6/96)</H3><DL><DD>Q:    How do I intercept hardware keyboard events or "soft" keyboard events?<BR><BR>A:    You can implement view methods that are called whenever the user presses a key on software or external (hardware) keyboards.. There are two keyboard-related methods associated with views based on the <CODE>clParagraphView </CODE>view class: <BR>        the <CODE>viewKeyDownScript </CODE>message is sent when a key is pressed.<BR>        the <CODE>viewKeyUpScript </CODE>message is sent when a key is released.<BR><BR>    Both methods receive two arguments: the character that was pressed on the keyboard and a keyboard flags integer. The keyboard flags integer encodes which modifier keys were in effect for the key event, the unmodified key value, and the keycode. The layout of the keyboard flags integer is shown in the section below, "Keyboard Flags Integer". The modifier key constants are shown in the section "Keyboard Modifier Keys".<BR><BR>    <CODE>ViewKeyUpScript </CODE>and <CODE>ViewKeyDownScript </CODE>are currently called using parent inheritance.  Do not rely on this behavior: it may change in future ROMs.<BR><BR>    If you want the default action to occur, these method must return <CODE>nil</CODE>. The default action for <CODE>ViewKeyDownScript </CODE>is usually to insert the character into the paragraph. (There may be other default actions in the future.) If you return a non-nil value, the default action will not occur.<BR><BR>    You must include the <CODE>vSingleKeyStrokes </CODE>flag in the <CODE>textFlags </CODE>slot of your view for the system to send the <CODE>ViewKeyDownScript </CODE>or <CODE>ViewKeyUpScript </CODE>message for every key stroke.  If you do not specify <CODE>vSingleKeyStrokes</CODE>, keyboard input may be dropped if a lot of key strokes are coming in.<BR><BR>    The hard keyboard auto repeats with the following event sequence:<BR><BR>    keydown -- keydown -- keydown -- keydown...<BR><BR>    The soft keyboard auto repeats with this sequence:<BR><BR>    keydown -- keyup -- keydown -- keyup -- keydown -- keyup...<BR><BR>    Do not rely on this order, it may change in future ROMs.<BR><BR>    <B>ViewKeyDownScript<BR></B><BR>    <CODE><PRE>    ViewKeyDownScript(char, flags)</PRE><BR></CODE>    This message is sent to the key view when the user presses down on a keyboard key. This applies to a hardware keyboard or an on-screen keyboard.<BR><BR>    <CODE>char</CODE>    The character that was entered on the keyboard. Note that if a modifier key is the only key pressed (for example, the Shift key), this value will be 0.<BR><BR>    <CODE>flags</CODE>    An integer that specifies which modifier keys were pressed, the unmodified key value, and the keycode. The modifier key constants are shown in the section "Keyboard Modifier Keys".<BR><BR><BR>    <B>ViewKeyUpScript<BR></B><BR>    <CODE><PRE>    ViewKeyUpScript(char, flags)</PRE><BR></CODE>    This message is sent to the key view whenever the user releases a keyboard key that was depressed. This applies to a hardware keyboard or an on-screen keyboard.<BR><BR>    <CODE>char</CODE>    The character that was entered on the keyboard. Note that if a modifier key is the only key pressed (for example, the Shift key), this value will be 0.<BR><BR>    <CODE>flags</CODE>    An integer that specifies which modifier keys were pressed, the unmodified key value, and the keycode. The modifier key constants are shown in the section "Keyboard Modifier Keys".<BR><BR>    <B>Keyboard Flags Integer<BR></B><BR>    Bits            Description    <BR>    0 to 7        The keycode.    <BR>    8 to 23        Original keycode. The 16-bit character that would result if none of the<BR>                modifier keys were pressed.    <BR>    24            Indicates that the key was from an on-screen keyboard. (kIsSoftKeyboard)<BR>    25            Indicates that the Command key was in effect. (kCommandModifier)    <BR>    26            Indicates that the Shift key was in effect. (kShiftModifier)    <BR>    27            Indicates that the Caps Lock key was in effect. (kCapsLockModifier)    <BR>    28            Indicates that the Option key was in effect. (kOptionsModifier)    <BR>    29            Indicates that the Control key was in effect. (kControlModifier)    <BR><BR><BR>    <B>Keyboard Modifier Keys<BR></B><BR>    You use the keyboard modifier key constants to determine which modifier keys were in effect when a keyboard event occurs. <BR>    Constant                Value    <BR>    <CODE>kIsSoftKeyboard</CODE>        (1 &lt;&lt; 24)    <BR>    <CODE>kCommandModifier</CODE>    (1 &lt;&lt; 25)    <BR>    <CODE>kShiftModifier</CODE>        (1 &lt;&lt; 26)    <BR>    <CODE>kCapsLockModifier</CODE>    (1 &lt;&lt; 27)    <BR>    <CODE>kOptionsModifier</CODE>    (1 &lt;&lt; 28)    <BR>    <CODE>kControlModifier</CODE>    (1 &lt;&lt; 29)    </DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Optimizing Base View Functions</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Optimizing Base View Functions</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Optimizing Base View Functions  (9/15/93)</H3><DL><DD><BR>Q:    I've got this really tight loop that executes a "global" function. The function isn't really global, it's defined in my base view and the lookup time to find it slows down my code. Is there anything I can do to optimize it?<BR><BR>A:    If the function does not use inheritance or "<CODE>self</CODE>", you can speed things up by doing the lookup explicitly once before executing the loop, and using the call statement to execute the function within the body of the loop.<BR><BR>    Here's some code you can try inside the Inspector window:<BR><CODE><PRE>    f1 := {myFn: func() 42};    f2 := {_parent: f1};    f3 := {_parent: f2};    f4 := {_parent: f3};    f5 := {_parent: f4};    f5.test1 := func ()        for i:=1 to 2000 do call myFn with ();    f5.test2 := func() begin         local fn := myFn;         for i:=1 to 2000 do call fn with ();         end    /* executes with a noticeable delay */    f5:test1();    /* executes noticeably faster */    f5:test2();</PRE><BR></CODE>    Use this technique only for functions that don't use inheritance or the self keyword.<BR><BR>    Note for MacOS programmers: this trick is analogous to the MacOS programming technique of using <CODE>GetTrapAddress</CODE> to get a trap's real address and calling it directly to avoid the overhead of trap dispatch.<BR></DL>
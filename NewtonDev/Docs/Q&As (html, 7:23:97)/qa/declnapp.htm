<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: How to Properly Declare NewtApp Views</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>How to Properly Declare NewtApp Views</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>How to Properly Declare NewtApp Views  (1/6/97)</H3><DL><DD>Q:    I have a <CODE>newtEntryPageHeader</CODE> which is declared to my <CODE>newtLayout</CODE> view. Each time I change entries in my application, the header does not get properly updated.  What's going wrong?<BR><BR>A:    If you declare your <CODE>newtApplication</CODE> views, they need to be declared to their parent.  Declaring <CODE>newtApplication</CODE> views to a grandparent can cause undefined behavior.<BR><BR>    Because of how the declare mechanism works, you must be careful when you declare a view to a grandparent view.  In some circumstances, you could try to access a view which has been closed.<BR><BR>    As an example, pretend you have three views called viewA, viewB, and viewC.  They have the following heirarchy.:<BR> <BR>    ViewA                    (grandparent)<BR>        ViewB                (parent)<BR>            ViewC            (child)<BR><BR>    ViewC is a child of viewB and viewB is a child of viewA; ViewC is declared to viewA.  If you close viewB, viewC will also be closed because it is a child of viewB.  Since ViewC was declared to ViewA, ViewA will still have a reference to viewC which has been closed.  Sending view messages to viewC will throw.<BR><BR>    For more information on the Newton OS declare mechanism, see the "Declaring Multiple Levels" Q&amp;A, and the "The Inside Story on Declare" appendix in the Newton Programmer's Guide.</DL>
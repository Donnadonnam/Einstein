// ==============================
// File:			TFLSettings
// Project:			Einstein
//
// Copyright 2003-2007 by Paul Guyot (pguyot@kallisys.net).
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
// ==============================
// $Id$
// ==============================

// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "TFLSettings.h"

#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Preferences.H>
#include <FL/filename.H>

#include <unistd.h>
#include <stdio.h>
#include <errno.h>

#include "Emulator/ROM/TROMImage.h"


TFLSettings::TFLSettings() = default;

TFLSettings::~TFLSettings() = default;


void TFLSettings::ShowSettingsPanelModal()
{
    mSettingsPanel->show();
    while (mSettingsPanel->visible())
        Fl::wait();
}


void TFLSettings::ShowSettingsPanel()
{
    runningMode();
    mSettingsPanel->show();
}


void TFLSettings::ShowAboutDialog()
{
    if (!mAboutDialog)
        mAboutDialog = createAboutDialog();
    mAboutDialog->show();
}


void TFLSettings::setApp(TFLApp *App, const char *AppPath) {
    app = App;
    appPath = strdup(AppPath);
    char *end = (char*)fl_filename_name(appPath);
    if (end)
        *end = 0;
}

void TFLSettings::loadPreferences() {
    char buf[FL_PATH_MAX];

    Fl_Preferences prefs(Fl_Preferences::USER, "robowerk.com", "einstein");

    // general preferences
    prefs.get("dontShow", dontShow, 0);

    // ROM Preferences
    Fl_Preferences rom(prefs, "ROM");
    {
        strcpy(buf, appPath);
        strcat(buf, "717006");
        rom.get("path", ROMPath, buf);
    }

    // Flash Preferences
    Fl_Preferences flash(prefs, "Flash");
    {
        prefs.getUserdataPath(buf, FL_PATH_MAX-15);
        strcat(buf, "internal.flash");
        flash.get("path", FlashPath, buf);
    }

    // screen preferences
    Fl_Preferences screen(prefs, "Screen");
    {
        screen.get("width", screenWidth, 320);
        screen.get("height", screenHeight, 480);
        screen.get("fullScreen", fullScreen, 0);
        screen.get("hideMouse", hideMouse, 0);
        screen.get("useMonitor", useMonitor, 0);

        screen.get("AppWindowPosX", mAppWindowPosX, 150);
        screen.get("AppWindowPosY", mAppWindowPosY, 150);
        screen.get("AllowScreenResize", mAllowScreenResize, true);
        screen.get("AllowFullscreen", mAllowFullscreen, true);
    }

    // Memory preferences
    Fl_Preferences memory(prefs, "Memory");
    {
        memory.get("RAMSize", RAMSize, 64);
    }
}

void TFLSettings::savePreferences() {
    Fl_Preferences prefs(Fl_Preferences::USER, "robowerk.com", "einstein");

    // general preferences
    prefs.set("dontShow", dontShow);

    // ROM Preferences
    Fl_Preferences rom(prefs, "ROM");
    {
        rom.set("path", ROMPath);
    }

    // Flash Preferences
    Fl_Preferences flash(prefs, "Flash");
    {
        flash.set("path", FlashPath);
    }

    // screen preferences
    Fl_Preferences screen(prefs, "Screen");
    {
        screen.set("width", screenWidth);
        screen.set("height", screenHeight);
        screen.set("fullScreen", fullScreen);
        screen.set("hideMouse", hideMouse);
        screen.set("useMonitor", useMonitor);

        screen.set("AppWindowPosX", mAppWindowPosX);
        screen.set("AppWindowPosY", mAppWindowPosY);
        screen.set("AllowScreenResize", mAllowScreenResize);
        screen.set("AllowFullscreen", mAllowFullscreen);
    }

    // Memory preferences
    Fl_Preferences memory(prefs, "Memory");
    {
        memory.set("RAMSize", RAMSize);
    }
}

const char *TFLSettings::GetROMDetails(const char *inFilename)
{
    static char *text = nullptr;
    bool allocated = false;
    if (allocated) {
        ::free(text);
        text = nullptr;
        allocated = false;
    }
    int ret = fl_access(inFilename, R_OK);
    if (ret==-1) {
        ::asprintf(&text, "Can't read ROM file:\n%s", strerror(errno));
        if (text) allocated = true;
    } else {
        switch (TROMImage::ComputeROMId(inFilename)) {
            case TROMImage::kMP2x00USROM:
                text = (char*)"This is a fully supported MP2x00 US ROM\nVersion 717006\n...";
                break;
            case TROMImage::kMP2x00DROM:
                text = (char*)"This is a supported MP2x00 D ROM\nVersion 7xxxxx\n...";
                break;
            case TROMImage::kEMate300ROM:
                text = (char*)"This is a supported eMate 300 ROM\nVersion 7xxxxx\n...";
                break;
            default:
                text = (char*)"Unknown ROM";
                break;
        }
    }

    return text;
}


DefineGlobalConstant('kSplitFunctionsToInstall, 	call func( frame )	begin			if NOT IsFrame(frame) then Throw( 'exBadTypeWithFrameData, { errorCode: kFramesErrNotAFrame, value: frame } );			local int numSlots	:= Length( frame );		local array tags		:= Array( numSlots, Nil );		local array values	:= Array( numSlots, Nil );		local int i					:= 0;			foreach tag, value in frame do		begin			tags[ i ]		:= tag;			values[ i ]	:= value;			i						:= i + 1;		end;				{ tags: tags, values: values };		end with ( kFunctionsToInstall ));constant kFunctionNames						:= kSplitFunctionsToInstall.tags;constant kFunctionObjects					:= kSplitFunctionsToInstall.values;DefineGlobalConstant('RealRemoveScript,func( removeFrame )begin	for i := Length( kFunctionNames ) - 1 to 0 by -1 do	begin		if kDebugOn then Write( "Removing" && SPrintObject( kFunctionNames[ i ] ) & $\n );		UnDefGlobalFn( kFunctionNames[ i ] );	end;	end);// Install as a global function each slot defined in kShortCutFrameInstallScript := func( partFrame, removeFrame )begin		// if the package is in the internal store, we can save some heap by not calling EnsureInternal	// since the slot symbols will be in the internal store.		local	inInternalStore := GetVBOStore( ObjectPkgRef( 'InstallScript ) ) = GetStores()[ 0 ];	for i := 0 to Length( kFunctionNames ) - 1 do	begin		if kDebugOn then Write( "Adding" && SPrintObject( kFunctionNames[ i ] ) & $\n );		DefGlobalFn(if inInternalStore then kFunctionNames[ i ]									   else EnsureInternal( kFunctionNames[ i ] ),					kFunctionObjects[ i ]);	end;	if inInternalStore then		removeFrame.RealRemoveScript := RealRemoveScript;	else		removeFrame.(EnsureInternal('RealRemoveScript)) := EnsureInternal(RealRemoveScript);end;// Remove from the global functions each slot defined in kShortCutFrame,// in reverse order.RemoveScript := func( removeFrame )begin	:RealRemoveScript( removeFrame );end;
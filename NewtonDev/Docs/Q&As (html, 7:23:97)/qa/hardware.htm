<HTML><HEAD><TITLE>Newton 2.x Q&amp;A Category: Hardware & OS</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><img src="pictures/newtninc.gif" HEIGHT=42 WIDTH=187 BORDER=0><H2>Newton 2.x Q&amp;A Category: Hardware & OS</H2><H4>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H2><A HREF="hardware.htm">Hardware & OS</H2></A><UL><A HREF="#IR_Port_Hardware_Specs"><B> </B>IR Port Hardware Specs  (6/15/94)<BR></A><A HREF="#Serial_Cable_Specs"><B> </B>Serial Cable Specs  (8/9/94)<BR></A><A HREF="#IR_Hardware_Info"><B> </B>IR Hardware Info  (9/6/94)<BR></A><A HREF="#How_Much_Power_Can_a_PCMCIA_Card_Draw"><B> </B>How Much Power Can a PCMCIA Card Draw  (3/31/95)<BR></A><A HREF="#Do-it-Yourself_Package_Installation"><B> </B>Do-it-Yourself Package Installation  (8/26/96)<BR></A><A HREF="#Serial_Port_Hardware_Specs"><B> </B>Serial Port Hardware Specs  (4/9/97)<BR></A><A HREF="#Programmatically_Aligning_the_Pen"><B>NEW: </B>Programmatically Aligning the Pen  (7/2/97)<BR></A></UL><A NAME="IR_Port_Hardware_Specs"><H3><HR><B> </B>IR Port Hardware Specs  (6/15/94)</A></H3><DL><DD>Q:    What are the hardware specifications for the Newton IR port?<BR><BR>A:    In the Apple MessagePad 100, 110, and 120, the Sharp ExpertPad, and the Motorola Marco, the IR transmitter/receiver is a Sharp Infrared Data Communication Unit model RY5BD11 connected to channel B of a Zilog 85C30 SCC.  Data is communicated along a 500 KHz carrier frequency at 9600 or 19200 baud, 8 data bits, 1 stop bit, odd parity.  The IR hardware requires a minimum of 5 milliseconds settling time when transitioning between sending and receiving.  Sharp's CE-IR2 wireless interface unit may be used to connect the Newton to MacOS or DOS machines, with the appropriate software.<BR><BR>    The Newton supports four IR software data modes:<BR>    Sharp encoding, NewtIR protocol (specifications are NOT releaseable)<BR>    Sharp encoding, SharpIR protocol<BR>    Plain Serial<BR>    38 KHz encoding ("TV Remote Control")</DL><A NAME="Serial_Cable_Specs"><H3><HR><B> </B>Serial Cable Specs  (8/9/94)</A></H3><DL><DD>Q:    I want to make my own serial cable. Which wires and which connector pins do I use?<BR><BR>A:    To create a hardware flow control capable cable for Mac-to-Newton or Newton-to-Newton communications (also called a "null-modem" cable) all you need are two mini-din-8 connectors and seven wires connected as follows:<BR><BR><CODE><PRE>Ground (4) -&gt; Ground (4)  (also connect to connectors' shrouds)Transmit+ (6) -&gt; Receive+ (8)Transmit- (3) -&gt; Receive- (5)Receive+ (8) -&gt; Transmit+ (6)Receive- (5) -&gt; Transmit- (3)Data Term Ready (1) -&gt; Clear To Send (2)Clear To Send (2) -&gt; Data Term Ready (1)</PRE><BR></CODE><BR>    You should use twisted pairs for 6/3, 8/5, and 1/2, to improve signal quality and reduce attenuation, especially in long cables.  You can use side-by-side pairs, as in telephone hookup cable, for short cable runs.<BR><BR>    Remember that because RS-422 uses a differential signal for transmit and receive, you always need two transmit and two receive pairs, and a break of either wire will cause communications in that direction to fail.  The advantage, however, is significantly longer and more reliable cable runs than RS-232.<BR><BR>    If you don't use hardware flow control, you can eliminate the 1/2 pair, but that's not recommended unless you know this cable will be used only in software flow control situations.<BR><BR>Q:    What's the pin mapping on the Newton-to-PC (DIN-to-DB9) cable?<BR><BR>A:    Here it is:<BR><BR>    Note that the pin numbers shown are as defined above.<BR><BR><CODE><PRE>PC (DB9)    Newton (DIN)    ========================1           1    2           3    3           5    4           7,2    5           4,8    6           1    7           N/C    8           N/C    9           N/C    N/C=not connected.</CODE></PRE></DL><A NAME="IR_Hardware_Info"><H3><HR><B> </B>IR Hardware Info  (9/6/94)</A></H3><DL><DD>Q:    How does the Newton send "Remote Control" codes?<BR><BR>A:    This information is hardware dependent, and is only valid for the Original Message Pad, Message Pad 100, and Message Pad 110 products.<BR><BR>    The IR transmitter/reciever is a Sharp IR Data Communication Unit connected to the second channel of a built-in SCC.  When in "Remote Control" mode, the SCC is not used.  Instead, a carrier frequency of 38KHz is transmitted, and the CPU toggles a register to generate the data pattern.<BR></DL><A NAME="How_Much_Power_Can_a_PCMCIA_Card_Draw"><H3><HR><B> </B>How Much Power Can a PCMCIA Card Draw  (3/31/95)</A></H3><DL><DD>Q:    How much power can I draw through the PCMCIA slot?<BR><BR>A:    The current rating depends on which Newton you are using and the type of batteries in use.  Alkaline batteries provide less current than NiCad due to higher internal resistance. There is also a 'semi' artifical limit in the ROM. Currently any card who's CIS indicates more than 200 mA current draw will be rejected by the CardHandler. Other than that, here's the run down by hardware:<BR><BR><CODE><PRE>    Apple MessagePad 100:      50 mA    Apple MessagePad 110:    ~160 mA    Apple MessagePad 120:    ~300 mA    Apple MessagePad 130:    ~300 mA (with backlight off)    Apple MessagePad 130:    (with backlight on, the maximum has not been characterized)</CODE></PRE></DL><A NAME="Do-it-Yourself_Package_Installation"><H3><HR><B> </B>Do-it-Yourself Package Installation  (8/26/96)</A></H3><DL><DD>Q:    I want to have a newer version of my package downloaded over an endpoint, and replace the older version.  How do I do this?<BR><BR>A:    There are a few steps, but they're fairly straightforward.<BR><BR>    First, you need to remove the old package if the new version has the same unique name.  (See code below which you can use if you don't know whether the new package has the same name or not.)  Then call <CODE>SafeRemovePackage()</CODE>.<BR><BR>    Second, you need to get the new package to the Newton device.  Use the endpoint method <CODE>SuckPackageFromEndpoint()</CODE>, or the store method <CODE>SuckPackageFromBinary()</CODE> depending on where the package is coming from.<BR><BR>    In some cases, you don't want to remove the old package until you're sure the new one works.  If you're in this situation, the new package will have to have a different unique name.  Just defer the call to <CODE>SafeRemovePackage</CODE> until after you verify (most likely with a deferred call) that the <CODE>SuckPackageFromEndpoint</CODE> or <CODE>SuckPackageFromBinary</CODE> has succeeded.<BR><BR>    Also note that you can't call <CODE>SafeRemovePackage</CODE> from a function that's in the target package.  You'll need to create a small function which does nothing but remove the old package, and then TotalClone that small function before executing it via a deferred call.  Otherwise you'd be chopping your package's legs out from under itself, causing no end of havoc!<BR><BR>    In some cases, it is appropriate to have a "loader" package which has a small amount of code to check whether or not to install the real package.  This is accomplished by writing a small auto part which has the "Auto Remove Package" flag turned on, and the real package in a binary object within itself.  This auto part <CODE>installscript</CODE> performs whatever checks are necessary, and then conditionally calls <CODE>SuckPackageFromBinary</CODE>, providing the binary object which holds the real package.<BR><BR>    To create a binary object from a package, you need to move the data from the <CODE>.pkg</CODE> file that NTK produces into an object in the NewtonScript environment in NTK.  On Windows NTK, <CODE>LoadDataFile</CODE> does this.  On Macintosh NTK, the easiest thing to do is use a utility such as Clipboard Magician to copy the data from the .<CODE>pkg</CODE> file into a resource, then use <CODE>GetNamedResource</CODE> to get the data in your installer package.  <CODE>GetNamedResource</CODE> and <CODE>LoadDataFile</CODE> are documented in the Newton Toolkit User's Guide.  The MonacoTest sample code is a working example of a package installer that uses this technique.<BR><BR>    To get the unique name for a package inside a binary object, you can use the following NewtonScript code.  It takes the package object as its argument, and will return the string holding the unique name.<BR><BR><CODE><PRE>func(pkgRef)begin  local thelen:=extractword(pkgRef,26) div 2 -1;  local s:="             ";  while strlen(s)&lt;thelen do     s:=s&amp;s;  s:=substr(s,0,thelen);  BinaryMunger(s, 0, thelen*2, pkgRef,       52+(extractlong(pkgRef,48)*32)+extractword(pkgRef,24), thelen*2);  s;end</PRE><BR></CODE><BR></DL><A NAME="Serial_Port_Hardware_Specs"><H3><HR><B> </B>Serial Port Hardware Specs  (4/9/97)</A></H3><DL><DD>Q:    What are the hardware specifications for the serial port?<BR><BR>A:    In the Apple MessagePad 100, 110, 120, 130, 2000, the eMate 300, the Sharp ExpertPad, and the Motorola Marco, the serial port is an EIA standard RS-422 port with the following pinout (as viewed looking at the female Mini-DIN-8 socket on the side of the Newton device, or looking at the female Mini-DIN-9 on the Newton Serial Adapter):<BR><BR>    &lt;see diagram&gt;<BR><BR><CODE><PRE>Pin 1    HSKo                /DTRPin 2    HSKi                /CTSPin 3    TxD-                /TDPin 4    GND                Signal ground connected to both logic and chassis ground.Pin 5    RxD-                /RD Pin 6    TxD+                (see below)Pin 7    GPi                General purpose input received at SCC's DCD pin.Pin 8    RxD+                (see below)Pin 9 Power out          5V@100ma.  This pin only exists on the eMate 300 and the Newton Serial Adapter.</PRE><BR></CODE><BR>    All inputs are:<BR>        Ri 12K ohms<BR>        minimum Vih 0.2v, Vil -0.2V<BR>        maximum tolerance Vih 15V, Vil -15V<BR><BR>    All outputs are:<BR>        Rl 450 ohms<BR>        minimum Voh 3.6V, Vol -3.6V<BR>        maximum Voh 5.5V, Vol -5.5V<BR><BR>    No more than 40mA total can be drawn from all pins on the serial port. Pins 3 & 6 tri-state when SCC's /RTS is not asserted.<BR><BR>    The EIA RS-422 standard modulates its data signal against an inverted (negative) copy of the same signal on another wire (twisted pairs 3/6 & 5/8 above).  This differential signal is compatable with older RS-232 standards by converting to EIA standard RS-423, which involves grounding the positive side of the RS-422 receiver, and leaving the positive side of the RS-422 transmitter unconnected.  Doing so, however, limits the usable cable distance to approximately 50 feet, and is somewhat less reliable.<BR><BR>    The MessagePad 120 and the MessagePad 130 use a Linear Technology LTC902 serial line driver. This part drives +5/-5 nominally for the RS422 signals, and you can use just one half to interconnect with RS232 compatible signal levels.<BR><BR>    The MessagePad 2000 and the eMate 300 use a Linear Technology LTC1323 serial line driver. This part drives +5/-5 nominally for the RS422 signals, and you can use just one half to interconnect with RS232 compatible signal levels.<BR></DL><CENTER><IMG BORDER="0" SRC="pictures/serlport.gif" ALT="Q&amp;A Diagram"></CENTER><A NAME="Programmatically_Aligning_the_Pen"><H3><HR><B>NEW: </B>Programmatically Aligning the Pen  (7/2/97)</A></H3><DL><DD>Q:    How do I programmatically open the view to align the pen?<BR><BR>A:    You can call the global function <CODE>CalibrateTablet</CODE> to open the "Align Pen" view.  <CODE>CalibrateTablet</CODE> takes no arguments, and does not return until the user has finished the calibration.<BR><BR>    Note that <CODE>CalibrateTablet</CODE> automatically saves the new calibration information for you.</DL>
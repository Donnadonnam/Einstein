<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Creating a Works Word Processor Document with Data</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Creating a Works Word Processor Document with Data</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B>NEW: </B>Creating a Works Word Processor Document with Data  (6/9/97)</H3><DL><DD>Q:    How do I create a new Works paper document with some initial data?  I'd like something like the Notes application's <CODE>MakeTextNote</CODE> function.<BR><BR>A:    First, review the Q&amp;A entitled "How to Create Newton Works Documents" for details on actually creating the document.<BR><BR>    To create initial data for a word processor document, the simplest thing to do is to create a dummy view based on <CODE>protoTXView</CODE>.  Use the <CODE>protoTXView</CODE> methods to add data to that view.  When done, use the <CODE>Externalize</CODE> method to get the data in a form suitable for saving in the Works soup.<BR><BR>    When creating your dummy <CODE>protoTXView</CODE>, it's imperative that you call the  <CODE>SetStore</CODE> method so that the data is created on the user store rather than the NS heap.  Different formats are used for store-backed and heap-backed <CODE>protoTXViews</CODE>, and the type of backing is carried into the <CODE>Externalized</CODE> data.  As a result, failure to use <CODE>SetStore</CODE> would cause you to create a Works document that was not backed by the user store and which could eventually result in out-of-memory errors when the user added sufficient data to the document.<BR><BR>    Here's an example of how to create a dummy text view and populate it with some initial data.  You may wish to vary the store passed to <CODE>SetStore</CODE> in the <CODE>viewSetupFormScript</CODE> and <CODE>AdoptEntryFromStationery</CODE>, or the intial text specified in the 2nd paramater to <CODE>Replace</CODE>.  (Notably, you may wish to provide styles for the text, see the Newton 2.1 OS documentation on the <CODE>protoTXView</CODE> method <CODE>Replace</CODE>.)<BR><BR><CODE><PRE>    // create and populate a dummy protoTXView    local textView := BuildContext(        {            _proto: protoTXView,            viewBounds: SetBounds(0, 0, 0, 0),            viewFlags: 0,            ReorientToScreen: ROM_DefRotateFunc,            viewSetupFormScript: func() begin                inherited:?viewSetupFormScript();                self:SetStore(GetDefaultStore());            end,        });    textView:Open();    textView:Replace({first: 0, last: 0}, {text: "Some initial text"}, nil);    // get the data in an external form for the Works soup    local saveData := textView:Externalize();    textView:Close();    // Create a new Works document from the data    GetRoot().NewtWorks:AdoptEntryFromStationery(        {            title: "Initial Title",            saveData: saveData,            hiliteRange: {first: 0, last: 0},            margins: {top: 72, left: 72, right: 72, bottom: 72},        }, 'paper, GetDefaultStore());</PRE><BR></CODE><BR></DL>
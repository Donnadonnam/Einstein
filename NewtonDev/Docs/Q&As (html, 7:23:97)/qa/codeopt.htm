<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Code Optimization</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Code Optimization</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Code Optimization  (9/15/93)</H3><DL><DD>Q:    Does the compiler in the Newton Toolkit reorder expressions or fold floating point constants? Can the order of evaluation be forced (as with ANSI C)?<BR><BR>A:    The current version of the compiler doesn't do any serious optimization, such as eliminating subexpressions, or reordering functions; however, this may change in future products. (Note: NTK 1.6 added constant folding, so for example <CODE>2+3</CODE> will be replaced with <CODE>5</CODE> by the compiler.)  In the meantime, you need to write your code as clearly as possible without relying too heavily on the ordering of functions inside expressions.<BR><BR>    The current version of the NTK compiler dead-strips conditional statements from your application code if the boolean expression is a simple constant. This feature allows you to compile your code conditionally.<BR><BR>    For example, if you define a <CODE>kDebugMode </CODE>constant in your project and have in your application a statement conditioned by the value of <CODE>kDebugMode</CODE>, the NTK compiler removes the entire if/then statement from your application code when the value of <CODE>kDebugMode </CODE>is NIL. <BR><BR><CODE><PRE>constant kDebugMode := true;         // define in Project Dataif kDebugMode then Print(...);     // in application code</PRE><BR></CODE><BR>    When you change the value of the <CODE>kDebugMode </CODE>constant to NIL, then the compiler strips out the entire if/then statement.</DL>
// Text of project Stamps&Patterns written on 9/24/97 at 1:21 PM// Beginning of text file Part Methods/***      Newton Developer Technical Support Sample Code****      Stamps&Patterns, A Newton Works draw app sample****      by Henry Cate and Ryan Robertson, Newton Developer Technical Support****      Copyright © 1997 by Apple Computer, Inc.  All rights reserved.****      You may incorporate this sample code into your applications without**      restriction.  This sample code has been provided "AS IS" and the**      responsibility for its operation is 100% yours.  You are not**      permitted to modify and redistribute the source as "DTS Sample Code."**      If you are going to re-distribute the source, we require that you**      make it clear in the source that the code was descended from**      Apple-provided sample code, but that you've made changes.*/OpenResFile( HOME & "Stamps&Patterns.rsrc" );// A stamp can either be a bitmap or a PICT.  If your stamp is a bitmap, you// should also include a mask so that the stamp is drawn correctly on non-white// backgrounds.DefConst( 'kPen, GetPICTAsBits("Pen",true) );DefConst( 'kHotDog, GetPICTAsBits("Hot Dog", true) );DefConst( 'kMelon, GetNamedResource( "PICT", "Melon", 'picture) );// Setup our pattern constants.  This shows how to create patterns in// four different ways.// A pattern created from Hex.  This is a black and white// pattern.  // Black and white patterns have a class of 'pattern.DefConst( 'kBasicPattern, MakeBinaryFromHex( "AAAAAAAAAAAAAAAA", 'pattern ) );// A pattern created from a RedEdit 'PAT ' resource.  This is a black and white// pattern.  // Black and white patterns have a class of 'pattern.DefConst( 'kPATPattern, GetNamedResource("PAT ", "Square Pattern", 'pattern) );// Create a gray pattern. A gray pattern can be as large as 8 pixels high by 8 pixels // wide, with each pixel represented by an RGB triplet contained within the binary object.// Each component of the triplet is a 16-bit value ranging from 0 to 65535.  If you define // less than the number of bytes needed for an 8 x 8 pattern, the pattern triplets are repeated// to complete the pattern.// If less than 8 RGB triplets are defined, the defined triplets are repeated until a full // 8 pixel line is completed.  This line is then duplicated an additional 8 times to complete // the 8 x 8 pattern.// Gray patterns have a class of 'graypattern.DefConst( 'kGrayPattern, MakeBinaryFromHex( "111111111111222222222222333333333333444444444444555555555555666666666666777777777777888888888888", 'graypattern) );						      // Create a dither pattern.  Dither patterns are black and white patterns where// the black and white pixels are re-mapped to shades of gray.  Compared to patterns of// class 'graypattern, dither patterns are very space efficient; they only take up about// twice the amount of memory that a regular black and white pattern takes up.// The one drawback to a dither pattern is that it can only be two tone.// Dither patterns have a class of 'ditherpattern.DefConst( 'kDitherPattern,	{	class:		'ditherPattern,		pattern:	kPATPattern,			// You could also create a pattern from hex here.		foreground:	kRGB_Gray4,				// What should the black pixels be remapped to.		background:	kRGB_Gray10,			// What should the white pixels be remapped to.	} );CloseResFile();InstallScript := func(partFrame, removeFrame)begin	// Get a reference to the default drawing stationery viewDef.	// If we are running on a machine without Newton Works, 	// GetViewDefs will return the default "Missing Stationery" viewDef.	local viewDef := GetViewDefs( 'drawPaper ).default;		if viewDef then		begin			// Make sure we are safe!			local sym := EnsureInternal( kAppSymbol );						// Add the patterns and stamps.			// We call this conditionally just in case the			// the machine we are running on does not have 			// Newton Works.  In that case, the viewDef variable			// would be the "Missing Stationery" viewDef.						// You can add as many elements to the array as you need			viewDef:?RegPatterns( sym, [kBasicPattern, kPATPattern, kGrayPattern, kDitherPattern] );			viewDef:?RegStamps( sym, [kPen, kHotDog, kMelon] );		end;end;		RemoveScript := func(removeFrame)begin	// Get a reference to the default drawing stationery viewDef.	// If we are running on a machine without Newton Works, 	// GetViewDefs will return the default "Missing Stationery" viewDef.	local viewDef := GetViewDefs( 'drawPaper ).default;		if viewDef then		begin			// Remove the patterns and stamps.			// We call this conditionally just in case the			// the machine we are running on does not have 			// Newton Works.  In that case, the viewDef variable			// would be the "Missing Stationery" viewDef.			viewDef:?UnregPatterns( kAppSymbol );			viewDef:?UnregStamps( kAppSymbol );						// We must explicitly remove our stamps because of a bug			// in the drawing application's UnregStamps method.  We still			// call UnregStamps above for future compatibility.  Right now			// UnregStamps doesn't do anything useful, so calling it is a no-op.			// When UnregStamps is fixed it will remove our stamps from the			// registry so the code below must explicitly check for our			// stamps existence before removing them.			local registry := GetViewDefs( 'drawPaper ).StampListRegistry;			if registry AND HasSlot( registry, kAppSymbol ) then				RemoveSlot( registry, kAppSymbol );		end;end;// End of text file Part Methods
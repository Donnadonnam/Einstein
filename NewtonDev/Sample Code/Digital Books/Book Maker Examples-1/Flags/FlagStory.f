// Created by Newton Book Maker 1.1// ¡¡ Note: This file may contain needed resources !! // Documentbook := {	version: 2,	isbn: "Flags:DTS",	title: "The Flag Story",	shortTitle: "Flags",	data: {},   // Author’s own data	contents: Array(55, NIL),	styles: [], hints: Array(55, NIL),	browsers: [], templates: [], rendering: []};output.book := book;// Shared Map Functionsfunc MakePage(aTemplate)	{template: aTemplate, blocks: []};func MakeBlock(aBounds, anItem)	{bounds: aBounds, item: anItem};// Shared ScriptsgotoDestScript := func() begin	if (curRendering = 0) then :TurnToPage(destPage);	else :TurnToPage(:FindPageByContent(kioskDest, 0, NIL));end;// Hintsbook.hints[0] := TRUE;book.hints[1] := StuffHex("1004020001418000000000000000102080020008023602E0400000800000000000021000000201004008A00C000000402080080008000000400000002000000400000000002820200010018800000000020000000012010020021000200000100000000010000000000000000000000000000000000000000000000000000000",'data);book.hints[2] := TRUE;book.hints[3] := TRUE;book.hints[4] := StuffHex("000030200040008000201004400008225000000208641304000200008080000020000110200000000000A01E0000000060102A104A400000200200000010000800900200001200200000000820000000200000000010000062020002000000000000000000000000002000000000000000000000000000000000000000000000",'data);book.hints[6] := StuffHex("1000700000020020001010044000120030000200024D2200100020280000000020000010201800100008001020220000308920004200000000020000000002000000000800102004000A000102000000000000006010011062801000000480000000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[7] := TRUE;book.hints[8] := TRUE;book.hints[9] := StuffHex("000030200040008000201004400000224000000208641304000200008080000020000110200000000000A01E0000000060102A104A000800200200000010000800900200001200200000000820000000200000000010000062020002000000000000000000000000002000000000000000000000000000000000000000000000",'data);book.hints[11] := StuffHex("100070000000002000101004400012001000020002452200100020280000000020000010201800000008001020220000308920004200000000020000000000000000000000102004000A000102000000000000006000011062801000000400000000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[12] := TRUE;book.hints[13] := StuffHex("0000300000220020001010044000108020002004000C0A8200000000000000202000005820000030400202080002100020092800421000000002000802000200002000080030000000000001020002000004020000100110628A1000000480000000000000000000000000000000000000008000000000000000000000000000",'data);book.hints[14] := TRUE;book.hints[15] := StuffHex("00101020200401000000000400001000800250000214023010000000000A208020000000201200000010A010000A00200081200000802000481000000000080000900000021800001000000000020000000800000000011060000004000200200000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[16] := TRUE;book.hints[17] := TRUE;book.hints[18] := TRUE;book.hints[19] := TRUE;book.hints[20] := TRUE;book.hints[21] := TRUE;book.hints[22] := TRUE;book.hints[23] := StuffHex("00102020000B92200830100C00001010500A220202447308400810000000600020004102100001022008E00400021000308828084040000020020000001200A800A4001040D8082800900021422400022004008000020100A0C200002004C00A0000000000000000000000000000000000000000200000000000000000000000",'data);book.hints[24] := TRUE;book.hints[25] := TRUE;book.hints[26] := TRUE;book.hints[27] := TRUE;book.hints[29] := StuffHex("00187020000180200032300400001020B000202002060360100020088000621020005010201000104000801C2012040070812A0048622000009840008000008000820000001120240088000000000012402004826210015060020004000040240000000000000000002000000000000000010000000000000000000000000000",'data);book.hints[30] := TRUE;book.hints[31] := StuffHex("0044A0002208202000321002000022004800220A24008016000000000000008000004040422022041220C019100030088031F883002000000000803020004840600000401092000800000050003E48000024401020800030300000022090080C0000000000000000000000004000000000000000000000000000000000000000",'data);book.hints[33] := TRUE;book.hints[34] := TRUE;book.hints[35] := StuffHex("004020000200202000200002000000000800000020000006000000000000008000004000020020041220C0190000000080115801002000000000803020000800600000001092000800000000000240000020400000800010300000022000000C0000000000000000000000004000000000000000000000000000000000000000",'data);book.hints[36] := StuffHex("0004202008120100020212040000030020803400020D0280000420000000000020004000001000104000D00800020000608100004000000000820090001002001080000C8290202440880009000000000008000000100010208202000004A0040000000000000000000000000000000002000000000000000000000000000000",'data);book.hints[39] := TRUE;book.hints[40] := StuffHex("00102020000080000000100000000020500000024044800000000000800020200000000000000000280020140000002020000A0048100014000200080010088000A00000000208200080002000240200000000000000000020000000000040000000000000000000002000000000000000000000000000000000000000000000",'data);book.hints[41] := TRUE;book.hints[42] := TRUE;book.hints[43] := TRUE;book.hints[44] := StuffHex("1000100000000100000090044000000660000002004C0200000000008000000830000008200200020200E0102000100000002A10001020001800000000001000001000004010002000100000200000001000000000020000E0041003001002000000000000000000002000000000000000000000000000000000000000000000",'data);book.hints[45] := TRUE;book.hints[46] := TRUE;book.hints[47] := TRUE;book.hints[48] := TRUE;book.hints[49] := TRUE;book.hints[50] := TRUE;book.hints[51] := TRUE;book.hints[52] := StuffHex("00001820000080000000100542001030502A000200447200000000001000000020100102201000022000600C00000000100028000A400010000000002010000800A000000010082010000028200000000000000000000100E0520002000000002000000000000000202000000000000000000000000000000000000000000000",'data);book.hints[54] := StuffHex("20000000081028A0003800004800109060100000001400140001000000002000000000000012000050148000208000000000000000000000000000002080100A00080000002001001008010000020008000000000030010460021000020200000000002010000000002000000000000000000000200000000000000000000000",'data);// Text Styless0 := {	family: 'Geneva,	face: 0,	size: 9};AddArraySlot(book.styles, s0);s1 := {	family: 'Geneva,	face: 0,	size: 9};AddArraySlot(book.styles, s1);s2 := {	family: 'Geneva,	face: 1,	size: 9};AddArraySlot(book.styles, s2);s3 := {	family: 'Espy,	face: 0,	size: 9};AddArraySlot(book.styles, s3);s4 := {	family: 'Espy,	face: 0,	size: 10};AddArraySlot(book.styles, s4);s5 := {	family: 'Espy,	face: 1,	size: 10};AddArraySlot(book.styles, s5);s6 := {	family: 'Geneva,	face: 0,	size: 12};AddArraySlot(book.styles, s6);s7 := {	family: 'Espy,	face: 1,	size: 10};AddArraySlot(book.styles, s7);s8 := {	family: 'NewYork,	face: 3,	size: 18};AddArraySlot(book.styles, s8);s9 := {	family: 'NewYork,	face: 0,	size: 12};AddArraySlot(book.styles, s9);s10 := {	family: 'NewYork,	face: 0,	size: 10};AddArraySlot(book.styles, s10);s11 := {	family: 'NewYork,	face: 1,	size: 12};AddArraySlot(book.styles, s11);s12 := {	family: 'Geneva,	face: 1,	size: 12};AddArraySlot(book.styles, s12);s13 := {	family: 'Espy,	face: 1,	size: 9};AddArraySlot(book.styles, s13);s14 := {	family: 'NewYork,	face: 1,	size: 14};AddArraySlot(book.styles, s14);// Contentsc1 := {	data: "On the Newton screen, this story text appears with a line drawn around its edges, courtesy of the  edges flag.",	styles: [99, s1, 5, s2, 8, s1],	look: 1969920};book.contents[0] := c1;c2 := {	data: "Adding the rounded flag causes Book Maker to draw a rounded-corner box around this text. The edgeWidth flag is used to specify the width of the line, which for this text is quite heavy at a four-pixel width. ",	styles: [11, s4, 7, s5, 75, s4, 9, s5, 107, s4, 2, s1],	look: 3856,	edgeWidth: 4};book.contents[1] := c2;c3 := {	data: " .layout leftSide 4 sidebar 8 main",	viewFont: s6,	layout: 3};book.contents[2] := c3;c4 := {	data: "Sidebar text",	viewFont: s7,	layout: 1};book.contents[3] := c4;c5 := {	data: "This page uses the layout command defined above. This layout, named leftSide, defines a sidebar column four grid units wide that appears to the left of the main column. The remaining eight grid units make up the main column. ",	styles: [68, s4, 8, s7, 151, s4]};book.contents[4] := c5;c6 := {	data: GetNamedResource("PICT", "29197", 'picture),	layout: 1};book.contents[5] := c6;c7 := {	data: "To put text or graphics in the sidebar, add the sidebar flag to the .story or .picture command associated with that content item. Content items without the sidebar flag are placed in the main column by default.",	styles: [48, s4, 7, s7, 13, s4, 6, s7, 4, s4, 8, s7, 70, s4, 7, s7, 49, s4]};book.contents[6] := c7;c8 := {	data: " .layout rightSide 8 4 sidebar",	viewFont: s6,	layout: 3};book.contents[7] := c8;c9 := {	data: "Sidebar text",	viewFont: s7,	layout: 1};book.contents[8] := c9;c10 := {	data: "This page uses the layout command defined above. This layout, named rightSide, defines a sidebar column four grid units wide that appears to the right of the main column. The remaining eight grid units make up the main column. ",	styles: [68, s4, 9, s7, 152, s4]};book.contents[9] := c10;c11 := {	data: GetNamedResource("PICT", "5986", 'picture),	layout: 1};book.contents[10] := c11;c12 := {	data: "To put text or graphics in the sidebar, add the sidebar flag to the .story or  .picture command for that item. Content items without the sidebar flag are placed in the main column by default. ",	styles: [48, s4, 7, s7, 13, s4, 6, s7, 5, s4, 8, s7, 50, s4, 7, s7, 51, s4]};book.contents[11] := c12;c13 := {	data: "This is sidebar text. Notice that it wraps around to stay in the sidebar column. ",	viewFont: s7,	layout: 33};book.contents[12] := c13;c14 := {	data: "This text does not have a sidebar keyword associated with its .story command, so it is placed in the main column. Notice that it too wraps around to stay within the boundaries of the main column.  ",	styles: [26, s4, 7, s5, 29, s4, 6, s5, 130, s4]};book.contents[13] := c14;c15 := {	data: "This sidebar text uses the toEdge flag.  ",	viewFont: s7,	layout: 3};book.contents[14] := c15;c16 := {	data: "With the toEdge flag attached, the sidebar text now spills out of the sidebar column across the entire page, creating an outline-like or headline-like effect. ",	viewFont: s4};book.contents[15] := c16;c17 := {	data: "This sidebar text is right justified.",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[16] := c17;c18 := {	data: "Book Maker uses the font and style information in the book source file, including right and left justification.",	viewFont: s4};book.contents[17] := c18;c19 := {	data: "Ambrosia: ",	viewFont: s7,	layout: 33,	viewJustify: 1};book.contents[18] := c19;c20 := {	data: "When I used to work at Llama TV Productions we never put scripts on paper—we used Newton Book Maker all the time!",	viewFont: s4};book.contents[19] := c20;c21 := {	data: "Ambrose: ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[20] := c21;c22 := {	data: "How did you create this page that looks like a screenplay? ",	viewFont: s4};book.contents[21] := c22;c23 := {	data: "Ambrosia: ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[22] := c23;c24 := {	data: "The page defines a left sidebar. The names are just story text placed in the sidebar by appending the sideBar flag to the .story command. The bold typeface is Espy Sans Bold, which is a special font designed just for the Newton screen. The right-justification was done in the book source file by the word processor I used to write it.",	styles: [334, s4, 1, s1]};book.contents[23] := c24;c25 := {	data: "Ambrose: ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[24] := c25;c26 := {	data: "And our dialogue is just story text in the main column. ",	viewFont: s4};book.contents[25] := c26;c27 := {	data: "More Layout Tricks",	styles: [18, s8, 1, s4],	layout: 2};book.contents[26] := c27;c28 := {	data: "As you can see, Dickens supports text next to graphics.",	styles: [55, s9, 1, s10, 1, s4]};book.contents[27] := c28;c29 := {	data: GetNamedResource("PICT", "27802", 'picture),	layout: 1025};book.contents[28] := c29;c30 := {	data: "It’s all done with layout flags (this is the secret to doing almost anything with Newton Book Maker). The idea is to use a 2-column layout, but by frequent use of the toEdge flag, give most content items the entire width of the page. Leave this flag off on the left column text, and use sidebar and whatever alignment is appropriate on the picture.",	styles: [167, s9, 6, s11, 114, s9, 7, s11, 54, s9, 1, s4, 1, s3, 1, s4],	layout: 2};book.contents[29] := c30;c31 := {	data: "The Boy Who Flew To The Moon",	styles: [29, s12, 1, s1],	layout: 3};book.contents[30] := c31;c32 := {	data: "Once upon a time, there was a little boy who dreamed of flying to the moon. He would fly there in a sleek silver rocket ship with his trusty companion, Biff The Wonder Dog. When they arrived, he would eat green cheese all day long, set reduced gravity sports records and never have to do any homework.",	styles: [305, s4, 1, s1]};book.contents[31] := c32;c33 := {	data: GetNamedResource("PICT", "248", 'picture),	layout: 257};book.contents[32] := c33;c34 := {	data: "This page uses the alignTop flag to align the top of the sidebar picture with the body text in the main column. ",	styles: [19, s4, 8, s5, 87, s4],	layout: 64};book.contents[33] := c34;c35 := {	data: "The Boy Who Flew To The Moon",	styles: [29, s12, 1, s1],	layout: 35};book.contents[34] := c35;c36 := {	data: "Once upon a time, there was a little boy who dreamed of flying to the moon. He would fly there in a sleek silver rocket ship with his trusty companion, Biff The Wonder Dog. ",	viewFont: s4};book.contents[35] := c36;c37 := {	data: "This version of the story uses the pageBottom flag to pin this expalanatory paragraph to the bottom of the page. The sidebar picture is aligned to the bottom of this paragraph by attaching the alignBottom flag to the .picture command associated with it.",	styles: [35, s4, 10, s5, 148, s4, 11, s5, 12, s4, 9, s5, 29, s4],	layout: 64};book.contents[36] := c37;c38 := {	data: GetNamedResource("PICT", "9414", 'picture),	layout: 513};book.contents[37] := c38;c39 := {	data: "Using Layouts",	styles: [13, s13, 1, s7],	layout: 16384};book.contents[38] := c39;c40 := {	data: "• ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[39] := c40;c41 := {	data: "Book Maker does not use the margins defined in the book source file. Use layout commands to format the page on the Newton screen.",	viewFont: s4};book.contents[40] := c41;c42 := {	data: "• ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[41] := c42;c43 := {	data: "Only one layout per page.",	viewFont: s4};book.contents[42] := c43;c44 := {	data: "• ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[43] := c44;c45 := {	data: "Each layout can define multiple columns and a single optional sidebar column. The total number of grid units used in the layout must always add up to 12.",	styles: [154, s4, 1, s1]};book.contents[44] := c45;c46 := {	data: "•",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[45] := c46;c47 := {	data: "Sidebars can be defined at the left or right edge of the screen. ",	viewFont: s4};book.contents[46] := c47;c48 := {	data: "• ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[47] := c48;c49 := {	data: "Only one sidebar per layout.",	viewFont: s4};book.contents[48] := c49;c50 := {	data: "•",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[49] := c50;c51 := {	data: "Use the toEdge flag to make text spill out of its column instead of wrapping.",	styles: [8, s4, 6, s5, 64, s4, 1, s1]};book.contents[50] := c51;c52 := {	data: "• ",	viewFont: s7,	layout: 1,	viewJustify: 1};book.contents[51] := c52;c53 := {	data: "Book Maker uses the font, style and text justification defined in your book source file. For example, the bullets on this page are right justified in the left sidebar, and the text is left justified in the main column.",	viewFont: s4};book.contents[52] := c53;c54 := {	data: GetNamedResource("PICT", "31511", 'picture),	layout: 16384};book.contents[53] := c54;c55 := {	data: "If you exceed the sixteen-pixel space allocated for headers, you can spill a pictHeader into the text to create an interesting background. ",	styles: [142, s14, 1, s4],	layout: 4};book.contents[54] := c55;// Kiosk (menu page) references// Page TemplatesNBMDefault := {	nColumns: 1,	column: [{	width: 12,	type: 0}]};AddArraySlot(book.templates, NBMDefault);doubleCol := {	nColumns: 2,	column: [{	width: 6,	type: 0}, {	width: 6,	type: 0}]};AddArraySlot(book.templates, doubleCol);leftSide := {	nColumns: 2,	column: [{	width: 4,	type: 1}, {	width: 8,	type: 0}]};AddArraySlot(book.templates, leftSide);rightSide := {	nColumns: 2,	column: [{	width: 8,	type: 0}, {	width: 4,	type: 1}]};AddArraySlot(book.templates, rightSide);sideby := {	nColumns: 2,	column: [{	width: 6,	type: 0}, {	width: 6,	type: 1}]};AddArraySlot(book.templates, sideby);bedtimeStory := {	nColumns: 2,	column: [{	width: 3,	type: 1}, {	width: 9,	type: 0}]};AddArraySlot(book.templates, bedtimeStory);summary := {	nColumns: 2,	column: [{	width: 1,	type: 1}, {	width: 11,	type: 0}],	header: c39};AddArraySlot(book.templates, summary);fancy := {	nColumns: 3,	column: [{	width: 2,	type: 1}, {	width: 8,	type: 0}, {	width: 2,	type: 0}],	header: c54};AddArraySlot(book.templates, fancy);// Bounds Listbnd1 := [0,16,118,92];bnd2 := [0,122,118,310];bnd3 := [0,16,240,64];bnd4 := [0,64,79,78];bnd5 := [83,64,240,190];bnd6 := [0,190,29,224];bnd7 := [83,190,240,318];bnd8 := [162,64,240,78];bnd9 := [0,64,158,190];bnd10 := [162,190,191,224];bnd11 := [0,190,158,318];bnd12 := [0,16,79,114];bnd13 := [83,16,240,114];bnd14 := [0,114,240,142];bnd15 := [83,142,240,240];bnd16 := [0,240,79,282];bnd17 := [83,240,240,318];bnd18 := [0,16,79,30];bnd19 := [83,16,240,86];bnd20 := [0,86,79,100];bnd21 := [83,86,240,114];bnd22 := [0,114,79,128];bnd23 := [83,114,240,282];bnd24 := [0,282,79,296];bnd25 := [83,282,240,318];bnd26 := [0,16,240,39];bnd27 := [0,39,118,117];bnd28 := [122,59,194,97];bnd29 := [0,117,240,318];bnd30 := [0,16,240,44];bnd31 := [63,44,240,224];bnd32 := [0,44,31,194];bnd33 := [63,247,240,318];bnd34 := [63,44,240,142];bnd35 := [63,205,240,317];bnd36 := [0,170,50,317];bnd37 := [0,16,20,44];bnd38 := [24,16,240,100];bnd39 := [0,100,20,114];bnd40 := [24,100,240,128];bnd41 := [0,128,20,142];bnd42 := [24,128,240,196];bnd43 := [0,196,20,210];bnd44 := [24,196,240,238];bnd45 := [0,238,20,252];bnd46 := [24,238,240,266];bnd47 := [0,266,20,280];bnd48 := [24,266,240,318];bnd49 := [0,16,20,30];bnd50 := [24,16,240,318];bnd51 := [43,16,198,244];// PagespageList := {pageSize: {left: 0, top: 0, right: 240, bottom: 318},	contents: [], pages: []};// Page 1page := MakePage(doubleCol);AddArraySlot(page.blocks, MakeBlock(bnd1, c1));AddArraySlot(page.blocks, MakeBlock(bnd2, c2));AddArraySlot(pageList.pages, page);// Page 2page := MakePage(leftSide);AddArraySlot(page.blocks, MakeBlock(bnd3, c3));AddArraySlot(page.blocks, MakeBlock(bnd4, c4));AddArraySlot(page.blocks, MakeBlock(bnd5, c5));AddArraySlot(page.blocks, MakeBlock(bnd6, c6));AddArraySlot(page.blocks, MakeBlock(bnd7, c7));AddArraySlot(pageList.pages, page);// Page 3page := MakePage(rightSide);AddArraySlot(page.blocks, MakeBlock(bnd3, c8));AddArraySlot(page.blocks, MakeBlock(bnd8, c9));AddArraySlot(page.blocks, MakeBlock(bnd9, c10));AddArraySlot(page.blocks, MakeBlock(bnd10, c11));AddArraySlot(page.blocks, MakeBlock(bnd11, c12));AddArraySlot(pageList.pages, page);// Page 4page := MakePage(leftSide);AddArraySlot(page.blocks, MakeBlock(bnd12, c13));AddArraySlot(page.blocks, MakeBlock(bnd13, c14));AddArraySlot(page.blocks, MakeBlock(bnd14, c15));AddArraySlot(page.blocks, MakeBlock(bnd15, c16));AddArraySlot(page.blocks, MakeBlock(bnd16, c17));AddArraySlot(page.blocks, MakeBlock(bnd17, c18));AddArraySlot(pageList.pages, page);// Page 5page := MakePage(leftSide);AddArraySlot(page.blocks, MakeBlock(bnd18, c19));AddArraySlot(page.blocks, MakeBlock(bnd19, c20));AddArraySlot(page.blocks, MakeBlock(bnd20, c21));AddArraySlot(page.blocks, MakeBlock(bnd21, c22));AddArraySlot(page.blocks, MakeBlock(bnd22, c23));AddArraySlot(page.blocks, MakeBlock(bnd23, c24));AddArraySlot(page.blocks, MakeBlock(bnd24, c25));AddArraySlot(page.blocks,	{bounds: bnd25,	item: c26,	dataLen: 56});AddArraySlot(pageList.pages, page);// Page 6page := MakePage(sideby);AddArraySlot(page.blocks, MakeBlock(bnd26, c27));AddArraySlot(page.blocks, MakeBlock(bnd27, c28));AddArraySlot(page.blocks, MakeBlock(bnd28, c29));AddArraySlot(page.blocks, MakeBlock(bnd29, c30));AddArraySlot(pageList.pages, page);// Page 7page := MakePage(bedtimeStory);AddArraySlot(page.blocks, MakeBlock(bnd30, c31));AddArraySlot(page.blocks, MakeBlock(bnd31, c32));AddArraySlot(page.blocks, MakeBlock(bnd32, c33));AddArraySlot(page.blocks, MakeBlock(bnd33, c34));AddArraySlot(pageList.pages, page);// Page 8page := MakePage(bedtimeStory);AddArraySlot(page.blocks, MakeBlock(bnd30, c35));AddArraySlot(page.blocks, MakeBlock(bnd34, c36));AddArraySlot(page.blocks, MakeBlock(bnd35, c37));AddArraySlot(page.blocks, MakeBlock(bnd36, c38));AddArraySlot(pageList.pages, page);// Page 9page := MakePage(summary);AddArraySlot(page.blocks, MakeBlock(bnd37, c40));AddArraySlot(page.blocks, MakeBlock(bnd38, c41));AddArraySlot(page.blocks, MakeBlock(bnd39, c42));AddArraySlot(page.blocks, MakeBlock(bnd40, c43));AddArraySlot(page.blocks, MakeBlock(bnd41, c44));AddArraySlot(page.blocks, MakeBlock(bnd42, c45));AddArraySlot(page.blocks, MakeBlock(bnd43, c46));AddArraySlot(page.blocks, MakeBlock(bnd44, c47));AddArraySlot(page.blocks, MakeBlock(bnd45, c48));AddArraySlot(page.blocks, MakeBlock(bnd46, c49));AddArraySlot(page.blocks, MakeBlock(bnd47, c50));AddArraySlot(page.blocks, MakeBlock(bnd48, c51));AddArraySlot(pageList.pages, page);// Page 10page := MakePage(summary);AddArraySlot(page.blocks, MakeBlock(bnd49, c52));AddArraySlot(page.blocks, MakeBlock(bnd50, c53));AddArraySlot(pageList.pages, page);// Page 11page := MakePage(fancy);AddArraySlot(page.blocks, MakeBlock(bnd51, c55));AddArraySlot(pageList.pages, page);AddArraySlot(book.rendering, pageList);// Browsers & “Page Hints”b1 := {	name: "Contents",  list: []};bp1 := [];		// “Page Hints” for list browserAddArraySlot(book.browsers, b1);AddArraySlot(pageList.contents, bp1);// Indices and Sub-Indices
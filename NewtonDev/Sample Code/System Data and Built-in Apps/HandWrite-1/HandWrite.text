// Text of project HandWrite written on 9/22/97 at 2:56 PM// Beginning of file HandWrite.lyt// Before Script for handWrite// Note that there is no ReOrientToScreen method. // This is because we need to keep a reference to the view definition view and after// we rotate the screen, the view may have been closed then reopened -- our currentView// may be different now. // With no ReOrientToScreen method, we will close when the screen rotates.handWrite :=    {viewBounds: {left: 10, top: -120, right: -10, bottom: -10},     viewJustify: 176,     New:       // The New method opens up an input view and returns a reference       // to the new view       func( viewDefView, newtAppBase )       begin       	// Create the view and add a few important slots to it.       	// 	CurrentView is used in the textView child's InsertText method.       	//		ApplicationBase is not currently used.       	local theView := BuildContext( {_proto: self} );       	theView.currentView := viewDefView;       	theView.applicationBase := newtAppBase;       	theView:Open();       	       	theView;       end,     applicationBase: nil,     currentView: nil,     debug: "handWrite",     _proto: @179 /* protoFloater */    };textView :=    {viewBounds: {left: 2, top: 2, right: -2, bottom: -25},     viewFlags: 196097,     viewFont: simpleFont18,     viewFormat: 12625,     viewLineSpacing: 20,     viewJustify: 240,     viewSetupDoneScript:       func()       begin       	// Set the key view so that users with keyboards can immediately start typing       	SetKeyView( self, 0 );       end,     InsertText:       func()       begin       	local stringToAdd := self.text;              	// Make sure that the Newton Works word processing view is open before trying to       	// add text to it.  Also make sure that we have a string to add.       	if call kViewIsOpenFunc with (currentView) AND StrFilled( stringToAdd ) then       		begin       			// If the last character is not a space then add one in.       			// A real application would probably check to see whether the       			// caret was within a word or not before adding a space.       			if NOT EndsWith( stringToAdd, " " ) then       				stringToAdd := stringToAdd & $ ;              			// Add the new text to the word processing view       			local range := currentView:GetHiliteRange();       			currentView:Replace( range, {text: stringToAdd}, true );              			// Clear the text       			SetValue( self, 'text, nil );       		end;       end,     ClearText:       func()       begin       	SetValue( self, 'text, "" );       end,     debug: "textView",     viewClass: 81 /* clParagraphView */    };AddStepForm(handWrite, textView);StepDeclare(handWrite, textView, 'textView);handWrite_v226_0 :=    {     buttonClickScript:       func()       begin       	textView:InsertText();       end,     text: "Insert",     viewBounds: {left: -65, top: -18, right: -24, bottom: -5},     viewJustify: 8388774,     _proto: @226 /* protoTextButton */    };AddStepForm(handWrite, handWrite_v226_0);handWrite_v226_0 :=    {     buttonClickScript:       func()       begin       	textView:ClearText();       end,     text: "Clear",     viewBounds: {left: -46, top: -18, right: -6, bottom: -5},     viewJustify: 8390790,     _proto: @226 /* protoTextButton */    };AddStepForm(handWrite, handWrite_v226_0);handWrite_v163_0 := {_proto: @163 /* protoLargeClosebox */};AddStepForm(handWrite, handWrite_v163_0);// After Script for handWritethisView := handWrite;/***      Newton Developer Technical Support Sample Code****      HandWrite, a Newton Works word processor tool sample****      by Paul Rekieta and Ryan Robertson, Newton Developer Technical Support****      Copyright © 1997 by Apple Computer, Inc.  All rights reserved.****      You may incorporate this sample code into your applications without**      restriction.  This sample code has been provided "AS IS" and the**      responsibility for its operation is 100% yours.  You are not**      permitted to modify and redistribute the source as "DTS Sample Code."**      If you are going to re-distribute the source, we require that you**      make it clear in the source that the code was descended from**      Apple-provided sample code, but that you've made changes.*/constant |layout_HandWrite.lyt| := handWrite;// End of file HandWrite.lyt// Beginning of text file Part Scripts/***      Newton Developer Technical Support Sample Code****      HandWrite, a Newton Works word processor tool sample****      by Paul Rekieta and Ryan Robertson, Newton Developer Technical Support****      Copyright © 1997 by Apple Computer, Inc.  All rights reserved.****      You may incorporate this sample code into your applications without**      restriction.  This sample code has been provided "AS IS" and the**      responsibility for its operation is 100% yours.  You are not**      permitted to modify and redistribute the source as "DTS Sample Code."**      If you are going to re-distribute the source, we require that you**      make it clear in the source that the code was descended from**      Apple-provided sample code, but that you've made changes.*/// This is the definition of this particular Newton Work's word processor tool.DefineGlobalConstant( 'kToolFrame, {	item: 				"Hand Write",			// Will show up in the 'Tools' button.	dataTypeSymbol: 	'paper,					// Needed so that Newton Works know what stationery this tool is for.	cmdFunc: 			func( viewDefView, newtAppBase )							begin								// Grab the layout and send it a "New" message.  This will								// open the writing view.								GetLayout("HandWrite.lyt"):New( viewDefView, newtAppBase );							end});InstallScript := func(partFrame, removeFrame)begin	// If Newton Works is installed then register the tool.	// Note: when using RegNewtWorksTool, you must EnsureInternal the app symbol. 	if GetRoot().newtWorks then		GetRoot().newtWorks:RegNewtWorksTool( EnsureInternal(kAppSymbol), kToolFrame );end;RemoveScript := func(removeFrame)begin	// If Newton Works is installed, then unregister the tool.	if GetRoot().newtWorks then		GetRoot().newtWorks:UnregNewtWorksTool( kAppSymbol );end;// End of text file Part Scripts
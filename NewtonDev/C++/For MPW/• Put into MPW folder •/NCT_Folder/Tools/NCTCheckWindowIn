#	File:		NCTCheckWindowIn##	Contains:	script to check a window in##	Usage:		CheckWindowIn window comments##	Status:		CheckWindowIn may return the following status values:##					0		the window was checked in#					1		error#					2		the user canceled##				CheckWindowIn presents a dialog that allows the user to type#				in a short comment that indicates what changes have been made#				to the file since it was checked out. These will be logged into#				the project, and into the file.##	Written by:	##	Copyright:	© 1988-1990, 1992, 1994, 1995 by Apple Computer, Inc., all rights reserved.##	Change History (maintain by hand, CheckWindowIn confuses itself by editing itself):#	 			 ## NOTE:  This NCT build script was created from the 5/13/94 version of the internal#        build scriptSet Exit 0Set NCTredirect "·"# the following helps to debug until MPW sends echos to Dev:Console instead of Dev:StdErrIf {Echo}	Set NCTsomewhere "{NCTredirect}{NCTredirect} '{{Worksheet}}'"Else	Set NCTsomewhere "{NCTredirect} Dev:Null"End# Assume that is a second arg (the comment) is present then checkin is occuring via the command# line so need to replace the alerts, etc with echos.If {#} == 2	# operation occuring via command line so behave appropriately	Set NCTCmdLine 1	Set NCTAlertCmd 'Echo > Dev:StdErr'	Set NCTredirect ">"Else	# operation occuring interactively so behave appropriately	Set NCTCmdLine 0	Set NCTAlertCmd AlertEndBegin	Set NCTOldCommentFile "{{TempFolder}}NCTOldComment"	Set NCTNewCommentFile "{{TempFolder}}NCTNewComment"	Set NCTCheckInErrorsFile "{{TempFolder}}NCTCheckInErrors"	Set NCTWindow `Files -f "{{1}}"`	Set NCTInputComments "{{2}}"	# get short name of window	If "{{NCTWindow}}" !~ /(:*([Â:]+:*)*)¨1([Â:]+)¨2/		{NCTAlertCmd} "CanÕt parse window parameter: {{NCTWindow}}" ; Exit 1	End	Set NCTDir "{{¨1}}"	Set NCTShort "{{¨2}}"					# get short name for dialogs	Set NCTCant "Ò{{NCTShort}}Ó canÕt be checked in"	# check what project the window belongs to	Set NCTInfo "``ProjectInfo "{{NCTWindow}}" -comments``"	Unset NCTNew	Unset NCTOldVersion	Set NCTGotOldComment 0	Set NCTKillOldComment 0	If "{{NCTInfo}}" !~ /[Â,]+,([0-9]+)¨1([¶+¶*]Ç0,1È)¨3ÅProject: (Åº)¨2     Checked out: Å/		If "``Project``" == ""			{NCTAlertCmd} "{{NCTCant}} because Ò{{NCTShort}}Ó isnÕt in a project and there are no projects mounted." ; Exit 1		End		If {NCTCmdLine}			{NCTAlertCmd} "{{NCTCant}} because Ò{{NCTShort}}Ó isnÕt in a project, you must check this in by hand."			Exit 1		End		If "`CheckOutDir -r -m` " =~ /ÅCheckOutDir -project (Åº)¨1 ¶'Ç0,1È"{{NCTDir}}"¶'Ç0,1È Å/			Set NCTDefault "-d '{{¨1}}'"		Else			Set NCTDefault ""		End		Set NCTNew "-new -project `GetListItem -s -sort ¶`MountProject -pp -s -r¶` {NCTDefault} ¶			-m "Ò{{NCTShort}}Ó isnÕt in a project. Choose one to add it to:"; Set NCTGetListItemStatus {Status}`"		Exit 2 If {NCTGetListItemStatus}		Echo -n "first checked in" > "{{NCTOldCommentFile}}"		Set NCTGotOldComment 1		If "{{InitialVersion}}" ­ ""			Set NCTNewVersion "{{InitialVersion}}"		Else			Set NCTNewVersion 1		End	Else		Set NCTOldVersion {{¨1}}		Set NCTNewVersion `Evaluate {{NCTOldVersion}} + 1`		Set NCTOldVersion "{{NCTOldVersion}}{{¨3}}"		Set NCTProject "{{¨2}}"				# check if the project is mounted		If "``Echo -n "º "; MountProject -s -pp -r``" !~ /Åº¶'Ç0,1È ¶'Ç0,1È"{{NCTProject}}"¶'Ç0,1ÈÅ/ ; ¶				{NCTAlertCmd} "{{NCTCant}}because the project Ò{{NCTProject}}Ó is not mounted." ; Exit 1		End		# ensure that the window is checked out		If "{{NCTInfo}}" !~ /[Â,]+,[Â ¶t]+[¶+¶*]Å/			If {NCTCmdLine}				{NCTAlertCmd} "{{NCTCant}} again because isnÕt checked out for modification."				# simply exit in this case - can't go on to get it out for the user as in the case below.				Exit 1			Else				Confirm "{{NCTCant}} again because isnÕt checked out for modification. Do you want to check it out?"				Exit "{Status}" If "{Status}"				NCTCheckWindowOut "{{NCTWindow}}"				Exit "{{Status}}"			End		End		# parse an old comment if it is present		If "{{NCTInfo}}" =~ /ÅComment: +(Å)¨1/			Echo -n "{{¨1}}" > "{{NCTOldCommentFile}}"			Set NCTGotOldComment 1		End	End	Set NCTCloseWhenDone 0				# remember if the file needs to be closed	If "`Files -n -i -x t "{{NCTWindow}}"`" =~ /Å(????)¨1/		Evaluate NCTIsTextFile = "{{¨1}}" == "TEXT"	Else		Alert "CanÕt parse Files output." ; Exit 1	End	If {NCTIsTextFile}		# At this point need to make sure that the file is open as a window (open it as the target window)		If "{{Windows}}" !~ /Å{{NCTWindow}}Å/; Open -t "{{NCTWindow}}"; Set NCTCloseWhenDone 1; End	End	# make a special OnExit alias that will close the window if needed, before exiting. This alias should	# be used from here on out.	Alias _NCTOnExit_ 'If {NCTCloseWhenDone} ; Close "{{NCTWindow}}"; End; Exit'	If {NCTIsTextFile} && "{NCTProjectHeaders}"		Mark -y ¤ NCTOldSelection "{{NCTWindow}}"		If "{{NCTOldVersion}}" ­ ""			FindChange "{{NCTWindow}}" "{{NCTOldVersion}}" "{{NCTOldCommentFile}}" && ¶				(Set NCTGotOldComment 1; Set NCTKillOldComment 1)		End	End	Set NCTGetOldComment ""	If {{NCTGotOldComment}}		Set NCTGetOldComment "-d < ¶"{{NCTOldCommentFile}}¶""	End	Set IgnoreCmdPeriod 1		If "{{NCTInputComments}}" == ""			Set NCTCommentStatus 0			CoolRequest -t -q {NCTGetOldComment} "What did you change in Ò{{NCTShort}}Ó?" > "{{NCTNewCommentFile}}" || Set NCTCommentStatus {Status}			If "{NCTCommentStatus}" == "0"				If "`Exists "{{NCTBackRoom-dir}}CheckInControls"`" ­ ""					Echo -n " ["					CoolRequest "Who reviewed your changes (initials)?" || Set NCTCommentStatus {Status}					If "{NCTCommentStatus}" == "0"						Echo -n "], #"						CoolRequest "What bug numbers are fixed by your changes?" || Set NCTCommentStatus {Status}					End				End >> "{{NCTNewCommentFile}}"			End		Else			Echo -n "{{NCTInputComments}}" > "{{NCTNewCommentFile}}"			Set NCTCommentStatus {Status}		End	Set IgnoreCmdPeriod 0	Delete -i "{{NCTOldCommentFile}}"	If {NCTCommentStatus}		If "{NCTProjectHeaders}"			Find NCTOldSelection "{{NCTWindow}}"			Unmark NCTOldSelection "{{NCTWindow}}"		End		Delete -i "{{NCTNewCommentFile}}"		_NCTOnExit_ 2	End	If {NCTIsTextFile} && "{NCTProjectHeaders}"		# add/modify a change in the change history		(Evaluate "``Files -n -q -x m "{{NCTWindow}}"``" =~ /[Â¶/]+ ([1-9]Å)¨1/) · Dev:Null		Set Date "{{¨1}}"					# get date before adding change (doesnÕt include seconds)		If {NCTKillOldComment}			Clear ¤ "{{NCTWindow}}"			# get rid of the old change		End		# Need to tell AddChange where or not to ask to insert missing Headers.		If {NCTCmdLine}			Set NCTSkipHeaderInsert "1"		# don't ask when operating via command line		Else			Set NCTSkipHeaderInsert ""			# ask when operating interactively		End		AddChange "{{NCTWindow}}" "{{NCTNewVersion}}" "{{NCTNewCommentFile}}" {NCTSkipHeaderInsert}		If {Status}						# if we canceled			Find NCTOldSelection "{{NCTWindow}}"			Unmark NCTOldSelection "{{NCTWindow}}"			_NCTOnExit_ 2		End#		If Â"{{NCTDontTrimCheckedInWindows}}"#			If "``Files -n -x b "{{NCTWindow}}"``" =~ /Å ([0-9]+)¨1b/#				If "{{¨1}}" < 102400#					Find ¥ "{{NCTWindow}}" ; Replace -c ° /[¶t¶f Ê]+°/ "" "{{NCTWindow}}"#				End#			End#		End		SetFile -m "{{Date}}" "{{NCTWindow}}"	# set date back to before change		Find NCTOldSelection "{{NCTWindow}}"		Unmark NCTOldSelection "{{NCTWindow}}"		Save "{{NCTWindow}}"					# save before checking in	End	CheckIn {NCTNew} -cf "{{NCTNewCommentFile}}" "{{NCTWindow}},{{NCTNewVersion}}" · "{{NCTCheckInErrorsFile}}"	Set NCTCheckInStatus {Status}	Delete -i "{{NCTNewCommentFile}}"	If {NCTCheckInStatus}		{NCTAlertCmd} "{{NCTCant}}. You may need to check it in on a branch.¶n`Catenate "{{NCTCheckInErrorsFile}}"`" ; _NCTOnExit_ 1	End	Delete -i "{{NCTCheckInErrorsFile}}"	# Now close the file if it was closed to begin with	If {NCTCloseWhenDone} || ({NCTIsTextFile} && "{{AutoCloseAfterCheckIn}}")		Close "{{NCTWindow}}"	EndEnd {NCTsomewhere}
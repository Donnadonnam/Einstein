Preliminary Draft 0.81<$monthname> <$daynum>, <$year>Jonathan Simonoff© Apple Computer, Inc. <$year>Newton Driver Development KitsAn Introduction to the Newton DDKs	Apple Computer, Inc.© 1994, Apple Computer, Inc.All rights reserved. No part of this publication or the software described in it may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, mechanical, electronic, photocopying, recording, or otherwise, without prior written permission of Apple Computer, Inc., except in the normal use of the software or to make a backup copy of the software. The same proprietary and copyright notices must be affixed to any permitted copies as were affixed to the original. This exception does not allow copies to be made for others, whether or not sold, but all of the material purchased (with all backup copies) may be sold, given, or loaned to another person. Under the law, copying includes translating into another language or format. You may use the software on any computer owned by you, but extra copies cannot be made for this purpose. Printed in the United States of America.The Apple logo is a registered trademark of Apple Computer, Inc. Use of the “keyboard” Apple logo (Option-Shift-K) for commercial purposes without the prior written consent of Apple may constitute trademark infringement and unfair competition in violation of federal and state laws.No licenses, express or implied, are granted with respect to any of the technology described in this book. Apple retains all intellectual property rights associated with the technology described in this book. This book is intended to assist application developers to develop applications only for licensed Newton platforms.Apple Computer, Inc.20525 Mariani AvenueCupertino, CA 95014408-996-1010Apple, the Apple logo, APDA, AppleLink, LaserWriter, Macintosh, MPW, and Newton are trademarks of Apple Computer, Inc., registered in the United States and other countries.The light bulb logo, MessagePad, NewtonScript, and Newton Toolkit are trademarks of Apple Computer, Inc.FrameMaker is a registered trademark of Frame Technology Corporation.ARM is a trademark of Advanced RISC Machines Ltd.Helvetica and Palatino are registered trademarks of Linotype Company.ITC Zapf Dingbats is a registered trademark of International Typeface Corporation.Simultaneously published in the United States and Canada.LIMITED WARRANTY ON MEDIA AND REPLACEMENTIf you discover physical defects in the manual or in the media on which a software product is distributed, APDA will replace the media or manual at no charge to you provided you return the item to be replaced with proof of purchase to APDA.ALL IMPLIED WARRANTIES ON THIS MANUAL, INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE LIMITED IN DURATION TO NINETY (90) DAYS FROM THE DATE OF THE ORIGINAL RETAIL PURCHASE OF THIS PRODUCT.Even though Apple has reviewed this manual, APPLE MAKES NO WARRANTY OR REPRESENTATION, EITHER EXPRESS OR IMPLIED, WITH RESPECT TO THIS MANUAL, ITS QUALITY, ACCURACY, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. AS A RESULT, THIS MANUAL IS SOLD “AS IS,” AND YOU, THE PURCHASER, ARE ASSUMING THE ENTIRE RISK AS TO ITS QUALITY AND ACCURACY.IN NO EVENT WILL APPLE BE LIABLE FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES RESULTING FROM ANY DEFECT OR INACCURACY IN THIS MANUAL, even if advised of the possibility of such damages.THE WARRANTY AND REMEDIES SET FORTH ABOVE ARE EXCLUSIVE AND IN LIEU OF ALL OTHERS, ORAL OR WRITTEN, EXPRESS OR IMPLIED. No Apple dealer, agent, or employee is authorized to make any modification, extension, or addition to this warranty.Some states do not allow the exclusion or limitation of implied warranties or liability for incidental or consequential damages, so the above limitation or exclusion may not apply to you. This warranty gives you specific legal rights, and you may also have other rights which vary from state to state.ContentsChapter 1	Introduction	1-1Additional Software	1-2Additional Equipment	1-2Additional Documentation	1-3Chapter 2	The Parts of Your Product	2-1P-Classes	2-1Glue	2-2Packages	2-2Chapter 3	Developing Using DDKs	3-1The DDK Disks	3-1Developing DDK Software	3-2Creating Your Header files and Source Files	3-2Creating a Skeleton P-Class Implementation Header File	3-3Creating a Skeleton P-Class Implementation Source File	3-4Implementing a P-Class	3-5Restrictions on P-Class Implementations	3-5Doing Special Allocation and Deallocation	3-8Making the System Aware of Your Code	3-8Creating a Frame	3-9Building a Package	3-9Loading Your Package	3-10Using the Hammer Debugger	3-10Physically Connecting to the Armistice Card	3-10Using Hammer	3-11Preparing Your Code For Delivery	3-15Chapter 4	The ProtocolGen Tool	4-1Using ProtocolGen	4-1Generating a Header File	4-2Generating a Source File	4-2Generating Glue	4-3ProtocolGen Reference	4-4Chapter 5	The Packer Tool	5-1Generating a .pkg File	5-1Packer Reference	5-2Chapter 6	Writing P-Class Interfaces	6-1P-Class Interface Declarations	6-2Method Declarations	6-2Non-Virtual Method Declarations	6-2Field Declarations	6-3Export-Control Directives	6-3Making P-Class Implementations From Your Interfaces	6-3Instantiating P-Classes On the Stack	6-3Low-level Instantiation	6-4Registration and Instantiation	6-4Modifying P-Classes	6-5Chapter 7	The Name Server	7-1Using the Name Server	7-1Name Server Reference	7-2Lookup	7-2RegisterName	7-3UnRegisterName	7-3WaitForRegister	7-3WaitForUnRegister	7-4Chapter 8	P-Class Reference	8-1Why P-Classes Instead of C++ Classes?	8-1P-Class Implementation Definition	8-3Capabilities	8-4Version Numbers	8-5Class TClassInfo	8-5ImplementationName and InterfaceName	8-6Version	8-6Signature	8-6Size	8-6MakeAt	8-6Register	8-7DeRegister	8-7New	8-7Destroy	8-7GetCapabiltity	8-7Class TProtocol	8-8ClassInfo	8-8Miscellaneous	8-8NewByName	8-8ClassInfoByName	8-9AllocInstanceByName	8-9FreeInstance	8-9Chapter 9	Debug Macros	9-1Macros for Throwing Exceptions	9-1THROWIF	9-1THROWNIL	9-2Macros for Branching	9-2XREQUIRE	9-2XREQUIRENOT	9-3XREQUIRE_ACTION	9-4XREQUIRENOT_ACTION	9-4Other Macros	9-5XASSERT	9-5XASSERTNOT	9-5XDEBUGGER	9-6XPRINT	9-6XSETPTRNAME	9-6XSETHANDLENAME	9-7	Glossary	GL-1IntroductionNewton Driver Development Kits (DDKs) are provided for developers who need low-level access to the Newton operating system and hardware. The DDK approach is modular. Each kit covers a very specific task. These are several kits that are envisioned or underway:n	Communications Driver Development KitYou use this kit to create communications drivers. This software may be placed on a PCMCIA card or distributed through desktop computers and brought onto a Newton using Newton Connection.n	Printer Driver Development KitYou use this kit to create printer drivers. This software may be placed on a PCMCIA card or distributed through desktop computers and brought onto a Newton using Newton Connection.n	PCMCIA Driver Development KitYou use this kit to create Newton device drivers for PCMCIA input/output cards. This software will probably be included on a PCMCIA card, though it could be distributed through desktop computers and brought onto a Newton using Newton Connection.n	PCMCIA Masked ROM KitYou use this kit to put software onto a PCMCIA card. That software could be one of the drivers, or could be application software. This kit is different from the DDKs in that it consists only of a tool that places the software on a PCMCIA card.Each kit typically containsn	scripts and example code for MPW, the Macintosh program development systemn	Hammer, the low-level debugger for the Newtonn	documentationTypically, each kit contains three documents.n	this document, An Introduction to the Newton DDKs, which describes the software and hardware tools you’ll be usingn	the Hammer User Guide, which describes the low-level Newton debuggern	a document describing the individual kit; for example, The Printer Driver Development KitAdditional SoftwareTo develop DDK software you need these software packages installed on your development system.n	MPW, the Macintosh program development system. If you are not familiar with MPW, you might want to familiarize yourself with it. Chapter 3, “Developing Using DDKs,” provides some information and may be enough to get you up and running.n	You may need the Newton Toolkit (NTK). You can order MPW, NTK, or any other APDA® product through APDA (Apple’s source for developer tools):From the USA	1-800-282-2732 	From Canada	1-800-637-0029	From other Countries	(716)871-6555 	Fax	(716)871-6511	AppleLink	APDA	Internet	APDA@applelink.apple.com	CompuServe	76666,2405	America Online	APDAorder	Regular Mail	APDAApple Computer, Inc.P.O. Box 319Buffalo, NY 14207-0319USA	Additional Equipment To test and debug your code, you run Hammer on a Macintosh that is connected to a device called an Armistice card. An Armistice card emulates a Newton; it does not have a Newton ROM; instead, it has RAM that is loaded with a ROM image. Additional DocumentationFor information on the ARM microprocessor (the microprocessor used in the Newton) and ARM development tools, see:ARM Toolkit User's Manual, which describes the ARM Toolkit and how to use the toolsARM Toolkit Reference Manual, which describes advanced features of the toolsARM Toolkit Technical Specifications, which describes the API for the ToolkitARM Toolkit Cookbook, which provides many useful programming examplesThese may be included with your DDK.The Parts of Your ProductWhen you build a Newton OS driver or communication tool, you build on DDK software that is contained in a protocol class, which is called a p-class. P-classes are described in detail in the section immediately following ; for now, you need to know that a p-class is similar to a C++ class. Each DDK includes a p-class interface that is like a base class; you implement your special behavior by creating a p-class implementation that specializes the interface.You may also create a NewtonScript frame that provides information needed by the Newton OS.You process the p-class to create a package. The package can be loaded into a Newton.P-ClassesDDKs are built around software definitions called p-classes. P-classes provide the means for extending the system. A p-class is similar to a regular C++ class, except it is somewhat more restricted so that the underlying operating system has more room for change. A p-class consists of two parts:n	A p-class interface. This is essentially an abstract class definition that is a subclass of TProtocol. You don’t need to know details of TProtocol; if you want to see them, they are described in “Class TProtocol” on page 8-8. You can create your own p-class interfaces, if you choose. Doing so is covered in Chapter 6, “Writing P-Class Interfaces.”n	A p-class implementation. This is essentially a subclass of a p-class interface. You implement your software by creating a p-class implementation. You create the basic framework of a p-class implementation by feeding a p-class interface to ProtocolGen. This tool creates header and source files for you that contain the skeleton of the implementation. You then fill out the skeleton to create your implementation. P-classes look a lot like C++ objects. They are different in a number of very significant ways. One of the important differences is that p-classes use an underlying glue scheme that allows dynamic run-time installation and removal of the software. It is this run-time glue that binds your “derived class” p-class implementation to the “base class” p-class interface.A p-class interface is a fully abstract class, meaning that all of the member functions must be implemented in its subclass, the p-class implementation.Figure 2-1 shows the class hierarchy for a p-class. Figure2-1	P-Class Class HierarchyGlueGlue is assembly-language code that is linked to C++ code to make it possible for the C++ code to be used. There are three kinds of glue used for p-classes:n	P-class interface glue, or interface glue. You must have this; it is created for you by ProtocolGen.n	P-class implementation glue, or implementation glue. You must have this, too; it is also created for you by ProtocolGen.n	Other glue that you may need to write. You may need to write glue to insure that your code is relocatable. This kind of glue is discussed in “Implementing a P-Class” on page 3-5.When a p-class interface method is called, its caller actually calls interface glue. The interface glue in turns calls implementation glue, which passes control to the p-class itself. PackagesPackages provide the means for loading code, resources, objects, and scripts into the Newton system. A package consists of a number of parts. Packages are built using the Packer tool; it takes a list of parts and builds a package.There are an unlimited number of possible kinds of package parts. These are the three you are most likely to use:Protocol part	A protocol part is a compiled and linked binary image created from a p-class. Frame part	A frame part consists of a cluster of frame objects. Some DDKs require frames with specific contents. If a frame is needed for a specific DDK, it is discussed in that DDK’s documentation.Raw part	A raw part consists of raw binary data. The format, creation, and handling of raw parts is left to the developer; no tools are currently provided for generating raw part data. If raw data is needed for a specific DDK, it is discussed in that DDK’s documentation.Developing Using DDKsTo develop software using DDKs, you need ton	Load the DDK files onto your development systemn	Develop your softwaren	Prepare your software for deliveryThe DDK DisksThe contents of the DDK disks vary somewhat, but they usually contain several important folders and files. To install the DDK:n	Drag the folders from the Products folder on the distribution disk into the Products folder in your MPW folder.n	Drag the vt102 file from the Products:ARMTools folder on the distribution disk into your System:Extensions folder.n	Drag the other folders and files from the distribution disks into your MPW folderThe Products folder contains the following folders.Examples folder	Contains example header files and source files.Includes folder 	Contains system header files needed for linking.Object folder	Contains object files needed in building. Products folder	Contains the ARMTools and Test Image folder.ARMTools folder 	Contains the MPW tools you’ll be using.The ARMTools folder has the following tools.ARM6asm	The ARM assembler.ARM6c	The ARM C compiler.ARM6Link	The ARM linker.ARMCFront	The C++ pre-processor.DumpAOF	An MPW tool that disassembles ARM object format.Hammer6	The debugger. The Hammer debugger is described in the Hammer User’s Guide.Packer	An MPW tool that creates a package that can be loaded and executed. Packages are described in “Packages” on page 2-2.ProtocolGen	An MPW tool that creates p-class implementation templates and the glue needed to link them in. P-classes are described in “P-Classes” on page 2-1.vt102	A Macintosh extension.Developing DDK SoftwareDDK development requires that you take the following steps:	1.	Create the header file and the source file for your p-class implementation. Many of the kits provide example files that you can use as a starting point. For kits that don’t provide these, you can generate skeleton header files and source files using ProtocolGen.	2.	Implement the p-class. This involves implementing required methods plus implementing your own private methods and functions.	3.	For some DDKs, create a frame containing required slots plus slots that you desire.	4.	Create a package by combining the p-class, the frame, and glue code. Most kits contain makefiles to do this for you.	5.	Load your package into a Newton or load a ROM image and the package into an Armistice card.	6.	Debug your code using the Hammer debugger.	7.	When your code works properly, prepare it for delivery. These steps are covered in further detail in the sections that follow.Creating Your Header files and Source FilesYou do not have to create header files and source files from scratch. Some kits include example header files and source files that you can use as a starting point for your p-class implementation. The header file has a name like ExampleTool.impl.h and the source file has a name like ExampleTool.c.If example files are not provided with the kit, or if you find you need to generate a fresh p-class implementation, see “Creating a Skeleton P-Class Implementation Header File” on page 3-3 and “Creating a Skeleton P-Class Implementation Source File” on page 3-4.You can change the p-class implementation definition to add these important features:n	Version numbers. You can give your p-class implementation a version number so that if more than one implementation is registered the most recent one is used.n	Capabilities. A capability declaration says that your implementation can do certain things. This allows the system to find a p-class implementation based on a capability rather than on a name.You can also add methods and data members that you need for your implementation.See “P-Class Implementation Definition” on page 8-3 for more information on these features.Creating a Skeleton P-Class Implementation Header FileTo make an implementation of a p-class, declare your implementation as a subclass of the p-class interface, and redeclare the methods of the p-class interface in the subclass. ProtocolGen can do this for you, to save you work and avoid errors. Use this MPW command line:ProtocolGen -ImplementationHeader				∂		ProtoInterface.h					∂		-rename TProtoInterface TProtoImpl	∂		-o ProtoImpl.impl.h							∂		-p							∂		-i includesDir 							∂		-i includesDir:OS600:							∂		-i includesDir:CLibrary:Replace the italic parts as indicated here.ProtoInterface.h	The file that contains the declaration of the p-class interface you are using. The .h extension is required by the sample makefiles shipped with DDKs.TProtoInterface	The type name for the p-class interface you are using.TProtoImpl	The type name for p-class implementation you are creating.ProtoImpl.impl.h	The file that contains the declaration for p-class implementation you are creating. The .impl.h extension is required by the sample makefiles shipped with DDKs.includesDir	The includes directory.You can add any private fields or methods you want.Here is a sample p-class implementation header skeleton:IntelFlashCard.h#include "CardHandler.h"PROTOCOL TIntelFlashCard : public TCardHandler{public:	PROTOCOL_IMPL_HEADER_MACRO(TIntelFlashCard);	TFlashCard *  New(); // "constructor"	void Delete();    // "destructor"		Boolean  RecognizeCard( TCardSocket* socket, TCardPCMCIA* card );		long			InstallServices(TCardSocket* socket, TCardPCMCIA* card,								ULong configNumber=0 );		long			PowerDownCard(void);		long			PowerUpCard(void);};The definition of the method New has been altered in the p-class implementation from the way it was defined in the p-class interface; it is no longer static, and the first char* parameter has been removed. The New and Delete methods are used in place of C++ constructors and destructors; you can overload New and Delete as much as you want. The OperatorNew and OperatorDelete methods are used in place of the C++ new and delete operators. If you use OperatorNew and OperatorDelete in a p-class implementation, they must be declared static. NOTEThe header skeleton includes this line:PROTOCOL_IMPL_HEADER_MACRO(ProtocolImplementation);	This is a macro that makes everything work properly, and you should not remove it.uCreating a Skeleton P-Class Implementation Source FileOnce you’ve finished your p-class implementation header file, you can use this MPW command line to create a skeleton source file for you:ProtocolGen -ImplementationSource												∂		ProtocolImpl.h										∂		-NoLibMain										∂		-i includesDir 										∂		-i includesDir:OS600:									∂		-i includesDir:CLibrary:Replace the italic parts as indicated here.ProtocolImpl	The name of the p-class implementation you are creating.includesDir	The includes directory.You can add any private functions you need.Implementing a P-Class A p-class interface is an abstract class that declares the methods the system needs to make the p-class work. You define these methods in the p-class implementation source file. You can also add your own private methods to the implementation header file and define them in the source file.The major difference between a p-class and a class is that p-classes have certain restrictions. Most of these result from these three more general restrictions:n	All p-classes execute in memory that is defined as read-only. n	You need to write code as if it were in ROM. All such code must be position-independent. n	There is no static initialized data space.When you write the actual code for a p-class implementation, you’ll do so in one or more .c source files. In exactly one of these source files you need to place the statement:PROTOCOL_IMPL_SOURCE_MACRO ( ImplementationName );If you used ProtocolGen to generate the source code skeleton, this has been done for you. Restrictions on P-Class ImplementationsP-class implementationsn	use New and Delete methods in place of C++ constructors and destructorsn	have a different means of providing special allocation and deallocation than that used for C++ style objectsn	require special glue code for obtaining addresses of functionsn	default argument expressions must consist only of a single number or identifiern	cannot have subclassesn	cannot have inline methods declared in the body of the p-class declarationn	cannot define operator functions (for example, operator ==)n	Cannot use non-const global or static variablesn	cannot define and use any code that has virtual methods or that derives from classes with virtual methodsThese details of writing p-class implementations are discussed in the sections immediately following.Using New/Delete Methods Instead of Constructors/DestructorsYou cannot use C++ style constructors and destructors in p-class implementations. Instead, if you want a “constructor,” define a New method; if you want a “destructor,” define a Delete method. You do not have to have either of these methods.Each New method must return this. A New method typically follows this format:TProtocol * implName :: New(){	<<<your initialization>>>	return this;					// required}If you have a class-type object that you want as a data member, and that class has a constructor, you need to take some care to make certain the constructor is called.Suppose you have a field of type TFoo which has a constructor taking an integer and a void*:class TFoo {public:		TFoo();		TFoo(int, void*);		// ...};PROTOCOL TYourImplementation {public:		// ...		TFoo		fFoo;		// ...};To initialize this field you would write#include <new.h>		// ...TSomeInterface * TYourImplementation::New(int arg1, void * arg2){		// ...		(void) new(&fFoo) TFoo(arg1, arg2);		// ...		return this;}Suppose fArrayOfFoo is an array of TFoo objects such as this:TFoo		fArrayOfFoo[5];You call the default constructor for each element of the array with this code:(void) new(&fArrayOfFoo) TFoo[5];Similarly, you should call delete from your Delete function.Special Glue Code For Obtaining Addresses Of FunctionsThe address of a function is position-dependent, so you cannot obtain it directly in p-class code. If you need the address of a function, you can get around this restriction by using an assembly-language glue function that passes the address back to you. You can find a macro that does that in AsmGlue.i.Default Argument ExpressionsAlthough you can provide default argument values, the expressions you give are limited to a single number or identifier. You can express the integer in any way you want. For example, 0x45, 45483, and 'frog' are all legal.Don’t Create SubclassesYou cannot create a subclass or a new implementation from a p-class implementation. Don’t Declare Inline Methods by Giving Code in the P-Class DeclarationIn C++ classes, there are two ways of declaring a method inline. You can only use one of them with p-classes. Here is the way you can use with p-classes, where you use the inline keyword to indicate you are going to give the inline code:PROTOCOL PInterface: PImple {	int add1(int x);}; inline int PInterface::add1(int x){x++;}The other way you can declare an inline method in C++ is to simply give the code in the class declaration. You cannot do this with a p-class. Here is what you cannot do with a p-class:class NotProto {	int add1(int x) { x++; } };Don’t Define Operator FunctionsYou cannot define operator functions as part of a p-class.Don’t Use Non-Const Global Or Static VariablesGlobal and static variables are not position-independent, so you cannot use them. The ARM C compiler will generate position-independent references for most forms of constant data, such as strings, but in general, if you need to make any code-to-data or data-to-code references, you have to do it by using assembly language that computes the addresses at run-time, and you need to write the assembly language code yourself.If you need to pass values between functions and you do not want to write assembly language code, you can use function arguments.Note:The ARM C compiler generates position-independent string constants, so you can use string constants. This is mentioned because many other compilers produce position-dependent string constants.u Don’t Define and Use Code that Has Virtual MethodsAn important implication of the fact that p-classes need position-independent code is that you cannot use code that derives from classes with virtual methods. In particular, most Newton ROM classes have virtual methods, so you generally cannot derive from classes in the Newton ROM. (You can instantiate those classes, though.) In addition, you can’t use some methods of ROM base classes because they require that you supply an instance of a derived class from a base class that has virtual methods.Doing Special Allocation and DeallocationThe p-class system normally allocates and deallocates space for you, and you almost certainly should not have to do anything special. (You might need to do your own allocation and deallocation if, for example, you needed to call NewClearPtr instead of Malloc.)When a p-class object is created, the object system calls alloc to get space for the object. When it is destroyed, the object system calls free to release the space. You can override alloc and free if you need to.To override alloc, provide a method in your p-class implementation or interface called OperatorNew. To override free, provide a method called OperatorDelete. Note that these are not operator functions, and you never call them yourself. If these methods exist, the object system automatically calls them in place of alloc and free.Making the System Aware of Your CodeAs mentioned earlier, a p-class is essentially a class. When the system or an application needs to create a new p-class object, it uses the NewByName function. For example:screenDriver = NewByName("TScreenDriver", "TMainDisplayDriver");The NewByName function is given a p-class interface name followed by a p-class implementation name. The NewByName function asks the Protocol Registry for the p-class code identified by those names. In order for NewByName to work:n	The p-class named in the function call must be registered with the Protocol Registry. When you create a package for a DDK, you give Packer the -autoLoad switch. When you specify that switch, Packer marks the p-class so that when the Package Manager loads the package, it registers the package with the Protocol Registry. You also need to give the -autoRemove switch, so the Package Manager un-registers the package.n	The system must have the name of the p-class implementation.You may wonder how the system or an application finds the p-class implementation name. That depends on the DDK.The Printer DDK has a frame part that you add to the package. The frame part contains the name. When the user wants to choose a printer, the OS looks at the frame parts of all registered printer drivers and uses the information to build a chooser display. When the user chooses one of the printers, the OS gets the p-class implementation name from the frame part of that printer driver.Most other DDKs need corresponding applications. If, for example, you want to use the Communications DDK to create a communications driver, you or someone else will need to write a communications application that uses that driver. When the user wants to use your communications facility, the user starts the application. The application then uses NewByName to create the communications driver. Thus, the application needs to have the p-class implementation name or have some way of finding it out.Creating a FrameSome kits require a frame with special contents. A frame is a NewtonScript data structure that is similar to a C++ class or struct. The Newton OS uses the framen	To determine what to do with the packagen	To find out the name of the p-class implementationn	To get information that will be presented to the user in a chooser or in some other formEach DDK’s documentation describes what, if anything, is needed in the frame for that kit.Building a PackageYou have to make your p-class implementation into a protocol part for inclusion in a package that can be placed on a Newton or in a Newton ROM. You then combine the protocol part with other parts to make a package.In many of the DDKs, the MPW commands for compiling p-classes, generating the necessary glue code, linking, and building a package are already provided in the file “Makefile.” The documentation for your kit will provide instructions for executing the makefile. Those instructions typically look something like this:		Directory "{{local-dir}}ExampleDriver:"		Make > Makeout && DoIt MakeoutThe build system creates a file called “Makeout,” which contains the build instructions for a given compilation run, and a folder called Objects, which contains intermediate object files and binary files.During the build process, an MPW script called DoIt opens the Makeout file. Using a selection (video highlighting) process, this file shows you the individual build commands as they take place. If there is an error during the build process, DoIt stops executing commands, closes the Makeout file, and leaves any error messages on the MPW Worksheet. You can fix the problem, and repeat the process.If your kit does not provide the necessary commands, or if you need to change them, you’ll need to understand the relevant ProtocolGen and Packer commands (see Chapter 4, “The ProtocolGen Tool” and Chapter 5, “The Packer Tool”). Making the package consists of two phases; first, there are several steps to create a protocol part; you then include it in a package.	1.	Use ProtocolGen to generate assembly language glue needed for linking.	2.	Compile your p-class implementation source.	3.	Assemble the glue.	4.	Link your code with the glue and with libraries and system header files.You have now created a protocol part.	5.	Use Packer to build a package.Loading Your PackageOnce you’ve built the package, you can load it into a Newton using Newton Connection, the way you load any package. The next section deals with loading a package using the Hammer debugger, in case your package has errors.Using the Hammer DebuggerYou can use Hammer to help debug your code.When you use Hammer, you load it with a Newton ROM image. You must have the ROM image for the kind of Newton you want to test. Physically Connecting to the Armistice CardYou can connect your Macintosh directly to an Armistice card with a null modem cable, that is, a serial cable in which pins 2 and 3 are crossed over (pin 2 on the Macintosh end connects to pin 3 on the Newton end of the cable; pin 3 on the Macintosh end connects to pin 2 on the Newton end). This cable is also known as a direct serial cable and is often sold as a printer cable. You can use Apple cable model M0197, part number 590-0552. This is the same cable you use to connect your Macintosh to a Newton.You install the cable between the serial connector on the Armistice card and one of the serial ports on the Macintosh. You can use either the modem serial port or the printer serial port; the modem port is the default.NoteMake sure that no other Macintosh software is using the same serial port.uUsing Hammer You need to configure Hammer so that it works properly with the card. In this case, Hammer displays an image of a Newton display. This section contains instructions for configuring Hammer and for using the Newton display.Configuring HammerBefore using Hammer, you must make sure it is configured correctly for use with an Armistice card. Follow these instructions.	1.	Open the Arm Tools folder.	2.	Launch the Newton ROM image by dragging it onto the Hammer6 icon. Alternatively, you can double-click on the Hammer6 icon. Hammer displays a standard file dialog box allowing you to choose a ROM image.When Hammer first comes up, you will initially see only one window, labeled with the name of the image file; this is the status window. 	3.	Once the message at the bottom changes from Initializing to Stop and Rerun, click on the Stop button. From the Config menu, make sure these items are checked:	Default Stdio On	Don't Sleep	Fake Battery LevelIgnore the other items for now, checking them may make Hammer hang. NoteThe Don’t Sleep setting in the Config menu controls a different kind of sleep than the sleep setting in the Newton’s preferences. The ARM processor has a sleep mode that is independent of the Newton’s sleep mode. The Config menu controls the sleep feature of the ARM processor.u	4.	In the Windows menu choose Display, this will open the Newton display window on the Macintosh. 	5.	Quit Hammer.Hammer is now configured so that it will work properly the next time you start it.Loading Your Program Into an Armistice CardIf you are using an Armistice card to test your program, follow these steps.	1.	Connect a serial cable from your Macintosh to the serial port of Armistice card.	2.	Open the Arm Tools folder.	3.	Launch the Newton ROM image by dragging it onto the Hammer6 icon. Hammer resets the Armistice, downloads a ROM image into it, and launches the image. Alternatively, you can double-click on the Hammer6 icon. Hammer displays a standard file dialog box allowing you to choose a ROM image.If you’re running MPW for DDKs, you can choose one of the Launch commands in the DDK_Products menu. The Armistice card displays a Newton screen on the Macintosh. You can use this screen in the same way you use a Newton. It is referred to as a Newton for the rest of these instructions.	4.	Make certain that the sleep setting on the Newton is set to “never”.	5.	You can use either the NTK Inspector or the Hammer NewtonScript Inspector. To bring up the Hammer NewtonScript Inspector, check the Default Stdio On item in the Config menu.	6.	In the Inspector window type:	LoadPackage(NIL)	7.	Press Enter. The Macintosh displays a standard file dialog. 	8.	Choose your package. Alternatively, you can simply type the package pathname in place of NIL.	9.	On the Newton, select “Connection” and “Macintosh Serial”. The tool should be automatically downloaded. (This step may freeze your Macintosh for approximately 30 seconds. When it completes, the Inspector should report a successful download. The Newton may report an error, which you can ignore.)	10.	On the Newton, you can verify that your package has been successfully installed by going to the Memory preferences and tapping the “Remove package” button. You should see your package, but don’t actually remove it, unless you want to.	11.	See the Hammer manual for information on using the debugger.Using Hammer ‘s Newton DisplayWhen you use an Armistice card, Hammer displays an image of a Newton display in the newton MessagePad window. You operate in the Newton MessagePad window just like you would with a Newton. Use the mouse to click, drag, write, draw, etc. At the bottom of the window you will see a check box labeled Card Locked and a button labeled Power.The Card Locked checkbox is the equivalent of the physical card lock switch on the Newton. Make sure the box is unchecked before you install or remove a PCMCIA card in the Armistice card. (Unchecking the box is all that is necessary to “remove” a PCMCIA card, so you can test your application's behavior when cards are removed without actually removing the PCMCIA card from the Armistice card.)sWARNINGYou can install and remove PCMCIA cards from the Armistice card while it is in operation, just like you can with a Newton. However, it is easy to disconnect or jar the NuBus connection while doing so. A small piece of tape stuck to the end of PCMCIA card will aid removing it. The card is logically removed as soon as the Card Lock switch is unchecked, so physically removing the card is only necessary to actually change cards.sThe Power button is the equivalent of the power switch on the Newton. Click on it once to put the Armistice card to sleep; click on it again to wake the Armistice card up. The display will not actually go blank when you put the Armistice card to sleep, but input will be disabled as on the real Newton. You can test your application's behavior when the Newton is put to sleep this way.The Status window, labeled with the name of the image, is used to start and stop the Armistice card. It may stop occasionally when errors occur, when it does, use the GO button to resume. The RERUN button in this window is the equivalent of the Reset switch under the battery cover on the real Newton. Use it to do a soft reset of the system. (A soft reset stops running applications, but does not remove packages or user data.)In the Commands menu, you will also see Stop, Go, and Rerun command, and another command called Reload & Rerun. Use the Reload & Rerun command to do a full reset of the Armistice card. This is the equivalent of taking out both the batteries for a while on the real Newton, which deletes any installed user data and packages and OS patches. Quitting and restarting Hammer will produce a similar result.A window titled stdin/stdout/stderr will appear. Some debugging messages from the Newton OS may appear in this window. You can ignore it.When you load a package, a Package Loader window will appear. Some text about the package being loaded will appear. You can ignore it.A window titled Hammer Listener will appear. This gives you an interface to the Armistice card similar to NTK’s Inspector. However, you can only type one line at a time in the Listener window, and as soon as you start typing, the Newton freezes until you complete the line.The Listener is communicating with the Armistice card over the NuBus, so it is much faster than the Inspector with NTK which must use the serial port. Using the “trace” global variable for debugging may be possible with the Listener.The Listener provides two additional commands which are useful, LoadPackage, and Load.  You type these commands into the Listener window. LoadPackage will take a package built with NTK and load it into the Armistice card. You use this to test you applications. The syntax is loadpackage("full path name to .pkg file") If you don't know the full path name to the .pkg file, use this: loadpackage(nil) This will bring up a Standard File dialog that you can use to select the .pkg file to load.  (Hint—NTK puts .pkg files in the same location as the project files.)The Load command reads in a text file and executes each of the lines in the text file as if it was typed into the Listener. The syntax is: load("full path name of text file"). The load command will not accept a nil parameter. You can use this feature to create files of commonly executed commands. You can write whole programs this way, but doing so is not recommended.IMPORTANTThe loadpackage command does not automatically stop running applications or unload the old packages for you as the NTK Inspector can. You need to do this yourself. You can do it through the Newton user interface (Extras, Preferences, Memory, Remove Software) or by using the removepackage global function in the Newton. Removepackage takes a single argument, which is the package to remove. You can get at your package using the getpackages global function, which returns an array of the loaded packages. Usually there is just one package loaded, your application, so getpackages()[0] is your application package. The full command to type is: removepackage(getpackages()[0])You can create a global function that calls removepackage and then LoadPackage for you. The function looks like this: global zap() begin 	removepackage(getpackages()[0]); 	loadpackage(nil) endNow all you need to type to remove the old package and get a dialog to install the new one is: zap()You can also use the load function to do something like this.sTroubleshootingIf Hammer appear to hang while starting, or crashes to MacsBug while starting, it may be that you have not installed the Armistice card, or installed it improperly.If Hammer hangs during or after loading the image, it may be that you have set some of the option in the Config menu incorrectly. Make sure that the only three options set are Default Stdio on, Don't Sleep, and Fake Battery Level.Remember to Stop the Armistice card before changing Config menu items, and quit and restart Hammer after. If you cannot stop the Armistice card because the Config menu has some items set incorrectly (Bunwarmer Diagnostics does this, for example), you need to delete the ARM preferences file from the Preferences folder in the System folder, and then start Hammer again and reconfigure it.If you get a dialog box saying “Timeout waiting for Window Input”, your must use the Exit button to quit and restart Hammer. This happens occasionally when you type too fast into the Listener window. When you type the first letter, Hammer goes and tries to stop the Armistice card. If you type the second letter before it has stopped the card, you get stuck like this. After the second letter you can type as fast as you want. (This rarely happens, however)If you get unusual “deep toast alert” messages when you start the Armistice image, then your Armistice card probably has hardware problems.Preparing Your Code For DeliveryWhen your code works properly, prepare it for delivery. There are two basic forms of delivery:n	A package can be distributed to desktop computers on disk or in some other form, and then downloaded to Newtons using Newton Connection. n	A package can be placed on a PCMCIA card using the PCMCIA Masked ROM Kit. These cards can then be manufactured and delivered. See the PCMCIA Masked ROM Kit documentation for information.The ProtocolGen ToolIn general, the makefile contained in your DDK has ProtocolGen rules built in to it. You shouldn’t need to read this chapter unless you: need to generate a new header file or source file for your p-class implementation or need to make you own p-class interface.The ProtocolGen tool serves three functions:n	It simplifies the creation of header files for p-class implementations.n	It simplifies the creation of source files for p-class implementations.n	It generates glue needed for linking. These are the build rules built into the sample makefiles. The DDKs come with sample or template header files and source files complete with glue, so you do not need to use ProtocolGen. If you need to use it because the kit does not have sample files, or if you want to start with fresh files, you can follow the directions in this section. After these directions is a reference section that details all of the options of ProtocolGen.Using ProtocolGenYou use ProtocolGen for three purposes:n	To generate a “starter” header file for a p-class implementationn	To generate “starter” source file for a p-class implementationn	 To generate glueYou can only accomplish this last task with ProtocolGen. You can create your own header and source files, but using ProtocolGen to do so saves you work helps avoid typing errors.Generating a Header FileTo use ProtocolGen to generate a header file, in MPW, enter the following command, replacing:n	kit with the name of the kit you are usingn	TInterface with the name of the p-class interface you are using as the basis for your implementationn	TMyImplementation with the name you want to use for your p-class implementationn	MyProduct with the name you want to use for your implementation files	ProtocolGen -ImplementationHeader 													∂		kit.h 												∂		-rename TInterface TmyImplementation 												∂		-stdout >MyProduct.impl.h 												∂		-i {includes-dir}OS600:This produces a header file called MyProduct.impl.h which looks something like this:#include "kit.h"PROTOCOL TMyImplementation : public TInterface{public:	PROTOCOL_IMPL_HEADER_MACRO(TMyImplementation);	TInterface * New(); // "constructor"	void			Delete();				// "destructor"...};The first line in the public section is a macro that you should not remove.Generating a Source FileProtocolGen can use your header file to create a source file that has skeletons for the methods defined in the header file. You can, of course, easily generate such a file yourself. To use ProtocolGen to generate a source file, in MPW, enter the following command, replacing MyProduct with the name you want to use for your implementation files	ProtocolGen -ImplementationSource 												∂		MyProduct.impl.h 											∂		-stdout >MyProduct.c 											∂		-NoLibMain 											∂		-i {includes-dir}OS600: 									∂		-i {includes-dir}CLibraryThis produces a file called MyProduct.c that looks something like this:PROTOCOL_IMPL_MACRO(TMyImplementation);	TInterface * TMyImplementation :: New(){}void TMyImplementation::Delete(){}...The first line defines a macro that you should not remove.Generating GlueBefore you can use or provide a p-class, you will need to write or generate the appropriate glue. This is most easily done by adding build rules and dependencies to your makefile. All the standard glue you need can be generated for you using ProtocolGen. You may need to write additional glue if you write certain kinds of code, as is described in “Implementing a P-Class” on page 3-5.Most of the kits come with makefiles that contain the rules to generate glue. If your kit does not, include the following build rules lines in your makefile:.h.o  ƒ  .h	ProtocolGen -InterfaceGlue {depDir}{Default}.h {COptions} ∂		-stdout >"{{CPlusScratch}}{Default}.glue.h"	{product-asm} "{{CPlusScratch}}{Default}.glue.h" ∂		-o {targDir}{Default}.h.o	 Delete -i "{{CPlusScratch}}{Default}.glue.h".impl.h.o ƒ  .impl.h	ProtocolGen -ImplementationGlue {depDir}{Default}.impl.h ∂		-package ∂		{COptions} -stdout >"{{CPlusScratch}}{Default}.impl.h"	{product-asm} "{{CPlusScratch}}{Default}.impl.h" ∂		-o {targDir}{Default}.impl.h.o	Delete -i "{{CPlusScratch}}{Default}.impl.h"These default rules assume that you have added appropriate -i directives to the variable {COptions}.For each interface that your code calls, add a dependency similar to:{Objects}interface.h.o ƒ "{includes-dir}Foo:interface.h" …otherDeps…This line generates interface glue for the interface a subsystem called Foo. Add the .o file to your link statement.For each implementation that your code provides, add a dependency like:{Objects}Frobozz.impl.h.o ƒ {MyIncludes}Frobozz.impl.h …otherDeps…This will generate implementation glue. Again, add the .o file to your link statement.ProtocolGen ReferenceThe options for ProtocolGen are as follows:ProtocolGen option... sourceFile  <action>  [-d symbol[=value]]  [-i directory]  [-rename intfc impl]  [-p]  [-stdout]  [-package]The options are explained here.<action>	Specifies the ProtocolGen action. Exactly one <action> must be specified, and it must be one of the following:-ImplementationHeader	Generates implementation header file	-ImplementationSource	Generates implementation source file	-ImplementationGlue	Generates implementation glue	-InterfaceGlue	Generates interface glue		Fuller descriptions of these actions follow later in this section.-d symbol[=value]Defines a preprocessor symbol.-i directory 	Defines the preprocessor include directory.-rename intfc implSpecifies the name of the p-class interface and the name of the p-class implementation you want created from it. These are type names, not file names.-p	Specifies that ProtocolGen should print progress information.-stdout	Sends output to standard output. Except in rare cases, you should always use the -stdout option and use the MPW redirect operator (>) to direct output into a file. If you don’t, ProtocolGen generates its output based on the names of the input files, which may produce unexpected results.-package	Ensures that the implementation glue for a p-class in a package is placed at the start of the package. Note that such packages can contain exactly one p-class. This is the normal situation. In general, you must use the -package option, because only p-classes prepared with this option are registered with the Package Manager.NOTEIf you have a package that has more than one p-class, one and only one p-class must have been prepared using the -package option. None of the current DDKs uses more than one p-class, however. If a future DDK does, the makefile or documentation for that DDK will account for the situation. If you add p-classes of your own design, you must make certain only one is prepared using -package.uThe -ImplementationHeader option generates an implementation header skeleton from an interface declaration. You must specify the interface and implementation names with the -rename option. For example:ProtocolGen -ImplementationHeader ∂	Frog.h ∂	-rename TFrog TBullFrog ∂	-stdout >BullFrog.impl.h ∂	-i {includes-dir}OS600:might create a header skeleton for TBullFrog, an implementation of TFrog. The -ImplementationSource option generates skeleton source code for the methods of an implementation. For example:ProtocolGen -ImplementationSource ∂	BullFrog.impl.h ∂	-stdout >BullFrog.c ∂	-i {includes-dir}OS600:might create a source code template file, BullFrog. The generated template contains empty method declarations; for example:void TBullFrog :: GetEvent ( void ){}The -InterfaceGlue and -ImplementationGlue options generate assembly-language source for the necessary glue, suitable for running through the ARM6Asm tool.Here’s an example..h.o   ƒ         .hProtocolGen -InterfaceGlue {depDir}{Default}.h         ∂	{COptions} -stdout>"{{CPlusScratch}}{Default}.glue.h"{product-asm} "{{CPlusScratch}}{Default}.glue.h"       ∂	-o {targDir}{Default}.h.o ;                         ∂	Delete -i "{{CPlusScratch}}{Default}.glue.h".impl.h.o   ƒ     .impl.hProtocolGen -Package -ImplementationGlue              ∂	{depDir}{Default}.impl.h {COptions}                ∂	-stdout >"{{CPlusScratch}}{Default}.impl.h"{product-asm} "{{CPlusScratch}}{Default}.impl.h"      ∂	-o {targDir}{Default}.impl.h.o ;                   ∂	Delete -i "{{CPlusScratch}}{Default}.impl.h"The Packer ToolIn general, the sample makefiles contained in your DDK has Packer rules built in to it. You shouldn’t need to read this section unless you want to add an additional package part.Packer is an MPW tool that generates a package, which is contained in a .pkg file.When you create a DDK package, you tell Packer to mark the package so that when it is loaded, the Protocol Registry registers the DDK p-class. You do this by giving Packer the -autoload and -autoRemove switches.Generating a .pkg File Here is an example of using Packer:Packer																									∂	-o packagename.pkg																								∂	packagename																								∂	-packageid 'any1'}																								∂	-version 1																								∂	-copyright "copyright 1994 MyCompany, Inc."																								∂	-protocol -aif :objectdir:packagename.bin																									∂	-autoLoad -autoRemove -notify 'cdhl' packagename																	This sample only has one part, which is a protocol part. A protocol part contains a p-class (protocol class).Packer ReferenceThe options for the Packer tool are as follows:Packer 	[-p]	[-o [-aif] outputFile]	packageName	[-packageid id]	[-version vers]	[-c outputCreator]	[-copyright string]	<partspec>The options are explained below.-p	Gives progress information to standard error-o [-aif] <outputFile>Specifies the output file.	-aif	Makes symbols available to the Hammer debugger.packageName	Specifies the package name. This name is placed in the package header and must be unique.-packageid <id>	Specifies a secondary ID, which must be exactly four characters long. This option is not currently used by the Newton system, but it may be used in future products as a second test for package uniqueness.-version <vers>	Specifies a package version number. If you re-release your package, you can update the version number to distinguish it from earlier versions.[-c outputCreator]Specifies the creator for the output file.-copyright <string> 	Specifies an optional copyright string that will be placed in the package header for your protection.<miscpackageflags> Described in the section immediately following.<partSpec> 	Described in the section immediately following.The <partSpec> option describes the type of the part, the name of the output file, and various options. It has the following format:	<partType>	[-aif]	partFile	[-autoLoad]	[-autoRemove]	[-compressed compressor]	[-notify type info]The options are explained below.<partType>	Specifies the part type; values are -protocol, -frame, or -raw.-aif	Makes symbols available to the Hammer debugger.partFile	Specifies the source file of the part data. The entire data fork becomes the part data. For parts created with ARM6Link, the entry point must be at offset zero in the image and the -bin format can be used.-autoLoad	Specifies auto loading. This option is available to protocol parts. When the part is installed, it is automatically registered in the Protocol Registry. If you specify this option, you should also specify -autoRemove.-autoRemove	Specifies auto removal. This option is available to protocol parts. When the part is removed, it is automatically unregistered from the Protocol Registry. If you specify this option, you should also specify -autoLoad.-compressed compressorSpecifies that the part is compressed, where compressor is the name of a p-class that should be used to decompress the part data. Packer does not support compression, and you need to pre-process the part data with an appropriate compressor before using Packer. In the rare case that you have included a streamed frame part, the part must be marked with -compressed "streamed".-notify type info	Specifies that the part handler for the given type should be notified when this part is installed and removed. The type must be four bytes in length. The info parameter specifies an ASCII string (not necessarily null-terminated) that’s passed to the part handler when the part is installed. In the future, info may support a more flexible information model (including, bits, frames, and so on). 	To ensure null termination on an info field, or to specify any non-standard character, the sequence \$XX can be used, where XX represents an 8-bit hex value; for instance	-notify 'null' "hello there\$00"The <miscpackageflags> gives additional options.-copyprotected	Marks the package as copy-protected. (This option sets a bit that suggests the package should be copy-protected. It does nothing to enforce this request.)-dispatchonly	Marks the package for immediate removal after it has been installed.-nocompression	Keeps the package from being stored in compressed form in a storage device. This option is useful for speed.-base <address>	Specifies the base address for the package.Parts are placed in the package in the order that they are specified. When a package is installed, it is loaded in the same specified order. This is important if parts are interdependent. For example, an application may depend on the fact that a protocol part was loaded before the application. On package removal, the parts are removed in reverse order.A successful build results in the creation of a file, with the suffix.pkg, which is a loadable package.Packages can be loaded either as a data stream or directly from memory. For example, a package could be loaded serially using a data stream protocol, or it could be loaded directly from a PCMCIA ROM card.When a package is installed, the package is scanned and parts are dispersed to different parts of the system. The Package Manager keeps track of what was loaded, and can later initiate the process of removing a given package.Writing P-Class InterfacesYou only need to write p-class implementations in order to use Newton DDKs. This section describes how to write your own interfaces, in case you want to do that. If you make your own p-class interfaces, there are some additional things you need to think about in making p-class implementations for those p-class interfaces. Those are discussed in“Making P-Class Implementations From Your Interfaces” on page 6-3.P-class interfaces are similar to C++ classes. The greatest difference is that all methods are virtual by default. That is, methods generally are not implemented in the p-class interface, but are implemented in the subclass (the p-class implementation). You can explicitly declare a method NONVIRTUAL, in which case it is implemented in the p-class interface and cannot be overridden in the p-class implementation. Here are the main differences between p-class interfaces and C++ classes. P-class interfaces:n	inherit only from class TProtocoln	cannot use multiple inheritancen	cannot inherit from classes that have virtual methods n	can use the NONVIRTUAL keyword, although there are restrictions on its use, described in “Non-Virtual Method Declarations” on page 6-2n	cannot use the virtual keyword.n	default argument expressions must consist only of a single integer or identifiern	cannot have inline methodsn	cannot define operator functions, such as operator ==n	cannot have global or static variablesn	cannot have constructors and destructorsn	must have New and Delete methods if you want implementations to be able to have New and Delete methodsn	should not be instantiated on the stack; there is a work-around for this restriction, discussed in “Instantiating P-Classes On the Stack” on page 6-3Many of these restrictions are the same as those on p-class implementations, and are discussed in detail in “Implementing a P-Class” beginning on page 3-5.NOTEWhen you build a package with more than one p-class, one and only one of the p-classes must be prepared using the -package option to ProtocolGen. When there is a DDK p-class, the one prepared using -package must be the DDK p-class. uP-Class Interface DeclarationsA p-class interface declaration is essentially the same as an ordinary class declaration with the restrictions listed in the immediately preceding section. Here is the syntax:PROTOCOL classname : public TProtocol { ... };Within the class body, the following declaration forms are allowed: n	method declarationsn	non-virtual method declarationsn	field declarationsn	export-control declarationsNote that although data members are allowed, they are not recommended because, if you use data members, you must not change them when you release new versions of your p-class interface.Method Declarationstype methodname ( [ arg [, arg...] );An ordinary method declaration. The type is required; int is not assumed.static type methodname ( [ arg [, arg...] );An ordinary static method.Non-Virtual Method DeclarationsNONVIRTUAL type methodname ( [ arg [, arg...] );A non-virtual method. A non-virtual method behaves like an ordinary C++ method, bypassing the p-class dispatch mechanism. The method is actually implemented in the interface class.If you declare one of these, callers will need to be able to link to it; that is, the method must be exported in the ROM jump table or some other well-known location. Thus, NONVIRTUAL can be used in a p-class only if the p-class makes the method’s address available by using another method that returns the method’s address. See “Special Glue Code For Obtaining Addresses Of Functions” on page 3-7.Field Declarationstype fieldname ;type fieldname [ constant-expression ] ;type ( * fieldname ) ( [arg [, arg ...]] );Ordinary field declarations. Note that the fields must not require constructors or destructors to be run on their behalf. Export-Control Directives{ private | public | protected } : The usual export-control directives.Making P-Class Implementations From Your InterfacesAll of the information given in “Implementing a P-Class” on page 3-5 applies to implementing p-classes from interfaces you’ve created. In addition, there are things you may need to do that do not apply when you are implementing DDK p-classes.Instantiating P-Classes On the StackYou should avoid instantiating p-classes on the stack. You might need to, however, if, for example, you need an instance before malloc is working in the OS start-up sequence. If so, the following works:TMyPclass anInstance;TMyPclass::ClassInfo()->MakeAt(&anInstance);Note that a stack-based instance you’ve declared is bound to the size of the implementation; you can check this with an assert:XASSERT(sizeof(anInstance) == (size_t)TMyPclass::SizeOf());Low-level InstantiationThe Protocol Registry (which calls like NewByName depend on) is initialized fairly late in the OS boot sequence. However, instances of p-classes can be made with just the class information of a p-class. (See “Class TClassInfo” on page 8-5.)First, obtain a pointer to the class information. Here’s one way:TClassInfo * myClassInfo = TMyPclass::ClassInfo();Next, allocate some memory for the instance. The class information provides a method that returns the amount of memory the instance uses:TMyPclass * myInstance := (TMyPclass*)malloc(myClassInfo->SizeOf());Next, make an instance in the memory you just allocated:myClassInfo->MakeAt(myInstance);At this point you should call whatever initialization methods you normally call when an instance is made. (The MakeAt method does not automatically call the p-class’s New method, for instance, but you can do that yourself.)Registration and InstantiationWhen you build a DDK package you tell Packer to mark the DDK protocol part so that the p-class is registered in the Protocol Registry when the package is loaded. You can do that with any p-class that is a package part, as most p-classes are.However, if you are implementing your own p-classes that are not package parts you’ll generally want to add p-classes to the system’s Protocol Registry. For example, suppose you have a p-class called TMyCardHandler. You will need to register TMyCardHandler at run-time in order to be able to make instances of it by name via TCardHandler::New. How you do this depends on where the code for TMyCardHandler came from. At some point in the system start-up sequence you simply write:#include "MyCardHandler.h"// ...TMyCardHandler::ClassInfo()->Register();// later...here are two ways of making instances by name:TCardHandler * ch1 = TCardHandler::New("TMyCardHandler");TCardHandler * ch2 = (TCardHandler*)NewByName("TCardHandler", "TMyCardHandler");Notice that you cast the result of NewByName to the correct type.Modifying P-ClassesIf you make changes to the p-class interface, you will have to propagate the changes into implementation declarations and source files as you would with any other C++ class, and you’ll also need to generate the glue files again. You probably don’t want to re-run ProtocolGen to generate implementation framework source unless you're willing to merge all of your implementation code again. Chapter 8, “P-Class Reference,” describes what you need to do if you’ve shipped code already, and want old p-classes to still work.One very important point is that you should not change the order of methods in the interface. Do not remove methods, and if you add new methods, add them to the end of the method list.The Name ServerYou can use the Name Server to register information so that it is available to other parts of the system through a name. Note that this is not necessary for DDK p-classes—these are registered with the Protocol Registry when they are loaded by the Package Manager.The information registered must be in the form of two 32-bit words. It is identified by a pair of strings. The information registered is normally a Newton OS kernel object ID plus a specification of some kind, though you can register any two words of data.Using the Name ServerTo use the Name Server, you create a name server object and call its methods. Creating a name server object involves a fair amount of overhead, because several OS kernel objects need to be initialized. You should therefore create name server objects as infrequently as possible.Here is an example:TUNameServer	 NameServer;ULong			word1;ULong			word2;	NameServer.RegisterName("Peanut Butter", "Food Spread", 0x1234, 0x5678));	.	.		.NameServer.Lookup("Peanut Butter", "Food Spread", &word1, &word2));	/* word1 now equals 0x1234 and word2 equals 0x5678 */	.	.	.NameServer.UnRegisterName("Peanut Butter", "Food Spread"));Name Server ReferenceHere is the Name Server class definition:class TUNameServer{	public:	TUNameServer();	NewtonErr RegisterName(char* name, char* type, ULong word1, ULong word2);	NewtonErr UnRegisterName(char* name, char* type);	NewtonErr WaitForRegister(char* name, char* type, ULong* word1,										ULong* word2);	NewtonErr WaitForUnregister(char* name, char* type);	NewtonErr Lookup(char* name, char* type, ULong* word1, ULong* word2);		// The following four methods are available in ROM versions 2.0 & later	NewtonErr ResourceClaim(char* name, char* type, TObjectId ownerPortId,									TObjectId applicationNameId);	NewtonErr ResourceUnclaim(char* name, char* type);	NewtonErr ResourcePassiveClaim(char* name, char* type,								TObjectId ownerPortId, TObjectId applicationNameId);	NewtonErr ResourcePassiveUnclaim(char* name, char* type);	private:	TUPort 		fNameServerPort;	TUSharedMem* fMsgName;	TUSharedMem* fMsgType;};LookupNewtonErr LookUp(						char* name, 						char* type, 						ULong word1, 						ULong word2);This call will search the registry for an item matching the specified name and type fields. The other two parameters, word1 and word2, will be returned.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.word1	One word of data.word2	One word of data.RegisterNameNewtonErr RegisterName(								char* name, 								char* type, 								ULong word1, 								ULong word2);This call is used to register information with the Name Server.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.word1	One word of data.word2	One word of data.UnRegisterNameNewtonErr UnRegisterName(									char* name, 									char* type);This call removes the item that matches name and type from the registry.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.WaitForRegisterNewtonErr WaitForRegister(									char* name, 									char* type, 									ULong word1, 									ULong word2);This call is the same as Lookup but does return until the name is found in the registry. The parameters word1 and word2 are returned.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.word1	One word of data.word2	One word of data.WaitForUnRegisterNewtonErr WaitForUnRegister(										char* name, 										char* type, );This call will not return until the item specified by name and type is removed from the registry with an UnRegisterName call.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.ResourceClaimNewtonErr ResourceClaim(								char* name, 								char* type,								TObjectId ownerPortId,								TObjectId applicationNameId);A task calls the ResourceClaim method to make an active claim on a resource that has previously been registered with the name server. The system software responds to this as follows:n	if the resource is in use by another task, the system software calls that task’s ResArbRelease method, to notify it that a request for use of the resource has been made.n	if the ResArbRelease call returns an error code, the resource is not available and ResourceClaim returns an error. n	if the ResArbRelease call returns noErr, the resource is available. ResourceClaim returns noErr to indicate that the caller now owns the resource.NOTEAny task can use the resource arbitration facilities built into the Name Server; however, resource arbitration is currently used only by communications tools. You can read about resource arbitration in Newton Communications Tools.uThe name and type of the resource must match the name and type of a resource object already registered with the Name Server. Otherwise, this method fails and returns the kError_Not_Registered error.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.ownerPortId	The object ID of the port for the communications tool.applicationNameId	The shared memory ID of the resource owner.ResourceUnclaimNewtonErr ResourceUnclaim(									char* name, 									char* type );Unclaims the active claim of a resource, making it available for use by other tasks. If another task has a passive claim on the resource, the system responds to this call by calling ResArbClaimNotification method of the passive claim task.NOTEAny task can use the resource arbitration facilities built into the Name Server; however, resource arbitration is currently used only by communications tools. You can read about resource arbitration in Newton Communications Tools.uThe name and type of the resource must match the name and type of a resource object already registered with the Name Server. Otherwise, this method fails and returns the kError_Not_Registered error.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.ResourcePassiveClaimNewtonErr ResourceClaim(								char* name, 								char* type,								TObjectId ownerPortId,								TObjectId applicationNameId);A task calls the ResourceClaim method to make a passive claim on a resource that has previously been registered with the name server. The system software responds to this call by calling the ResArbRelease method of the task that currently owns the resource. If that method returns noErr, the system software will subsequently call the ResArbClaimNotification of the task that called this method.Note that only one task can passively claim a resource. If the requested resource has already been claimed passively, this method returns an error.NOTEAny task can use the resource arbitration facilities built into the Name Server; however, resource arbitration is currently used only by communications tools. You can read about resource arbitration in Newton Communications Tools.uThe name and type of the resource must match the name and type of a resource object already registered with the Name Server. Otherwise, this method fails and returns the kError_Not_Registered error.NOTEA successful call to the ResourceClaim method does not mean that your task has become the owner of the resource. You must wait for your ResArbClaimNotification method to be called before using the resource.uParameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.ownerPortId	The object ID of the port for the communications tool.applicationNameId	The shared memory ID of the resource owner.ResourcePassiveUnclaimNewtonErr ResourcePassiveUnclaim(											char* name, 											char* type);Releases a passive claim on a resource. This makes it possible for another task to become the passive owner of the resource. Only one task can passively claim a resource at any time.NOTEAny task can use the resource arbitration facilities built into the Name Server; however, resource arbitration is currently used only by communications tools. You can read about resource arbitration in Newton Communications Tools.uThe name and type of the resource must match the name and type of a resource object already registered with the Name Server. Otherwise, this method fails and returns the kError_Not_Registered error.Parameters:name	A string that is unique in the system-wide registry.type	A string that is unique in the system-wide registry.P-Class ReferenceThis chapter describesn	why DDKs use p-classes instead of C++ classes, and why you might want to use them for your coden	the full syntax for a p-class implementation definitionn	TClassInfo, the meta data class for p-classes. Meta Data is data about a class rather than about the information contained in an instance of a class.n	TProtocol, the parent class for p-class interfacesn	miscellaneous run-time routinesWhy P-Classes Instead of C++ Classes?When you use C++ classes in ROM, you cannot change your classes without having your users recompile. That may make it difficult to fix bugs.For example, suppose you were working without p-classes, and imagine you have defined a class hierarchy like this in version 1.0 of your interface:class X {public:	virtual void f();	virtual void g();};class Y : public X {public:	virtual void h();}The C++ compiler creates a dispatch table like this:Class	Method	Offset	X	f	0	X	g	4	Y	h	8	This is not how dispatch tables really appear; this table is just for purposes of illustration.Suppose that for version 2.0, you need to add a new virtual method for class X, so the class declarations become are like this:class X {public:	virtual void f();	virtual void g();	virtual void g2(); // This is the new method};class Y : public X {public:	virtual void h();}This would result in a dispatch table for release 2.0 like this:Class	Method	Offset	X	f	0	X	g	4	X	g2	8	Y	h	12	Notice that where offset 8 in release 1.0 addressed Y::h, it now addresses X::g2. That means that users would have to recompile their code to use 2.0. Your users would have to recompile because C++ does a lot of static binding of items such as vtable offsets. In addition, with C++ classes you have a fixed inheritance hierarchy and fixed object sizes. Therefore, you must freeze the classes involved when you ship your first version if:n	You ship a class interface with virtual functionsn	You expose data membersn	You expose the size of objects by allowing users to derive from your classes or to declare stack-based instancesIf you made a mistake and need to add a virtual function, data member, or extra base class, your users would have to recompile.P-classes get around this problem by restricting what can be seen of a class definition. By doing this, p-classes guarantee several things.n	Clients never see the size of an object, so that implementors are free to add or remove data members.n	Clients never directly see vtable indices, so that implementors can add methods, as long as they keep the old methods intact. “Intact” means:n	The names must not changen	The order of the methods in the interface must not changen	If there are any data members in the interface, they must not changen	You can add methods to the end of the “1.0” method list.In addition, p-classes have meta data, which has these advantages:n	It solves the problem of old code calling a new classn	It allows detection of new code calling old classesn	It allows the object system to create a new instance of a p-class given only the p-class’s namen	Clients or the Newton OS can create new instances by capabilities of implementations so that the system can, for example, handle a request for “an instance of TFaxModem, any brand, that can go 19,200.” P-class meta data is implemented in class TClassInfo; see “Class TClassInfo” on page 8-5 for information.P-Class Implementation DefinitionA p-class implementation is simply a subclass of a p-class interface. An implementation takes the form:#include "ProtoInterface.h"PROTOCOL implName: public ProtoInterface	[ PROTOCOLVERSION ( number [ . number ] ) ]{public:	PROTOCOL_IMPL_HEADER_MACRO ( implName );		[ static void * OperatorNew ( [ void ] ); ]	[ static void OperatorDelete ( void * ); ]	[ CAPABILITIES ( capability-list ... )  ... ]	<<<redeclared New(), if any>>>	<<<redeclared methods>>>	<<<additional data members and methods, as needed>>>};The statement PROTOCOL_IMPL_HEADER_MACRO, with the implementation name as its only argument, should appear first; it declares some methods that assist the implementation glue. If you used ProtocolGen to generate the source code skeleton, this statement is added for you.The methods OperatorNew and OperatorDelete are similar to the C++ new and delete operators. If you need to allocate instances of your implementation in a particular heap or need to perform special initialization, simply declare these methods and write the code. The methods must be static.Any methods of the form New(char*, ...) are redeclared in the implementation with the char* argument removed. When the method receives control, the object has been allocated but not initialized. You should use New to set up a null object state, and Delete should be prepared to deal with an object where initialization has failed.CapabilitiesThe CAPABILITIES statement in a p-class implementation declaration adds valued attributes to the implementation’s class information. The keyword is followed by a capability list enclosed in parentheses; no semicolon should follow the closing parenthesis.CAPABILITIES provide extra information about the implementation. This makes it easy to search the Protocol Registry and instantiate an instance of a p-class by what the p-class can do, rather than by what the p-class is named.The CAPABILITIES list is a set of <key, value> pairs, where the value part is optional. Each pair is enclosed in parentheses; if the value is missing, the parentheses are optional. The following are examples of valid capability entries:("modem", "9600")		// key = "modem", value = "9600"("flsh")			// key = "flsh", no value"sram"			// key = "sram", no valueA p-class can have any number of capability declarations:CAPABILITIES( ("modem", "9600") "flsh" )CAPABILITIES( "sram" )CAPABILITIES( ("copyright" "apple") ("version" "1.01") "public" )Version NumbersThe PROTOCOLVERSION statement can be used to specify a version number for the implementation. It appears before the open curly brace of the implementation's body. The arguments to the keyword are a single number or two numbers separated by a dot. For example:PROTOCOL TIntelModem : public TModem	PROTOCOLVERSION(2.1){	body of the implementation…}Version numbers, as returned by TClasssInfo::Version, are a long word of the form:The high and low bytes of the long word are reserved for future use and are currently zero.Class TClassInfoThe TClassInfo class provides meta data for an implementation of a p-class. Note that all methods of TClassInfo are const because TClassInfo objects are designed to reside in ROM.Here is the definition of the class:class TClassInfo{public:	const char * ImplementationName() const;	const char * InterfaceName()  const;	const char * Signature() const;	size_t Size() const; 	void MakeAt(void *) const;	unsigned long Version() const;	long Register() const;	long DeRegister() const;	TProtocol * New()  const;	void Destroy(TProtocol *) const;	const char * GetCapability(const char *) const;	const char * GetCapability(long) const;};ImplementationName and InterfaceNameconst char * TClassInfo :: ImplementationName() const;const char * TClassInfo :: InterfaceName() const;Returns the interface or implementation name of the p-class implementation.Versionunsigned long TClassInfo :: Version() const;Returns the implementation’ s version number. This number is a long word of the form:A version is specified for a p-class implementation with the PROTOCOLVERSION keyword. See “Version Numbers” on page 8-5 for details.Signatureconst char * TClassInfo :: Signature() const;Returns a signature describing the implementation. Currently this is the same as the interface name.Sizesize_t TClassInfo :: Size() const;Returns the size of an instance of the implementation. This can be used to allocate space for an instance before calling MakeAt.MakeAtvoid TClassInfo :: MakeAt(void *) const;Makes an instance of the p-class at the specified address.Registerlong TClassInfo :: Register() const;Registers the p-class in the system-wide database of available p-class (the Protocol Registry). This allows other parts of the system, such as other tasks, to make instances by name.DeRegisterlong TClassInfo :: DeRegister() const;Removes the p-class from the Protocol Registry. Existing instances of the class are not destroyed or otherwise tracked.NewTProtocol * TClassInfo :: New() const;Makes a new instance of the p-class implementation. The current task heap (that is, the heap used by malloc) is used to do the allocation unless the p-class has implemented OperatorNew.Destroyvoid TClassInfo :: Destroy(TProtocol *) const;Destroys an instance. The free function is used to do the deallocation unless the p-class has implemented OperatorDelete.GetCapabiltityconst char * TClassInfo :: GetCapabiltity(const char * cap) const;Parameter:cap	A capability.Returns information about a p-class’s capabilities.If the class information has the specified capability, this method returns a pointer to the capability’s value. If the capability does not have a value, a non-NIL pointer to an empty string is returned.If the class information does not have the capability, this method returns NIL.const char * TClassInfo :: GetCapabiltity(long cap) const;Parameter:cap	A capability, expressed as a four-character constant.This returns a pointer to the capability. The capability lookup is performed as if cap were a four character string. In general, this means that cap must consist of exactly four printing characters (such as fish), since three-byte values and less will have a leading null, which won’t match anything.If the class information has the specified capability, a pointer to the capability's value is returned. If the capability does not have a value, a non-NIL pointer to an empty string is returned. If the class information does not have the capability, this method returns NIL.Class TProtocolThe class TProtocol is the base class for all p-classes. It provides a method for obtaining the p-class’s class information.class TProtocol{public:	TClassInfo * ClassInfo();};ClassInfoTClassInfo * TProtocol :: ClassInfo();Returns the class information for the p-class (see “Class TClassInfo” on page 8-5).MiscellaneousThe following functions are declared in the file Protocols.h.NewByNameTProtocol * NewByName(								const char * interface, 								const char * implementation);Parameters:interface	A string naming a p-class interface.implementation	A string naming a p-class implementation.Attempts to find the p-class implementation with the interface and implementation named in the strings. The value NIL is a wild card. (Passing two NILs has unpredictable results). An instance of the implementation with the highest version number is returned. If there is no matching implementation, NIL is returned.The instance’s New(void) method is called before the instance is returned.TProtocol * NewByName(								const char * interface,								const char * implementation,								ULong version	 	);This method is the same as the above NewByName, except that version specifies an exact p-class version to instantiate.TProtocol * NewByName(								const char * interface,								const char * implementation,								const char * capability		);This method is similar to the first NewByName, except that the p-class must have the specified capability. The capability’s value doesn’t matter. The instance created is that of the implementation with the specified capability with the highest version number.ClassInfoByNameTClassInfo * ClassInfoByName(										const char * interface, 										const char * implementation, 										ULong version = 0			);Returns the class information for an implementation (or NIL, if no match is found). If version is nonzero, only the implementation with that exact version number is returned. If version is zero, the implementation with the highest version number is returned.AllocInstanceByNameTProtocol * AllocInstanceByName		(									const char * interface, 											const char * implementation	);This is similar to the first NewByName method, except that the instance’s New(void) method is not called.FreeInstancevoid FreeInstance(TProtocol*);Frees an instance of a p-class. The instance’s Delete(void) method is not called. This is a fairly low-level operation. You shouldn’t have to use this method. Use Delete methods instead.Debug MacrosThe file DebugMacrosExternal.h, which you can find in the  DDK_Products:IncludesForDDKs:UtilityClasses folder, contains some macros you can use in debugging your code and in handling errors.The file is divided into two parts.  The parts define the same macros; you use the forDebug pre-processor switch to determine which macros are used in your program.n	Normal Debugging Gear.  These macros are for when you are debugging your code.n	No Debugging Gear.  These macros are for when you are finished debugging your code.  In general, these macros do nothing.  Thus, you do not have to actually remove your debugging macros.When the forDebug pre-processor switch is present, the pre-processor uses the Normal Debugging Gear definitions.Macros for Throwing ExceptionsThere are two macros that  are not controlled by the forDebug switch and can be used by your code to throw exceptions conditionally.THROWIFTHROWIF(result, exception)If the value of result is not 0, this macro calls the Throw function.   Thus, you can use it to test whether an error code was returned by some other function.Listing 9-1	The THROWIF  Macro#define THROWIF(result, exception)	do 	{ if ((result) != 0) 		Throw((exception), (void*) (result)); } 	while (0)THROWNILTHROWNIL(expr, exception, result) If expr is equal to 0,  This macro  this macro calls the Throw function, passing it exception and result.  Listing 9-2	The THROWIF  macro#define THROWNIL(expr, exception, result) \	do \	 { if ((expr) == 0) \		Throw((exception), (void*) (result)); } \	while (0)Macros for BranchingThese macros test a value.  If the value meets a condition, the macros cause a branch, possibly taking some other action in addition.  When you use the “Normal Debugging Gear” macros, these also invoke the debugger and print a message.XREQUIREXREQUIRE(expr, label) The XREQUIRE macro examines the value of its first argument, expr.  If that value is equal to 0, XREQUIRE n	halts the programn	prints a message to standard errorn	branches to the label supplied as its second argument. Even if you are using the “No Debugging Gear” macros, this macro branches, though it does not halt the program and print a message.For example	fVars = new TToolMembers;	XREQUIRE(fVars, Fail_NewTToolMembers);	fVars->fExampleToolState = 0;	...	Fail_NewTToolMembers:	...In this example, the XREQUIRE macro examines the value of the fVars variable. If fVars is 0 (which means that allocation of the object referenced by fVars failed), control branches to the label Fail_NewTToolMembers. If fVars is any value other than 0, control passes onto the  next statement, which initializes the fExampleToolState field of the object.Listing 9-3	The XREQUIRE Macro#define XREQUIRE(expr, label) \		do { \			if (!(expr)) { \				DebugStr("XREQUIRE(" #expr ", " #label ") failed"); \								goto label; \			} \		} while (0)XREQUIRENOTXREQUIRENOT(expr, label) The XREQUIRENOT macro examines the value of its first argument. If that value is not equal to 0, XREQUIRENOT n	halts the programn	prints a message to standard errorn	branches to the label supplied as its second argument. Even if you are using the “No Debugging Gear” macros, this macro branches, though it does not halt the program and print a message.The XREQUIRENOT macro is similar to XREQUIRE: the difference is that XREQUIRE branches when its argument is 0 and XREQUIRENOT branches when its argument is not 0. For example	XREQUIRENOT(result, Fail_StartCommToolProtocol);	...	Fail_StartCommToolProtocol:	...This use of the XREQUIRENOT macro examines the value of the result variable. If result is not 0 (which means that an error occurred in the previous operation), control branches to the label Fail_StartCommToolProtocol. If the value of result is anything 0, control passes onto the next statement. Listing 9-4 shows the definition of the XREQUIRENOT macro.Listing 9-4	The XREQUIRENOT Macro#define XREQUIRENOT(expr, label) \		do { \		 if (expr) { \			DebugStr("XREQUIRENOT(" #expr ", " #label ") failed"); \							goto label; \			} \		} while (0)XREQUIRE_ACTIONXREQUIRE_ACTION(expr, label, action)This macro tests if its first argument, expr, is equal to 0.  If it is, it:n	halts execution n	prints a message to standard errorn	invokes the action specifiedn	jumps to the label specifiedEven if you are using the “No Debugging Gear” macros, this macro invokes the action and branches, though it does not halt the program and print a message.Listing 9-5	The XREQUIRE_ACTION Macro#define XREQUIRE_ACTION(expr, label, action) \    do { \    		if (!(expr)) { \     			DebugStr("XREQUIRE_ACTION(" #expr ", " #label ", "\ 						#action ") failed"); \      			{ action } \      			goto label; \     } \    } while (0)XREQUIRENOT_ACTIONXREQUIRENOT_ACTION(expr, label, action)This macro tests if its first argument, expr, is not equal to 0.  If it is not 0, it:n	halts execution n	prints a message to standard errorn	invokes the action specifiedn	jumps to the label specifiedEven if you are using the “No Debugging Gear” macros, this macro invokes the action and branches, though it does not halt the program and print a message.Listing 9-6	The XREQUIR_EACTION Macro#define XREQUIRENOT_ACTION(expr, label, action)  do { \	if (expr) { \      DebugStr("XREQUIRENOT_ACTION(" #expr ", " #label ", " \					#action ") failed"); \		{ action } \		goto label; \	} \    } while (0)Other MacrosThese macros take no action when you use the “No Debugging Gear” versions.  When you use the “Normal Debugging Gear” macros, they halt the program, invoke the debugger, and print messages.XASSERTXASSERT(expr)This macro invokes the debugger and prints a message to standard error if expr is 0.  The message is:XASSERT expr failedListing 9-7	The XASSERT  Macro#define XASSERT(expr) \	do { if (!(expr)) \			DebugStr("XASSERT(" #expr ") failed"); } \	while (0)XASSERTNOTXASSERTNOT(expr)  This macro prints a message to standard error if expr is not equal to 0.  The message is:XASSERTNOT expr failedListing 9-8	The XASSERTNOT  Macro#define XASSERTNOT(expr)  \	do { if (expr) \			DebugStr("XASSERTNOT(" #expr ") failed"); } \	while (0)XDEBUGGERXDEBUGGER(mesg)This macro invokes the debugger and prints a message to standard error.Listing 9-9	The XDEBUGGER  Macro#define XDEBUGGER(mesg) DebugStr(mesg)XPRINTXPRINT(args)This macro prints args to standard out.The definition shown in Listing 9-10 uses XBLOCKPRINT, which is an internal macro.  The definition of XBLOCKPRINT is shown in Listing 9-11.Listing 9-10	The XPRINT  Macro#define XPRINT(args)    do XBLOCKPRINT(args) while (0)Listing 9-11	The XBLOCKPRINT  Macro#define XBLOCKPRINT(args) { printf args; }XSETPTRNAMEXSETPTRNAME(p,n)This macro sets the tag of pointer p to the long value n.  You can use this for tracking down memory leaks.  You can see these tags only through the Hammer debugger’s Heaps command.  Listing 9-12	The XSETPTRNAME  Macro#define XSETPTRNAME(p,n)   SetPtrName((Ptr) (p), (ULong) (n))XSETHANDLENAMEXSETHANDLENAME(h,n)This macro sets the tag of handle h to the long value n.  You can use this for tracking down memory leaks.  You can see these tags only through the Hammer debugger’s Heaps command.  Listing 9-13	The XSETHANDLENAME Macro#define XSETHANDLENAME(h,n)   SetHandleName((Handle) (h), (ULong) (n))GlossaryArmistice card	A card that fits in the Macintosh and emulates a Newton. The Armistice card does not have a Newton ROM; instead, it has RAM that is loaded with a ROM image. You can use an Armistice card only for software intended for Newtons version 1.3 and earlier, because Amistice cards contain only four megabytes of RAM. See also ROM emulator .Big-endian	See Endian.Endian	A computer can be described as being either big-endian or little-endian depending on how it arranges bytes within a word. In a big-endian system, byte 0 is always the most significant (leftmost) byte. In a little-endian system, byte 0 is always the least significant (rightmost) byte. A Macintosh is a big-endian system, an Intel x86 machine is a little-endian system. The ARM processor used in Newton can operate in either mode: Newton uses it in big-endian mode.Glue	Assembly-language code that is linked to other code to make it possible for that code to be used. Hammer	The low-level Macintosh debugger for the Newton.Heap	Dynamically allocated memory that is used for referenced objects, such as those created with the C++ new operator.  (The new  operator is  used in C++ in place of the malloc function used in C.)Little-endian	See Endian.Makefile	An MPW file containing command lines for building a program.Meta-data 	Data about a class rather than about the information contained in an instance of a class.Name Server	A system-wide name registry that you can use to register names for use by other programs. P-Class	See Protocol Class.P-Class ImplementationA subclass of a p-class interface. A p-class implementation implements the methods declared in the p-class interface.P-Class Interface	An abstract base class that defines methods that must be implemented in a p-class implementation. Package	The basic unit of software used on the Newton. A package consists of various parts, including protocols, frames, and data.Package Manager	The part of the Newton OS that loads and unloads packages.Packer	The Macintosh Programmer’s Workshop (MPW) program that creates packages.Protocol Class	Generally abbreviated to p-class. Similar to a C++ class, a p-class has restrictions to allow more freedom to modify code after initial release. See P-class Implementation and P-class Interface.Protocol Registry	The part of the Newton OS that lists registered p-classes. Not all p-classes are registered; when the Package Manager loads packages, it registers protocol parts that were prepared using the -autoload switch to Packer.ProtocolGen	The MPW program that performs several distinct services for protocol writers, including generating glue and generating blank source files.ROM Emulator	A device that emulates a Newton by using RAM loaded with a ROM image.  The Armistice card is an example of a ROM emulator.Tuple	A set of elements. In PCMCIA terminology, a tuple refers to a defined set of data items that characterize some facet of a PC card.  4    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino        .     +Ã0 ° d ONLN dˇˇ         (ä Ã       3  Ã ° d ONLN d   í Ã ´ÿ ( § ÃNewton Driver   ° d ONLN d  ¨ Ã ≈ˇ *Development Kits  
 Z*2 
         4 Z*2 p  Z( Z(  
ˇ·ˇ‚7Ç   ˇˇ≥> ˇ◊ ° d ONLN d  ' ZH π (@ ZAn Intr ]“ ° d ONLN d '' πHˆ )_oduction to the Newton   ° d ONLN d >G Zh © (` ZDDKs  4í ÃÍ(    
         ° d ONLN dˇˇ         (ô ÃPreliminary Draft 0.81      	 ° d ONLN dˇˇ         *Mar  Ë0 ° d ONLN dˇˇ         )ch 14, 1995  „– ° d ONLN dˇˇ         )4Jonathan Simonof „‡ ° d ONLN dˇˇ         )Gf  ° d ONLN dˇˇ         (∑ Ã©   $P ° d ONLN dˇˇ         )	Apple Computer Z† ° d ONLN dˇˇ         )C, Inc.   ûÄ ° d ONLN dˇˇ         )1995 ˇ,     d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4í ≤≤
 ,  Palatino     
 .     ° d ONLN d   ¢ p Æ w +p´   ° d ONLN d  § | ≠ ∏ )Apple Computer >Ä ° d ONLN d  § ∏ ≠ » )<, Inc. ° d ONLN d  Ø p ∏ ã ( ∂ p© 1994,   .Ä ° d ONLN d  Ø å ∏ » )Apple Computer Ì  ° d ONLN d - Ø « ∏ ◊ );, Inc. ° d ONLN d 4 ∏ p ¡ ñ ( ø pAll rights r  ˝Ä ° d ONLN d @ ∏ ñ ¡ µ )&	eserved.   ° d ONLN d J √ p Ã Ê (   p#No part of this publication or the  ° d ONLN d m Ã p ’ ä *	softwar  8Ä ° d ONLN d t Ã ã ’ ‡ )e described in it may be   ° d ONLN d ç ’ p ﬁ s ( ‹ pr ÑÄ ° d ONLN d é ’ s ﬁ ~ )epr  -  ° d ONLN d ë ’  ﬁ ™ )oduced, stor ËÄ ° d ONLN d ù ’ ™ ﬁ ∆ )+	ed in a r  °  ° d ONLN d ¶ ’ « ﬁ „ )	etrieval   ° d ONLN d Ø ﬁ p Á Ó ( Â p$system, or transmitted, in any form   ° d ONLN d ” Á p  ⁄ *	or by any means, mechanical,   ° d ONLN d   p ˘ É *	electr ´Ä ° d ONLN d ˆ  É ˘ À )onic, photocopying,  ° d ONLN d
 ˘ p s (  pr ÑÄ ° d ONLN d ˘ s Å )ecor I  ° d ONLN d ˘ Ç ‰ )ding, or otherwise, without  ° d ONLN d+ p “ (	 pprior written permission of   @Ä ° d ONLN dG “ Í )bApple  ˇˇ}@ ° d ONLN dM p î ( pComputer  >Ä ° d ONLN dU î  )$, Inc., except in the normal        ° d ONLN dr p Ø ( puse of the softwar  eÄ ° d ONLN dÑ Ø ‚ )?e or to make a   ° d ONLN dì p& – ($ pbackup copy of the softwar  ïÄ ° d ONLN d≠ –& Á )`e. The   ° d ONLN d¥& p/ å (- psame pr úÄ ° d ONLN dª& å/ ‚ )oprietary and copyright  ° d ONLN d”/ p8 Ø (6 pnotices must be af  ÊÄ ° d ONLN dÂ/ Ø8 ≥ )?ﬁ  ΩÄ ° d ONLN dÁ/ ¥8 ⁄ )xed to any   ° d ONLN dÚ8 pA ƒ (? ppermitted copies as wer —Ä ° d ONLN d	8 ƒA – )Te af ,  ° d ONLN d8 —A ’ )ﬁ    ° d ONLN d8 ÷A Ì )xed to   ˇˇ°Ä ° d ONLN dA pJ  (H p&the original. This exception does not        ° d ONLN d<J pS Ì *	$allow copies to be made for others,  ° d ONLN d`S p\ Ë *	$whether or not sold, but all of the  ° d ONLN dÑ\ pe ú *	material pur xÄ ° d ONLN dê\ úe ’ ),chased (with all   ° d ONLN d°e pn Ì (l p#backup copies) may be sold, given,  ° d ONLN dƒn pw Ó *	#or loaned to another person. Under   ° d ONLN dÁw pÄ ä *	the law  ›  ° d ONLN dÓw âÄ À ), copying includes   ˇˇ≥f ° d ONLN dÄ pâ Ô (á p%translating into another language or  ˇˇw  ° d ONLN d&â pí ã *	format.  ØÄ ° d ONLN d.â ãí ê )Y  IÄ ° d ONLN d/â êí ‡ )ou may use the softwar ∑  ° d ONLN dEâ ‡í Ô )Pe on        ° d ONLN dJí põ Ë (ô pany computer owned by you, but  ˇˇŸ$ ° d ONLN diõ p§ Ô *	%extra copies cannot be made for this        ° d ONLN dé§ p≠ ë *		purpose.   ° d ONLN dòØ p∏ ‹ * Printed in the United States of  ° d ONLN d∏∏ p¡ ê *	America. ° d ONLN d¡√ pÃ  *The  òÄ ° d ONLN d≈√ Ã π )Apple logo is a r  ÿ  ° d ONLN d÷√ πÃ – ):egister  MÄ ° d ONLN d›√ —Ã € )ed   ° d ONLN d‡Ã p’ † (” ptrademark of  eÄ ° d ONLN dÌÃ †’ ‹ )0Apple Computer $  ° d ONLN d˚Ã ‹’ Ó )<, Inc.   ° d ONLN d’ pﬁ ∂ (‹ pUse of the “keyboar ùÄ ° d ONLN d’ ∂ﬁ ¿ )Fd”   5  ° d ONLN d’ ¡ﬁ Í )Apple logo   ° d ONLN d$ﬁ pÁ ’ (Â p(Option-Shift-K) for commer êÄ ° d ONLN d?ﬁ ’Á „ )ecial   ° d ONLN dDÁ p Ì (Ó p#purposes without the prior written  ° d ONLN dg p˘ ñ *	consent of   LÄ ° d ONLN dr ñ˘ ‰ )&Apple may constitute   ° d ONLN dá˘ p Ó (  p"trademark infringement and unfair   ° d ONLN d© p Í *	$competition in violation of federal  ° d ONLN dÕ p § *	and state laws.  ° d ONLN d› p ¨ *No licenses, expr  úÄ ° d ONLN dÓ ¨ Ë )<ess or implied, ar X  ° d ONLN d  È Ó )=e  ° d ONLN d p( £ (& pgranted with r  `Ä ° d ONLN d £( È )3espect to any of the   ° d ONLN d%( p1 Î (/ p#technology described in this book.  ° d ONLN dH1 p: ã *	Apple r  ÑÄ ° d ONLN dO1 ã: ’ )etains all intellectual  ° d ONLN dg: pC w (A ppr  SÄ ° d ONLN di: xC Ì )"operty rights associated with the  ° d ONLN dãC pL Î (J p#technology described in this book.  ° d ONLN dÆL pU ‹ *	 This book is intended to assist  ° d ONLN dŒU p^ Í *	"application developers to develop  ° d ONLN d^ pg Ÿ *	applications only for licensed   ° d ONLN dg pp ≥ *	Newton platforms.  ° d ONLN d! § ¸ ≠8 ( ´ ¸Apple Computer  >Ä ° d ONLN d/ §8 ≠H )<, Inc. ° d ONLN d6 ≠ ¸ ∂0 ( ¥ ¸20525 Mariani   >Ä ° d ONLN dD ≠0 ∂6 )4A  ªÄ ° d ONLN dE ≠5 ∂J )venue  ° d ONLN dK ∂ ¸ ø0 ( Ω ¸Cupertino, CA 6Ä ° d ONLN dX ∂0 øF )4 95014 ° d ONLN d_ ø ¸ ») ( ∆ ¸408-996-1010  ° d ONLN dl Ã ¸ ’# *Apple, the   MÄ ° d ONLN dw Ã# ’N )'Apple logo,  Ö  ° d ONLN dÉ ÃN ’i )+APDA,  ° d ONLN dâ ’ ¸ ﬁA ( ‹ ¸AppleLink, LaserW Ä ° d ONLN dö ’A ﬁP )Eriter  ˇ  ° d ONLN dü ’O ﬁS ),  ° d ONLN d° ﬁ ¸ Á9 ( Â ¸Macintosh, MPW  J  ° d ONLN dØ ﬁ9 Ár )=, and Newton ar  ¢Ä ° d ONLN dæ ﬁr Áw )9e  ° d ONLN d¿ Á ¸ / ( Ó ¸trademarks of   …Ä ° d ONLN dŒ Á/ k )3Apple Computer à  ° d ONLN d‹ Ák o )<,  ° d ONLN dﬁ  ¸ ˘ ( ˜ ¸Inc., r kÄ ° d ONLN dÂ  ˘' )egister  ·  ° d ONLN dÏ ' ˘x )ed in the United States  ° d ONLN d ˘ ¸B (  ¸and other countries.  ° d ONLN d ¸s *!The light bulb logo, MessagePad,   ° d ONLN d: ¸d *	NewtonScript, and Newton T p  ° d ONLN dTdz )hoolkit   ° d ONLN d[ ¸ ( ¸ar  ÑÄ ° d ONLN d]< )e trademarks of  £  ° d ONLN dm<x )9Apple Computer aÄ ° d ONLN d{x| )<,  ° d ONLN d} ¸( (& ¸Inc.  ° d ONLN dÇ* ¸3< *FrameMaker is a r  øÄ ° d ONLN dì*<3S )@egister  5  ° d ONLN dö*T3^ )ed   ° d ONLN dù3 ¸<I (: ¸trademark of Frame T  ]  ° d ONLN d±3I<o )M
echnology  ° d ONLN dª< ¸E) (C ¸Corporation.  ° d ONLN d»G ¸PO *ARM is a trademark of  ?Ä ° d ONLN dﬁGOPu )S	Advanced   ° d ONLN dÁP ¸YB (W ¸RISC Machines Ltd.  ° d ONLN d˙[ ¸dU *Helvetica and Palatino ar  ÷Ä ° d ONLN d[UdZ )Ye  ° d ONLN dd ¸m ˇ (k ¸r ÑÄ ° d ONLN dd ˇm )egister  ˙  ° d ONLN ddmv )ed trademarks of Linotype  ° d ONLN d7m ¸v (t ¸Company °  ° d ONLN d>mv  )".  ° d ONLN d@x ¸ÅQ ( ¸ITC Zapf Dingbats is a r  ]Ä ° d ONLN dXxQÅh )Uegister  ”  ° d ONLN d_xhÅr )ed   ° d ONLN dbÅ ¸ä\ (à ¸trademark of International  ° d ONLN d}ä ¸ì  *	T  Ø  ° d ONLN d~ä ìJ )ypeface Corporation. ° d ONLN dìó ¸†p (û ¸ Simultaneously published in the   ° d ONLN d≥† ¸©Y *	United States and Canada.      ° d ONLN dÕÏ ¸Ù$ *K	LIMITED W    ° d ONLN d÷Ï$Ùp )(ARRANTY ON MEDIA öp ° d ONLN dÊÏpÙq )L   ° d ONLN dÁı ¸˝E (˚ ¸AND REPLACEMENT ° d ONLN d˜ ¸
v *(If you discover physical defects in the  ° d ONLN d	 ¸l *	"manual or in the media on which a  ° d ONLN d	A ¸w *	%software product is distributed, APDA  œ– ° d ONLN d	fwx ){   ° d ONLN d	g ¸%x (# ¸'will replace the media or manual at no  ° d ONLN d	é& ¸.v *	&charge to you provided you return the  ° d ONLN d	¥/ ¸7f *	"item to be replaced with proof of  ° d ONLN d	÷8 ¸@9 *	purchase to APDA.  ° d ONLN d	Ë •à ≠ï ( ´àALL _0 ° d ONLN d	Î •ñ ≠ø )
 IMPLIED W Yê ° d ONLN d	ı •ø ≠¯ ))ARRANTIES ON   ° d ONLN d
 Æà ∂Ì ( ¥àTHIS MANUAL, INCLUDING  ° d ONLN d
 ∑à øØ *		IMPLIED W  ∫` ° d ONLN d
" ∑Ø øÁ )'ARRANTIES OF   ° d ONLN d
/ ¿à »≥ ( ∆àMERCHANT    ° d ONLN d
7 ¿≥ » )+ABILITY AND FITNESS  ° d ONLN d
K …à —ù ( œàFOR A Yp ° d ONLN d
P …û —§ ) P €Ä ° d ONLN d
R …£ —≠ )AR ˘ ° d ONLN d
T …≠ — )
TICULAR PURPOSE, ARE   ° d ONLN d
i “à ⁄… ( ÿàLIMITED IN DURA 0@ ° d ONLN d
x “… ⁄ )ATION TO NINETY   ° d ONLN d
á €à „† ( ·à(90) DA iÄ ° d ONLN d
é €† „ﬁ )YS FROM THE DA À† ° d ONLN d
ú €› „ )=
TE OF THE  ° d ONLN d
¶ ‰à Ï≠ ( ÍàORIGINAL  ∞ ° d ONLN d
Æ ‰Æ ÏΩ )& RET 30 ° d ONLN d
≤ ‰Ω Ï… )AIL  Ö  ° d ONLN d
µ ‰… Ïˇ ) PURCHASE OF   ° d ONLN d
¬ Ìà ıø ( ÛàTHIS PRODUCT  E  ° d ONLN d
Œ Ìø ı¿ )7.  ° d ONLN d
– ˙à ( à$Even though Apple has reviewed this   ° d ONLN d
ÙàÂ *	manual, APPLE MAKES NO   ° d ONLN dàè *	W  ﬂ  ° d ONLN déÍ )ARRANTY OR REPRESENT ∆  ° d ONLN d ÍÔ )\A  ì` ° d ONLN d!Ô )TION,  ° d ONLN d'àÙ (àEITHER EXPRESS OR IMPLIED,  ° d ONLN dBà& *	WITH RESPECT TO THIS MANUAL,   ° d ONLN d_'à/∂ *	ITS QUALITY  u∞ ° d ONLN dj'∂/‚ ).
, ACCURACY ™Ä ° d ONLN dt'‚/Â ),,  ° d ONLN dv0à8≥ (6àMERCHANT    ° d ONLN d~0≥8– )+ABILITY  ≠p ° d ONLN dÖ0œ8˛ ), OR FITNESS   ° d ONLN dí9àAù (?àFOR A Yp ° d ONLN dó9ûA§ ) P €Ä ° d ONLN dô9£A≠ )AR ˘ ° d ONLN dõ9≠A )
TICULAR PURPOSE. AS A    ° d ONLN d∞9A )Y   ° d ONLN d±BàJü (HàRESUL OP ° d ONLN d∂BüJ£ )T  V ° d ONLN d∑B£J€ ), THIS MANUAL  g  ° d ONLN dƒB€J˚ )8	 IS SOLD   ° d ONLN dÕKàS€ (Qà“AS IS,” AND YOU, THE   ° d ONLN d„Tà\ *	PURCHASER, ARE ASSUMING THE  ° d ONLN dˇ]àeˇ *	ENTIRE RISK AS TO ITS QUALITY  ° d ONLN dfànƒ *	AND ACCURACY 0 ° d ONLN d)fƒn≈ )<.  ° d ONLN d+sà{Ã (yàIN NO EVENT WILL  ùp ° d ONLN d;sÃ{ )D
 APPLE BE  ° d ONLN dE|àÑœ (ÇàLIABLE FOR DIRECT i† ° d ONLN dV|œÑˆ )G
, INDIRECT oÄ ° d ONLN d`|ˆÑ˘ )',  ° d ONLN dbÖàçŒ (ãàSPECIAL, INCIDENT †` ° d ONLN dsÖŒçÁ )FAL, OR   ° d ONLN dzéàñ« (îàCONSEQUENTIAL $ ° d ONLN dáé»ñÒ )@	 DAMAGES   ° d ONLN dêóàüü (ùàRESUL OP ° d ONLN dïóüü )TING FROM ANY DEFECT OR  ° d ONLN d≠†à®˛ (¶àINACCURACY IN THIS MANUAL,  ° d ONLN d»©à±˙ *	&even if advised of the possibility of  ° d ONLN dÓ≤à∫∂ *	such damages.  ° d ONLN d¸øà«ü *THE W  e† ° d ONLN døü«ˇ )ARRANTY AND REMEDIES   ° d ONLN d»à–• (ŒàSET FOR ›ê ° d ONLN d»•– )TH ABOVE ARE EXCLUSIVE   ° d ONLN d4—àŸ— (◊àAND IN LIEU OF ALL  zê ° d ONLN dF——ŸÙ )I	 OTHERS,   ° d ONLN dO⁄à‚ú (‡àORAL  ˚p ° d ONLN dS⁄ú‚˝ ) OR WRITTEN, EXPRESS OR  ° d ONLN dk„àÎﬂ (ÈàIMPLIED. No Apple dealer  ö ° d ONLN dÉ„ﬂÎˇ )W, agent, or  ° d ONLN dèÏàÙ˝ (Úà#employee is authorized to make any  ° d ONLN d≤ıà˝ù *	modiﬁ  ° d ONLN d∏ıù˝ )"cation, extension, or addition to  ° d ONLN d⁄˛à≤ (àthis warranty nÄ ° d ONLN dÁ˛≤≥ )*.  ° d ONLN dÈà (à'Some states do not allow the exclusion  ° d ONLN dà *	'or limitation of implied warranties or   ° d ONLN d7à% *	*liability for incidental or consequential  ° d ONLN da&à.˙ *	$damages, so the above limitation or  ° d ONLN dÖ/à7ˇ *	%exclusion may not apply to you. This   ° d ONLN d™8à@€ *	warranty gives you speciﬁ  ÈÄ ° d ONLN dƒ8€@ )Sc legal rights,  ° d ONLN d‘AàI˘ (Gà#and you may also have other rights  ° d ONLN d˜JàRÁ *	which vary from state to state.  ˇ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ Ã˙( ,  Palatino       
 .     ,  (‡%i ,  	Helvetica     (Ô ÃDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ´ Z¿(  
 ∏ Z ø( 4 π Z ø( p  ∫ Z ∫( ∫ Z ∫(  
ˇ·ˇ‚7Ç      ° d ONLN d 
 ¨ Z ∑ ä ( ¥ Z	Chapter 1   ° d ONLN d  © Ã ∏ )rIntroduction    
 ,  ° d ONLN d ! ´ ∑( ( ¥1-1 ° d ONLN d & ø Ã À! ( » ÃAdditional Softwar  ®† ° d ONLN d 8 ø! À% )Ue  ,  ° d ONLN d : ø À( )˙1-2  ° d ONLN d > Ã Ã ÿ ” ( ’ ÃA G@ ° d ONLN d ? Ã ‘ ÿ0 )dditional Equipment  ,  ° d ONLN d S Ã ÿ( ( ’1-2 ° d ONLN d W Ÿ Ã ÂC ( ‚ ÃAdditional Documentation  ,  ° d ONLN d p Ÿ Â( ( ‚1-3  
 Z( 4 Z( p  Z( Z(  
ˇ·ˇ‚7Ç     ° d ONLN d t	 Z ä ( Z	Chapter 2   ° d ONLN d ~ Ã ‘ )rT  @ ° d ONLN d  ’ )	he Parts of  `¿ ° d ONLN d ã% )GY  n@ ° d ONLN d å$h )
our Produc „† ° d ONLN d ñhk )Dt     
 ,  ° d ONLN d ò( )≥2-1  ° d ONLN d ù Ã( ı (% Ã	P-Classes ,  ° d ONLN d ß(( (%2-1 ° d ONLN d ´) ÷5 › (2 ÷G !  ° d ONLN d ¨) ﬁ5 Î )lue  ,  ° d ONLN d ∞)5( (22-2 ° d ONLN d ¥6 ÃB Ù (? ÃPackages  ,  ° d ONLN d Ω6B( (?2-2  
r Zy( 4s Zy( p t Zt(t Zt(  
ˇ·ˇ‚7Ç     ° d ONLN d ¡f Zq ä (n Z	Chapter 3   ° d ONLN d Àc Ãrb )rDeveloping Using DDKs     
 ,  ° d ONLN d ·eq( (n3-1 ° d ONLN d Êy ÃÖ “ (Ç ÃT †¿ ° d ONLN d Áy “Ö )he DDK Disks ,  ° d ONLN d ÙyÖ( (Ç3-1 ° d ONLN d ¯Ü Ãí ” (è ÃD =@ ° d ONLN d ˘Ü ‘í> )eveloping DDK Softwar  C¿ ° d ONLN dÜ>íB )je  ,  ° d ONLN dÜí( )›3-2  ° d ONLN dì ÷ü · (ú ÷Cr  \  ° d ONLN dì ·ü ˛ )eating   @ ° d ONLN dì ˇü )Y  √¿ ° d ONLN dìü )our  ≥  ° d ONLN d"ìü? )Header ﬁ 2¿ ° d ONLN d+ì@üv )*les and Sour ê@ ° d ONLN d7ìvüñ )6ce Files ,  ° d ONLN d@ìü( )•3-2  ° d ONLN dD† ‡¨ Î (© ‡Cr  \  ° d ONLN dF† Î¨8 )eating a Skeleton  † ° d ONLN dX†9¨_ )N	P-Class I  ∫  ° d ONLN da†_¨ÿ )&mplementation Header File  ,  ° d ONLN d{†¨( )º3-3  ° d ONLN d≠ ‡π Î (∂ ‡Cr  \  ° d ONLN dÅ≠ Îπ8 )eating a Skeleton  † ° d ONLN dì≠9π_ )N	P-Class I  ∫  ° d ONLN dú≠_ππ )&mplementation Sour fÄ ° d ONLN dÆ≠∫π’ )[ce File  ,  ° d ONLN d∂≠π( )a3-4  ° d ONLN d∫∫ ÷∆ Ÿ (√ ÷I ﬁÄ ° d ONLN dª∫ Ÿ∆ )mplementing a  `‡ ° d ONLN d…∫∆? )FP-Class  ,  ° d ONLN d—∫∆( )¸3-5  ° d ONLN d’« ‡”$ (– ‡Restrictions on   ∑¿ ° d ONLN dÂ«$”J )D	P-Class I  m  ° d ONLN dÓ«K”í )'mplementations ,  ° d ONLN d˝«”( )–3-5  ° d ONLN d‘ ‡‡ (› ‡Doing Special   È¿ ° d ONLN d‘‡ö )?Allocation and Deallocation  ,  ° d ONLN d+‘‡( )¸3-8  ° d ONLN d/· ‡Ì7 (Í ‡Making the System   ∏  ° d ONLN dA·7Ì> )WA  ¬  ° d ONLN dB·>ÌO )war  ﬁ  ° d ONLN dE·OÌa )e of   C` ° d ONLN dJ·bÌh )Y  ‡ ° d ONLN dK·hÌë )our Code ,  ° d ONLN dT·Ì( )≥3-8  ° d ONLN dXÓ ÷˙ › (˜ ÷C ó  ° d ONLN dYÓ ›˙ ‡ )r  \  ° d ONLN dZÓ ·˙" )eating a Frame ,  ° d ONLN diÓ˙( (˜3-9 ° d ONLN dm˚ ÷* ( ÷Building a Package  ,  ° d ONLN dÄ˚( (3-9 ° d ONLN dÑ ÷ ˝ ( ÷Loading   »@ ° d ONLN då ˝ )'Y  à¿ ° d ONLN dç9 )our Package  ,  ° d ONLN dô( (3-10  ° d ONLN dû ÷!Y ( ÷Using the Hammer Debugger ,  ° d ONLN d∏!( (3-10  ° d ONLN dΩ" ‡.` (+ ‡Physically Connecting to the  
‡ ° d ONLN d⁄"a.û )ÅArmistice Car  ~¿ ° d ONLN dÁ"û.§ )=d  ,  ° d ONLN dÈ".( )x3-10 ° d ONLN dÓ/ ‡;$ (8 ‡Using Hammer  ∏¿ ° d ONLN d˚/;# (83-1 ° d ONLN d˛/#;( )1  ° d ONLN d < ÃH “ (E ÃP â† ° d ONLN d< “H ’ )r  N† ° d ONLN d< ÷H ˙ )eparing  ®@ ° d ONLN d
< ˙H  )$Y  h¿ ° d ONLN d< Hc )our Code For Delivery  ,  ° d ONLN d!<H( (E3-15   
x Z( 4y Z( p z Zz(z Zz(  
ˇ·ˇ‚7Ç     ° d ONLN d&l Zw ä (t Z	Chapter 4   ° d ONLN d0i Ãx9 )rThe ProtocolGen  ÒÄ ° d ONLN d@i9xA )mT  ÒÄ ° d ONLN dAi@xR )ool     
 ,  ° d ONLN dEkw( )€4-1  ° d ONLN dJ Ãã Ú (à ÃUsing Pr  ¿ ° d ONLN dR Ûã  )'	otocolGen  ,  ° d ONLN d\ã( (à4-1 ° d ONLN d`å ÷ò › (ï ÷G !  ° d ONLN daå ﬁòE )enerating a Header File  ,  ° d ONLN dyåò( (ï4-2 ° d ONLN d}ô ÷•& (¢ ÷Generating a Sour Ö  ° d ONLN déô&•A )Pce File  ,  ° d ONLN dñô•( )ı4-2  ° d ONLN dö¶ ÷≤ (Ø ÷Generating Glue ,  ° d ONLN d™¶≤( (Ø4-3 ° d ONLN dÆ≥ Ãø ’ (º ÃPr  N† ° d ONLN d∞≥ ÷ø )
otocolGen Refer  `` ° d ONLN dø≥ø0 )Gence ,  ° d ONLN dƒ≥ø( )˛4-4  4 J X ì(  
 J X Ü( 4 J X Ü(   ° d ONLN d   J   c) ( \  Contents  ˇ–    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ <ˇ
 ,  Palatino       
 .     (· <ii  ,  	Helvetica     +rDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
  
 k < r
 4 l < r
 p  m < m
 m < m
  
ˇ·ˇ‚7Ç      ° d ONLN d   _ < j l ( g <	Chapter 5   ° d ONLN d 
 \ Æ k ∂ )rT  @ ° d ONLN d  \ ∑ k ˘ )	
he Packer  µÄ ° d ONLN d  \ ˘ k )BT  µÄ ° d ONLN d  \  k )oo F@ ° d ONLN d  \ k )l     
 ,  ° d ONLN d  ^˝ j
 )Ì5-1  ° d ONLN d  r Æ ~ ( { ÆGenerating a .pkg File  ,  ° d ONLN d 6 r˝ ~
 ( {˝5-1 ° d ONLN d :  Æ ã Â ( à ÆPacker Refer  ` ° d ONLN d F  Ê ã ˘ )8ence ,  ° d ONLN d K ˝ ã
 ( à˝5-2  
 ª < ¬
 4 º < ¬
 p  Ω < Ω
 Ω < Ω
  
ˇ·ˇ‚7Ç     ° d ONLN d O Ø < ∫ l ( ∑ <	Chapter 6   ° d ONLN d Y ¨ Æ ª ª )rW  v‡ ° d ONLN d Z ¨ ª ª › )riting   ÆÄ ° d ONLN d a ¨ › ª )"	P-Class I  t@ ° d ONLN d j ¨ ªO )9	nterfaces     
 ,  ° d ONLN d t Æ˝ ∫
 )Á6-1  ° d ONLN d y ¬ Æ Œ ‘ ( À Æ	P-Class I 5` ° d ONLN d Ç ¬ ’ Œ2 )'nterface Declarations  ,  ° d ONLN d ò ¬˝ Œ
 ( À˝6-2 ° d ONLN d ú œ ∏ € ( ÿ ∏Method Declarations ,  ° d ONLN d ∞ œ˝ €
 ( ÿ˝6-2 ° d ONLN d ¥ ‹ ¬ Ë ‡ ( Â ¬Non-V   ° d ONLN d π ‹ ‡ ËW )irtual Method Declarations ,  ° d ONLN d ‘ ‹˝ Ë
 ( Â˝6-2 ° d ONLN d ÿ È ∏ ı ( Ú ∏Field Declarations  ,  ° d ONLN d Î È˝ ı
 ( Ú˝6-3 ° d ONLN d Ô ˆ ∏ Ú ( ˇ ∏Export-Contr  *  ° d ONLN d ˚ ˆ Û );ol Dir r† ° d ONLN d ˆ* )ectives  ,  ° d ONLN d	 ˆ˝
 )Ò6-3  ° d ONLN d Æ “ ( ÆMaking  M@ ° d ONLN d ” ˘ )%	P-Class I  † ° d ONLN d ˙M )'mplementations Fr  æ‡ ° d ONLN d.M] )Som   Z¿ ° d ONLN d1^d )Y  @ ° d ONLN d2d† )our Interfaces ,  ° d ONLN dA˝
 )ô6-3  ° d ONLN dE ∏ Ú ( ∏Instantiating   6† ° d ONLN dS Û' );P-Classes O  p  ° d ONLN d^'W )4n the Stack  ,  ° d ONLN dj˝
 )÷6-3  ° d ONLN dn ∏) (& ∏Low-level Instantiation ,  ° d ONLN dÜ˝)
 (&˝6-4 ° d ONLN dä* ∏6; (3 ∏Registration and Instantiation  ,  ° d ONLN d©*˝6
 (3˝6-4 ° d ONLN d≠7 ∏C È (@ ∏
Modifying   ¿ ° d ONLN d∑7 ÍC )2	P-Classes  ,  ° d ONLN d¡7˝C
 (@˝6-5  
s <z
 4t <z
 p u <u
u <u
  
ˇ·ˇ‚7Ç     ° d ONLN d≈g <r l (o <	Chapter 7   ° d ONLN dœd Æs )rThe Name Server     
 ,  ° d ONLN dﬂf˝r
 (o˝7-1 ° d ONLN d‰z ÆÜ (É ÆUsing the Name Server ,  ° d ONLN d˙z˝Ü
 (É˝7-1 ° d ONLN d˛á Æì (ê ÆName Server Refer %  ° d ONLN dáì )Tence ,  ° d ONLN dá˝ì
 )˚7-2  ° d ONLN dî ∏† ⁄ (ù ∏Lookup  ,  ° d ONLN dî˝†
 (ù˝7-2 ° d ONLN d#° ∏≠ ˜ (™ ∏RegisterName  ,  ° d ONLN d0°˝≠
 (™˝7-3 ° d ONLN d4Æ ∏∫ (∑ ∏UnRegisterName  ,  ° d ONLN dCÆ˝∫
 (∑˝7-3 ° d ONLN dGª ∏« ¬ (ƒ ∏W ï  ° d ONLN dHª ¡« ˇ )	aitForRegister ,  ° d ONLN dWª˝«
 (ƒ˝7-3 ° d ONLN d[» ∏‘ ¬ (— ∏W ï  ° d ONLN d\» ¡‘ )	aitForUnRegister ,  ° d ONLN dm»˝‘
 (—˝7-4  
 <
 4 <
 p  <
 <
  
ˇ·ˇ‚7Ç     ° d ONLN dq¯ < l (  <	Chapter 8   ° d ONLN d{ı Æ ‚ )rP-Class  b  ° d ONLN dÉı „# )5	Reference     
 ,  ° d ONLN dç˜˝
 ( ˝8-1 ° d ONLN dí Æ ≈ ( ÆWhy   `Ä ° d ONLN dñ ∆ ı )P-Classes I  Ä ° d ONLN d° ˆ[ )0nstead of C++ Classes? ,  ° d ONLN d∏˝
 (˝8-1 ° d ONLN dº Æ$ ‘ (! Æ	P-Class I 5` ° d ONLN d≈ ’$- )'mplementation Deﬁ  Ù  ° d ONLN d◊-$G )Xnition ,  ° d ONLN dﬁ˝$
 )–8-3  ° d ONLN d‚% ∏1 Ï (. ∏Capabilities  ,  ° d ONLN dÔ%˝1
 (.˝8-4 ° d ONLN dÛ2 ∏> ø (; ∏V ú` ° d ONLN dÙ2 æ> )ersion Numbers ,  ° d ONLN d2˝>
 (;˝8-5 ° d ONLN d? ÆK ˜ (H ÆClass TClassInfo  ,  ° d ONLN d?˝K
 (H˝8-5 ° d ONLN dL ∏Xq (U ∏$ImplementationName and InterfaceName  ,  ° d ONLN dAL˝X
 (U˝8-6 ° d ONLN dEY ∏e ø (b ∏V ú` ° d ONLN dFY æe Ÿ )ersion ,  ° d ONLN dMY˝e
 (b˝8-6 ° d ONLN dQf ∏r › (o ∏Signatur    ° d ONLN dYf ﬁr ‚ )&e  ,  ° d ONLN d[f˝r
 (o˝8-6 ° d ONLN d_s ∏ … (| ∏Size  ,  ° d ONLN dds˝
 (|˝8-6 ° d ONLN dhÄ ∏å € (â ∏MakeAt  ,  ° d ONLN doÄ˝å
 (â˝8-6 ° d ONLN dsç ∏ô ‹ (ñ ∏Register  ,  ° d ONLN d|ç˝ô
 (ñ˝8-7 ° d ONLN dÄö ∏¶ Ë (£ ∏
DeRegister  ,  ° d ONLN dãö˝¶
 (£˝8-7 ° d ONLN dèß ∏≥ Õ (∞ ∏New ,  ° d ONLN dìß˝≥
 (∞˝8-7 ° d ONLN dó¥ ∏¿ œ (Ω ∏Destr K@ ° d ONLN dú¥ –¿ € )oy ,  ° d ONLN dü¥˝¿
 (Ω˝8-7 ˇ
î    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ Ã˙( ,  Palatino       
 .     Ñ` (‡iii ,  	Helvetica     (Ô ÃDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ÷ h ( e ÷GetCapabiltity  ,  ° d ONLN d  \ h( ( e8-7 ° d ONLN d  i Ã u ˆ ( r Ã	Class TPr h¿ ° d ONLN d  i ˆ u )*otocol ,  ° d ONLN d # i u( ( r8-8 ° d ONLN d ' v ÷ Ç ˇ (  ÷	ClassInfo ,  ° d ONLN d 1 v Ç( ( 8-8 ° d ONLN d 5 É Ã è ’ ( å ÃM ı@ ° d ONLN d 6 É ’ è
 )	iscellaneous ,  ° d ONLN d C É è( ( å8-8 ° d ONLN d G ê ÷ ú ( ô ÷	NewByName ,  ° d ONLN d Q ê ú( ( ô8-8 ° d ONLN d U ù ÷ ©& ( ¶ ÷ClassInfoByName ,  ° d ONLN d e ù ©( ( ¶8-9 ° d ONLN d i ™ ÷ ∂8 ( ≥ ÷AllocInstanceByName ,  ° d ONLN d } ™ ∂( ( ≥8-9 ° d ONLN d Å ∑ ÷ √ ﬂ ( ¿ ÷Fr  ‘  ° d ONLN d É ∑ ﬂ √ )	
eeInstance ,  ° d ONLN d é ∑ √( ( ¿8-9  
 Û Z ˙( 4 Ù Z ˙( p  ı Z ı( ı Z ı(  
ˇ·ˇ‚7Ç     ° d ONLN d í Á Z Ú ä ( Ô Z	Chapter 9   ° d ONLN d ú ‰ Ã Û' )rDebug Macros    
 ,  ° d ONLN d © Ê Ú( ( Ô9-1 ° d ONLN d Æ ˙ Ã ‚ ( ÃMacr  *Ä ° d ONLN d ≤ ˙ „ )
os for Thr P  ° d ONLN d º ˙\ )+owing Exceptions ,  ° d ONLN d Õ ˙( (9-1 ° d ONLN d — ÷ ( ÷THROWIF ,  ° d ONLN d Ÿ( (9-1 ° d ONLN d › ÷  ( ÷THROWNIL  ,  ° d ONLN d Ê ( (9-2 ° d ONLN d Í! Ã- ‚ (* ÃMacr  *Ä ° d ONLN d Ó! „-+ )os for Branching ,  ° d ONLN d ˇ!-( (*9-2 ° d ONLN d. ÷:	 (7 ÷XREQUIRE  ,  ° d ONLN d.:( (79-2 ° d ONLN d; ÷G (D ÷XREQUIRENOT ,  ° d ONLN d;G( (D9-3 ° d ONLN d H ÷T6 (Q ÷XREQUIRE_ACTION ,  ° d ONLN d0HT( (Q9-4 ° d ONLN d4U ÷aM (^ ÷XREQUIRENOT_ACTION  ,  ° d ONLN dGUa( (^9-4 ° d ONLN dKb Ãn ˇ (k Ã
Other Macr  V` ° d ONLN dUb ˇn )3os ,  ° d ONLN dXbn( (k9-5 ° d ONLN d\o ÷{ ˚ (x ÷XASSER  ›† ° d ONLN dbo ˚{ )%T  ,  ° d ONLN ddo{( (x9-5 ° d ONLN dh| ÷à ˚ (Ö ÷XASSER  ›† ° d ONLN dn| ˚à )%TNOT ,  ° d ONLN ds|à( (Ö9-5 ° d ONLN dwâ ÷ï (í ÷	XDEBUGGER ,  ° d ONLN dÅâï( (í9-6 ° d ONLN dÖñ ÷¢ ˚ (ü ÷XPRINT  ,  ° d ONLN dåñ¢( (ü9-6 ° d ONLN dê£ ÷Ø  (¨ ÷XSETPTRNAME ,  ° d ONLN dú£Ø( (¨9-6 ° d ONLN d†∞ ÷º: (π ÷XSETHANDLENAME  ,  ° d ONLN dØ∞º( (π9-7  
Ï ZÛ( 4Ì ZÛ( p Ó ZÓ(Ó ZÓ(  
ˇ·ˇ‚7Ç     ° d ONLN d¥› ÃÏ (Ë ÃGlossary     
 o@ ° d ONLN dΩﬂÎ( (ËGL-1  ˇ     d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ <ˇ
 ,  Palatino       
 .     (· <iv  ,  	Helvetica     +rDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇ^    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h1  
         4⁄ ú˙(  
      ,     (‡1-1 ,  	Helvetica     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w ∆ ( p úIntr  $» ° d ONLN d  Z ∆ w, )*oduction   ä* ( p1    
         ° d ONLN d   ú, § () úN Œ‡ ° d ONLN d   §, ø )ewton  x¿ ° d ONLN d   ¿,8 ) Driver Development Kits ( y` ° d ONLN d / 8,R )xDDKs s  ° d ONLN d 3 S,V ))  ∆‡ ° d ONLN d 4 V,] ) a F‡ ° d ONLN d 6 ^,a )r  ‡ ° d ONLN d 7 b,s )e pr † ° d ONLN d ; s,£ )ovided for   ›‡ ° d ONLN d F £, )0developers who need  ° d ONLN d Z- ú9ò (6 ú7low-level access to the Newton operating system and har p‡ ° d ONLN d ë-ò9Ø )¸dwar ®† ° d ONLN d ï-Ø9∏ )e.   ° d ONLN d ô? úK › (H úThe DDK appr  ¡† ° d ONLN d •? ›K$ )Aoach is modular  (  ° d ONLN d ¥?$K® )G. Each kit covers a very speciﬁ  §` ° d ONLN d ‘?®KÎ )Ñc task. These ar ™Ä ° d ONLN d ‰?ÎKÚ )Ce  Ù  ° d ONLN d Ê?ÚK )	several k  T¿ ° d ONLN d Ô?K& )(its  ° d ONLN d ÛL úX ∏ (U úthat ar   ° d ONLN d ˙L πX/ )e envisioned or underway:  ,  Zapf Dingbats     ° d ONLN db új † (h ún    
 ° d ONLN d_ ®kb )%Communications Driver Development Kit  ° d ONLN d<n ®z Æ *Y  @Ä ° d ONLN d=n Æz )ou use this kit to cr  +  ° d ONLN dRnzæ )T)eate communications drivers. This softwar   † ° d ONLN d{næz )ºe may be placed on a   ° d ONLN dêz ®Ü – (É ®PCMCIA  ∆  ° d ONLN dñz –Ü ﬂ )( car {@ ° d ONLN döz ‡Ü5 )d or distributed thr l‡ ° d ONLN dÆz5Ü¬ )Uough desktop computers and br  Ì‡ ° d ONLN dÀz¬Üı )çought onto     ° d ONLN d÷zˆÜ# )4	a Newton   ° d ONLN dﬂÜ ®í Æ (è ®u á  ° d ONLN d‡Ü Æí )sing Newton Connection.      ° d ONLN d¯õ ú£ † (° ún    
 ° d ONLN d˙ò ®§ Ë )Printer Driver   /` ° d ONLN d	ò È§4 )ADevelopment Kit  ° d ONLN dß ®≥ Æ (∞ ®Y @Ä ° d ONLN dß Æ≥ )ou use this kit to cr  +  ° d ONLN d/ß≥ì )T"eate printer drivers. This softwar @@ ° d ONLN dQßì≥ )ëe may be placed on a PCMCIA  ã@ ° d ONLN dlß≥ )á   ° d ONLN dm≥ ®ø µ (º ®car µ@ ° d ONLN dp≥ µø
 )d or distributed thr ¶‡ ° d ONLN dÑ≥
øó )Uough desktop computers and br  '‡ ° d ONLN d°≥òøÀ )éought onto   F  ° d ONLN d¨≥Àø˛ )3
a Newton u F  ° d ONLN d∂≥ˇø )4sing   ° d ONLN dªø ®À (» ®Newton Connection.      ° d ONLN dŒ‘ ú‹ † (⁄ ún    
 ° d ONLN d–— ®› – )PCMCIA ∆  ° d ONLN d÷— –›: )( Driver Development Ki s` ° d ONLN dÏ—;›> )kt  ° d ONLN dÓ‡ ®Ï Æ (È ®Y @Ä ° d ONLN dÔ‡ ÆÏ )ou use this kit to cr  +  ° d ONLN d‡Ï∂ )T%eate Newton device drivers for PCMCIA  øÄ ° d ONLN d)‡µÏ∑ )≥   ?Ä ° d ONLN d*‡∏Ï˚ )input/output c O  ° d ONLN d8‡˚Ï )Car   ° d ONLN d:‡Ï )	ds.  ° d ONLN d>Ï ®¯ ﬂ (ı ®This softwar  |@ ° d ONLN dJÏ ﬂ¯ )7	e will pr    ° d ONLN dSÏ¯ô )%obably be included on a PCMCIA í  ° d ONLN dqÏò¯ß )î car G` ° d ONLN duÏ®¯ )d, though it could be  ° d ONLN dã¯ ® Ë ( ®distributed thr Ì¿ ° d ONLN dö¯ Ëu )@ough desktop computers and br  n¿ ° d ONLN d∑¯v© )éought onto   ç  ° d ONLN d¬¯©∏ )3a N  [‡ ° d ONLN d≈¯π‘ )ewton  ¿ ° d ONLN d ¯’› ) u å‡ ° d ONLN dÃ¯› )sing Newton  ° d ONLN dÿ ® › ( ®Connection.     ° d ONLN d‰ ú! † ( ún    
 ° d ONLN dÊ ®" Æ )P  â† ° d ONLN dÁ Æ" – )CMCIA  ∆  ° d ONLN dÏ –" )" Masked ROM Ki ñ` ° d ONLN d˙"  )Mt  ° d ONLN d¸% ®1 Æ (. ®Y @Ä ° d ONLN d˝% Æ1- )ou use this kit to put softwar &  ° d ONLN d%-1{ )e onto a PCMCIA  ¥Ä ° d ONLN d*%z1â )M car i¿ ° d ONLN d.%ä1Õ )d. That softwar  û¿ ° d ONLN d=%Õ1 )Ce could be one of  ° d ONLN dO1 ®=f (: ®,the drivers, or could be application softwar  9† ° d ONLN d{1g=™ )øe. This kit is dif §` ° d ONLN dç1™=∂ )Cfer  Ü‡ ° d ONLN dê1∂=Õ )ent fr ˝  ° d ONLN dñ1Õ= )om the DDKs in   ° d ONLN d•= ®Iâ (F ®7that it consists only of a tool that places the softwar 0‡ ° d ONLN d‹=äIœ )‚e on a PCMCIA  ` ° d ONLN dÈ=œIﬁ )E car º† ° d ONLN dÌ=ﬁI‰ )d  ÿ` ° d ONLN dÓ=‰IÊ ).  ° d ONLN dN úZ ¢ (W úE õ¿ ° d ONLN dÒN ¢Z ≥ )ach  ]` ° d ONLN dıN ¥Z Ô )kit typically c  † ° d ONLN dN Z )<ontains      ° d ONLN dd úl † (j ún    
 ° d ONLN da ®m ≈ )scripts  â¿ ° d ONLN da ≈m) ) and example code for  ¯` ° d ONLN d+a)m2 )dM  m† ° d ONLN d,a3mC )
PW å@ ° d ONLN d.aBmí ), the Macintosh pr ñ@ ° d ONLN d@aím )Pogram development system     ° d ONLN dYv ú~ † (| ún    
 ° d ONLN d[s ® œ )Hammer x@ ° d ONLN das œÄ )'', the low-level debugger for the Newton      ° d ONLN dâà úê † (é ún    
 ° d ONLN dãÖ ®ë Î )documentation  ° d ONLN dôî ®† Æ *T  ∫¿ ° d ONLN döî ≠† – )ypically Ë¿ ° d ONLN d¢î œ†- )", each kit contains thr  ˆ‡ ° d ONLN dπî-†j )^ee documents   ° d ONLN d≈îk†m )>.        ° d ONLN d«¶ ®Ø ≠ (¨ ®n       
 ° d ONLN d…£ ¥Ø ƒ )this π  ° d ONLN dÕ£ ƒØ ¯ ) document,     Û  ° d ONLN dÿ£ ¯Ø )4An Intr  '@ ° d ONLN dﬂ£Øì ) oduction to the Newton DDKs     ¢Ä ° d ONLN d˙£ìØª ){	, which d  ê† ° d ONLN d£ºØ ))escribes the softwar ≤‡ ° d ONLN d£Ø )We  ° d ONLN dØ ¥ª ÷ (∏ ¥and har ÉÄ ° d ONLN d Ø ÷ª Ì )"dwar ª@ ° d ONLN d$Ø ÌªM )e tools you’ll be using   
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 1-0  *	T     )able 1-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4" F, H 4A FK H 4a Fø H 4” FÏ H 4˙ F H 4 F1 H 4? Fª H ˇ&    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>1  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Introduction  4⁄ <˙
      
         (‡ <1-2       	 )BAdditional Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ,  Zapf Dingbats     ° d ONLN d   _ ä h è ( e än       
 ° d ONLN d  \ ñ h £ )the  ]` ° d ONLN d  \ § h ¶ )     ›` ° d ONLN d  \ ¶ h ˙ )Hammer User Guide     N‡ ° d ONLN d  \ ˚ hL )U, which describes t  ﬂÄ ° d ONLN d * \L h’ )Qhe low-level Newton debugger       ° d ONLN d G n ä w è ( t än       
 ° d ONLN d I k ñ w £ )a d  ¿ ° d ONLN d L k § wâ )4ocument describing the individual kit; for example,    ùÄ ° d ONLN d Ä kâ wÿ )ÂThe Printer Driver   ° d ONLN d ì w ñ É ⁄ ( Ä ñDevelopment Kit  
 â < §
 4 ä < §
  
 ¥ < º
 4 µ < º
 p  ∂ < ∂ ∂ < ∂  
ˇ·ˇ‚7Ç      ˇˇ© ˇÆ ° d ONLN d § ° < ¥ ∆ ( Ø <Additional Softwar  /¥ ° d ONLN d ∂ ° « ¥ Œ )ãe    V˛ ( Ø1    
         ° d ONLN d π ≈ ~ — Ñ ( Œ ~T µ¿ ° d ONLN d ∫ ≈ É — Î )o develop DDK softwar  Å‡ ° d ONLN d œ ≈ Ï —Y )ie you need these softwar  ` ° d ONLN d Á ≈Z —⁄ )ne packages installed on your   ° d ONLN d “ ~ ﬁ ‹ ( € ~development system.     ° d ONLN d Ë ~  Ç *n     
 ° d ONLN d Â ä Ò £ )MPW  ‡ ° d ONLN d Â £ Ò Û ), the Macintosh pr ‡ ° d ONLN d/ Â Û Òò )P#ogram development system. If you ar  º  ° d ONLN dR Âò ÒÏ )•e not familiar with  ° d ONLN df Ò ä ˝ £ ( ˙ äMPW ‡ ° d ONLN di Ò £ ˝w )2, you might want to familiarize yourself with it.  f@ ° d ONLN dõ Òw ˝ˇ )‘Chapter 3, “Developing Using   ° d ONLN d∏ ˝ ä	 ¨ ( äDDKs,”  ˘† ° d ONLN dæ ˝ ¨	 ∏ )" pr  @¿ ° d ONLN d¡ ˝ π	ÿ )=ovides some information and may be enough to get you up and r  ¿  ° d ONLN d˛ ˝ÿ	˙ (ÿunning.     ° d ONLN d ~ Ç ( ~n    
 ° d ONLN d ä ê )Y  @Ä ° d ONLN d	 ê )ou may need the Newton T ,Ä ° d ONLN d!B )xoolkit (NTK).  @ ° d ONLN d.CE );   ° d ONLN d0  ~, Ñ () ~Y @Ä ° d ONLN d1  Ñ, ≠ )	ou can or  9@ ° d ONLN d:  ≠, ◊ ))der MPW  %  ° d ONLN dA  ◊,/ )*, NTK, or any other  † ° d ONLN dU /,` )XAPDA® pr   ° d ONLN d] `,à )1	oduct thr  æ¿ ° d ONLN df à,° )(ough   ΩÄ ° d ONLN dk °,æ )APDA Ü@ ° d ONLN do æ,¸ ) (Apple’s sour ⁄Ä ° d ONLN d} ¸, )>ce   ° d ONLN dÄ- ~9 ◊ (6 ~for developer tools):  
 <
 4 <
  
/ <7
 40 <7
 p 1 <11 <1  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dΩ </ H (* <A b" ° d ONLN dæ I/ „ )dditional Equipment    V˛ (*1    
         ° d ONLN d‘@ ~L Ñ (I ~T µ¿ ° d ONLN d’@ ÉL )!o test and debug your code, you r  Z‡ ° d ONLN dˆ@L÷ )ï(un Hammer on a Macintosh that is connect ï† ° d ONLN d@÷L„ )æed   ˚  ° d ONLN d!@„LÓ )to   2‡ ° d ONLN d$@ÔLˆ )a  ° d ONLN d&M ~Y æ (V ~device called a T@ ° d ONLN d5M øY ƒ )An  %† ° d ONLN d6M ≈Y « )     •† ° d ONLN d7M «Y	 )Armistice card    ˇ‡ ° d ONLN dEM	Y )B.  ‡ ° d ONLN dFMY )   °Ä ° d ONLN dGMY )An   [¿ ° d ONLN dJMYX )Armistice car  (‡ ° d ONLN dWMYYa );d  ƒ† ° d ONLN dYMaY∂ )emulates a Newton  ìÄ ° d ONLN djM∑Y )V; it does not have   ° d ONLN d}Z ~fπ (c ~Ca Newton ROM; instead, it has RAM that is loaded with a ROM image.  ° d ONLN dï? ~K á (H ~Fr  ‘  ° d ONLN dó? áK º )	
om the USA ° d ONLN d¢? ÛK6 )l1-800-282-2732   ° d ONLN d≥O ~[ á (X ~Fr  ‘  ° d ONLN dµO á[ π )		om Canada  ° d ONLN døO Û[ ˚ )l1- ”‡ ° d ONLN d¡O ˚[3 )800-637-0029 ° d ONLN dœ_ ~k á (h ~Fr  ‘  ° d ONLN d—_ ák › )	om other Countries ° d ONLN d‰_ Ûk1 )l(716)871-6555  ° d ONLN dÙo ~{ ç (x ~Fax ° d ONLN d¯o Û{) )u(716)871-651 Ô  ° d ONLN do){. )61  ° d ONLN d ~ã ≠ (à ~	AppleLink ° d ONLN d Ûã )uAPDA ° d ONLN dè ~õ ° (ò ~Internet  ° d ONLN d è Ûõr )uAPDA@applelink.apple.com ° d ONLN d:ü ~´ ∑ (® ~
CompuServe  ° d ONLN dEü Û´" )u
76666,2405 ° d ONLN dQØ ~ª ƒ (∏ ~America Online  ° d ONLN d`Ø Ûª )uAPDAor ‡ ° d ONLN dfØª( )'der  ° d ONLN dkø ~À ∑ (» ~Regular Mail  ° d ONLN dxø ÛÀ )uAPDA ° d ONLN d}  Û÷> *Apple Computer (Ä ° d ONLN dã >÷S )K, Inc. ° d ONLN dí’ Û· ˘ (ﬁ ÛP ?† ° d ONLN dì’ ¯·) ).O. Box 319  ° d ONLN dü‡ ÛÏ (È ÛBuf …  ° d ONLN d¢‡Ï& )falo, NY G† ° d ONLN d™‡'ÏY )% 14207-0319  ° d ONLN d∂Î Û˜ (Ù ÛUSA 
ˇˇˇˇˇˇˇˇ 4 ^ ( w * 4 § (f * ˇ>    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>1  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úIntroduction  4⁄ ú˙(         (‡ úAdditional Documentation       
 ,  (‡1-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(  
 ^ Z x( 4 ^ Z x(  
 à Z ê( 4 â Z ê( p  ä Z ä. ä Z ä.  
ˇ·ˇ‚7Ç        ˇˇ© ˇÆ ° d ONLN d   u Z à ( É ZAdditional Documentation    V˛ ( É 1    
         ° d ONLN d  ô ú • ( ¢ úFor information on the  ¯Ä ° d ONLN d 1 ô •0 )fARM micr T† ° d ONLN d 9 ô1 •@ )/opr  ë@ ° d ONLN d < ô@ •ä )ocessor (the micr  E† ° d ONLN d M ôã •ö )Kopr  Ç@ ° d ONLN d P ôö • )ocessor used in the Newton)  ° d ONLN d l ¶ ú ≤ Ø ( Ø úand   é¿ ° d ONLN d p ¶ Ø ≤0 )ARM development tools, see:    ° d ONLN d å ∏ ú ƒ ( ¡ úARM Toolkit User's Manual    Ç† ° d ONLN d • ∏ ƒp )v, which describes the  œ‡ ° d ONLN d ª ∏p ƒê )^ARM T  p  ° d ONLN d ¿ ∏ê ƒ ) oolkit and how to use the tools    ° d ONLN d ‡   ú ÷ ( ” úARM Toolkit Reference Manual     ^‡ ° d ONLN d ¸   ÷¥ )Ç!, which describes advanced featur  B  ° d ONLN d  ¥ ÷ )ñes of the tools    ° d ONLN d- ‹ ú Ë1 ( Â ú#ARM Toolkit Technical Specification     ¿ ° d ONLN dP ‹1 Ëì )ïs, which describes the   U  ° d ONLN dg ‹î ËÕ )cAPI for the T  ”Ä ° d ONLN dt ‹Ã ËÂ )8oolkit   ° d ONLN d{ Ó ú ˙ ˙ ( ˜ úARM Toolkit Cookbook     ¿ ° d ONLN dè Ó ˚ ˙' )_
, which pr ™@ ° d ONLN dô Ó' ˙ä ),ovides many useful pr  ùÄ ° d ONLN dÆ Óä ˙Í )cogramming examples ° d ONLN d¡  úL (	 ú$These may be included with your DDK.  
ˇˇˇˇˇˇˇˇ 4 x F H ˇ≤    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>1  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Introduction  4⁄ <˙
      
         (‡ <1-4       	 )BAdditional Documentation     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇp    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h2  
         4⁄ ú˙( ,  	Helvetica              (‡ ú	P-Classes      
 ,  (‡2-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w ¨ ( p úT Åv ° d ONLN d  Z ¨ w* )he Parts of  Ên ° d ONLN d  Z* w; )~Y  ‰ ° d ONLN d  Z9 wÅ )our Pr îÿ ° d ONLN d  ZÅ w∫ )Hoduc Îê ° d ONLN d  Z∫ w¬ )9t    ä* )a2     
         ° d ONLN d  ú' ¶ ($ úW ° d ONLN d  ¶'Ê )
Ehen you build a Newton OS driver or communication tool, you build on   ]@ ° d ONLN d bÁ'  ($ÁDDK   ° d ONLN d f( ú4 † (1 ús Ω  ° d ONLN d g( †4 Ω )oftwar ‰¿ ° d ONLN d m( Ω4 · )
e that is  ©‡ ° d ONLN d w( ‚4 )%contained i  ™‡ ° d ONLN d Ç(4" )1n a    |@ ° d ONLN d Ü(#4` )protocol class    e† ° d ONLN d î(a4± )>, which is called a    ¿ ° d ONLN d ®(≤4— )Qp-class       ° d ONLN d Ø(—4÷ ).    ° d ONLN d ±(÷4¯ )P-classe ¿ ° d ONLN d π(˘4 )#s ar ì¿ ° d ONLN d Ω(4 )e  ° d ONLN d ø5 úA Ú (> údescribed in detail i u@ ° d ONLN d ‘5 ÛAî )W$n the section immediately following  † ° d ONLN d ¯5ïAº )¢	; for now  Ä ° d ONLN d5ºA' )', you need to know that  ° d ONLN dB úN £ (K úa      ° d ONLN dB §N ¬ )p-class  († ° d ONLN d"B ¬N ) is similar to a   B† ° d ONLN d3BN )@C++  ¯  ° d ONLN d7BN0 )class.    ¿ ° d ONLN d>B1Ne )
Each DDK i Õ  ° d ONLN dHBeNë )4
ncludes a   † ° d ONLN dRBíN∞ )-p-class  I@ ° d ONLN dYB∞N ) interface that is like a  ° d ONLN dsO ú[Å (X ú3base class; you implement your special behavior by  ¿ ° d ONLN d¶OÇ[Ü )Êc  w  ° d ONLN dßOÜ[â )r  <  ° d ONLN d®Oä[Ø )	eating a   ê‡ ° d ONLN d±OØ[Õ )%p-class  πÄ ° d ONLN d∏OÕ[ ) implementation  Õ  ° d ONLN d«O[ )I   ° d ONLN d»\ úh (e úthat specializes the interface. ° d ONLN dËn úz ¢ *Y  @Ä ° d ONLN dÈn ¢z Ø )ou   =  ° d ONLN dÏn ∞z ﬁ )
may also c ´` ° d ONLN dˆn ﬁz · ).r  p` ° d ONLN d˜n ‚z Ô )eat  |` ° d ONLN d˙n Ôz ˚ )e a  ∆  ° d ONLN d˝n ˚z ˝ )   F  ° d ONLN d˛n ˛zE )NewtonScript fr  ‘¿ ° d ONLN dnEzw )Game that pr  è† ° d ONLN dnxz )3!ovides information needed by the   ° d ONLN d9{ úá œ (Ñ ú	Newton OS ` ° d ONLN dB{ –á “ )4.  ° d ONLN dDç úô ¢ (ñ úY @Ä ° d ONLN dEç ¢ô ß )o  ∂  ° d ONLN dFç ßô π )u pr @ ° d ONLN dJç ∫ô )ocess the p-class  ≥† ° d ONLN d\çô )Jt  ˆ  ° d ONLN d]çô )o cr  ¿ ° d ONLN daçô3 )eate a     ˆ` ° d ONLN dhç3ôX )package     -@ ° d ONLN doçYô[ )&.  ≠@ ° d ONLN dpç[ô )) The package can be loaded into a Newton.   
† Zª( 4° Zª(  
À Z”( 4Ã Z”( p Õ ZÕ.Õ ZÕ.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dõ∏ ZÀ û (∆ Z	P-Classes   V˛ (∆ 2    
         ° d ONLN d¶‹ úË æ (Â úDDKs a  ˘† ° d ONLN d¨‹ æË ¡ )"r  æ† ° d ONLN d≠‹ ¬Ë È )
e built ar Ô  ° d ONLN d∑‹ ÈË$ )'ound softwar =† ° d ONLN d√‹%Ë= )<e deﬁ  y` ° d ONLN d…‹=Ë⁄ )&nitions called p-classes. P-classes pr µ@ ° d ONLN dÔ‹⁄Ë$ )ùovide the means  ° d ONLN dˇÈ úı (Ú úfor extending the system.   X` ° d ONLN dÈı )rA  ì  ° d ONLN dÈıy ) p-class is similar to a r † ° d ONLN d4Èzı˘ )eegular C++ class, except it is   ° d ONLN dSˆ ú ﬁ (ˇ úsomewhat mor  …` ° d ONLN d_ˆ ﬁ È )Be r  ÿ  ° d ONLN dbˆ ÈË )9estricted so that the underlying operating system has mor  ∞  ° d ONLN dõˆËÛ )ˇe r  æ† ° d ONLN dûˆÛ )oom for  ° d ONLN d¶ ú Ω ( úchange. k¿ ° d ONLN d≠ æ ¿ )"   ° d ONLN dØ ú! £ ( úA ∫† ° d ONLN d∞ £! • )   :† ° d ONLN d± ¶! ƒ )p-class  c@ ° d ONLN d∏ ƒ!# ) consists of two parts:  ,  Zapf Dingbats     ° d ONLN d–+ ú3 † (1 ún    
 ° d ONLN d“( ®4 Ø )A  ∫† ° d ONLN d”( Ø4 ± )     :† ° d ONLN d‘( ≤4 ˚ )p-class interface     …‡ ° d ONLN dÂ( ˚4 )I
. This is  ¿ ° d ONLN dÔ( 4U )%essentially a    ° d ONLN d¸(U4™ )5n abstract class deﬁ ≤` ° d ONLN d(´4≈ )Vnition ›¿ ° d ONLN d(≈4– ) th  qÄ ° d ONLN d(—4 )at is a subclass of  , 
 Courier   ° d ONLN d.4 ®@ ﬁ (= ®	TProtocol   ° d ONLN d74 ﬁ@ „ )6.  R` ° d ONLN d94 „@ È )Y  ‡ ° d ONLN d:4 È@z )!ou don’t need to know details of     ﬂ‡ ° d ONLN d[4z@∞ )ë	TProtocol    ﬂ‡ ° d ONLN dd4∞@! )6; if you want to see them,   ° d ONLN d@ ®L ∆ (I ®they ar 1Ä ° d ONLN dÜ@ «L Œ )e  {  ° d ONLN dà@ ŒL )described in   Ä ° d ONLN dï@L6 )9
“Class TPr ¯@ ° d ONLN dü@5L} ).otocol” on page  Ä ° d ONLN dØ@~Lã )I8-8  i` ° d ONLN d≤@ãLê ).  ;¿ ° d ONLN d¥@êLñ )Y  ¸@ ° d ONLN dµ@ïLΩ )	ou can cr  Ô¿ ° d ONLN dæ@ΩL˛ )(eate your own  ·† ° d ONLN dÃ@ˇL )Bp-class  
@ ° d ONLN d”@L  )   ° d ONLN d‘L ®X Û (U ®interfaces, if you  K  ° d ONLN dÁL ÙX )Lchoose ~` ° d ONLN dÌLXc ). Doing so is cover  lÄ ° d ONLN d LcX{ )Qed in  † ° d ONLN dL|Xª )Chapter 6, “W  ∑` ° d ONLN dL∫X¯ )>riting P-Class   ° d ONLN d"X ®d ⁄ (a ®Interfaces.”      ° d ONLN d/m úu † (s ún    
 ° d ONLN d1j ®v Ø )A  ∫† ° d ONLN d2j Øv ± )     :† ° d ONLN d3j ≤v )p-class implementation    ‡ ° d ONLN dIjv≥ )k&. This is essentially a subclass of a  ©¿ ° d ONLN doj≥v— )ñp-class  “` ° d ONLN dvj—v˛ ) interface.  j‡ ° d ONLN dÇjˇv ).Y  +` ° d ONLN dÉjv )ou   ° d ONLN dÜv ®Ç ( ®implement your softwar    ° d ONLN dúvÇ1 )le by cr  † ° d ONLN d£v1ÇV )	eating a   oÄ ° d ONLN d¨vVÇt )%p-class  ò  ° d ONLN d≥vtÇ¬ ) implementation.   ~  ° d ONLN dƒv¬Ç» )NY  >Ä ° d ONLN d≈v»Çﬁ )ou cr  p` ° d ONLN d vﬁÇ )eate the basic   ° d ONLN dŸÇ ®é Ó (ã ®framework of a  ˚¿ ° d ONLN dËÇ Óé )Fp-class  $` ° d ONLN dÔÇéë ) implementation by feeding a   ö` ° d ONLN dÇëéØ )Ñp-class  √  ° d ONLN dÇØéÔ ) interface to Pr † ° d ONLN d#Çé" )AotocolGen.   ° d ONLN d.é ®ö ¿ (ó ®This t  Y‡ ° d ONLN d4é ¡ö Ÿ )ool cr ‚Ä ° d ONLN d:é Ÿö9 )eates header and sour  S‡ ° d ONLN dOé:öK )ace ﬁ Ä ° d ONLN dTéLö )-les for you that contain the skeleton of the   ° d ONLN dÅö ®¶ Û (£ ®implementation.   Â‡ ° d ONLN dëö Û¶ ˘ )KY  ¶` ° d ONLN díö ˘¶# )	ou then ﬁ  ﬁÄ ° d ONLN dúö#¶á )*ll out the skeleton to cr  â¿ ° d ONLN dµöà¶¸ )eeate your implementation.  q@ ° d ONLN dŒö˝¶ˇ )u    
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 2-0  *	T     )able 2-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4è Fô H ˇ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>2  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Parts of  ÇÍ )1Y  Ç )our Product  4⁄ <˙
      
         (‡ <2-2       	 )BPackages     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h • ( e ~	P-classes ∂¿ ° d ONLN d 	 \ • h )' look a lot like C++ objects %† ° d ONLN d % \ h@ )u	. They ar  µÄ ° d ONLN d . \@ hS )&e dif  )Ä ° d ONLN d 3 \T h` )fer    ° d ONLN d 6 \` h≥ )ent in a number of   ‹‡ ° d ONLN d I \≥ h‰ )Svery signiﬁ  …Ä ° d ONLN d U \Â h˙ )2cant   ° d ONLN d Z i ~ u Ü ( r ~w ◊  ° d ONLN d [ i Ü u )ays. One of the important dif  g‡ ° d ONLN d x i u )Äfer  J` ° d ONLN d { i uJ )ences is that  W¿ ° d ONLN d â iJ uq )8	p-classes  á  ° d ONLN d í iq uy )' u   ° d ONLN d î iz u∆ )	se an underlying     ◊  ° d ONLN d • i∆ uŸ )Lglue    ’¿ ° d ONLN d © i⁄ uˇ ) scheme  ° d ONLN d ± v ~ Ç ﬁ (  ~that allows dynamic r ∑‡ ° d ONLN d ∆ v ﬁ ÇN )`un-time installation and r Z@ ° d ONLN d ‡ vO ÇØ )qemoval of the softwar  áÄ ° d ONLN d ı vØ Ç∂ )`e. —  ° d ONLN d ˜ v∂ Ç· ) It is this r  Ø  ° d ONLN d v‚ Ç ),un-time  ° d ONLN d É ~ è˝ ( å ~Xglue that binds your “derived class” p-class implementation to the “base class” p-class   ° d ONLN dd ê ~ ú ¶ *
interface. ° d ONLN do ¢ ~ Æ Ö *A  ∫† ° d ONLN dp ¢ Ö Æ á )   :† ° d ONLN dq ¢ à Æ ¶ )p-class  c@ ° d ONLN dx ¢ ¶ ÆÒ )O interface is a fully abstract class, meaning that all of the member functions   ° d ONLN d« Ø ~ ª3 ( ∏ ~)must be implemented in its subclass, the  –@ ° d ONLN d Ø3 ªQ )µp-class  ¯‡ ° d ONLN d˜ ØQ ªú ) implementation. ° d ONLN d ¡ ~ Õ ñ (   ~Figur R¿ ° d ONLN d ¡ ñ Õ ù )e  ú` ° d ONLN d ¡ ù Õ ™ )2-1  @ ° d ONLN d ¡ ™ Õ ) shows the class hierar  Û  ° d ONLN d) ¡ ÕY )cchy for a p-class.    
 Ô < 
 4  < 
 p   <  ô  <  ô  
ˇ·ˇ‚7Ç      	 ° d ONLN dˇˇ         ( Ì ~Figure  @ ° d ONLN dˇˇ         )2-1     ° d ONLN dH Â ¿  ﬂ )$P-Class  ˛‡ ° d ONLN dO Â ﬂ   ) Class Hierarchy  
¢ <©
 4£ <©
 p § ~§
§ ~§
  
ˇ·ˇ‚7Ç   ˇˇ‹. ˇ◊ ° d ONLN daì ~¢ à (û ~G ?Ó ° d ONLN dbì â¢ õ )lue    €r (û2        
         ° d ONLN dg© ~µ î (≤ ~Glue     CÄ ° d ONLN dk© ïµW )- is assembly-language code that is linked to   ë` ° d ONLN dò©Wµl )¬C++  F‡ ° d ONLN dú©mµù )
code to ma ù‡ ° d ONLN d¶©ùµ¯ )0ke it possible for the   ° d ONLN dΩ∂ ~¬ Ò (ø ~C++ code to be used. Ther 4  ° d ONLN d÷∂ Ú¬ )te ar B† ° d ONLN d⁄∂¬ )e thr  e  ° d ONLN dﬂ∂¬¨ )#ee kinds of glue used for p-classes  ¿@ ° d ONLN d∂¨¬Æ )ñ:  ,  Zapf Dingbats     ° d ONLN dÃ ~‘ Ç (“ ~n      
 ° d ONLN d… ä’ Í )P-class interface glue    é  ° d ONLN d… Í’; )`, or interface glue.   V‡ ° d ONLN d1…<’B )RY  ` ° d ONLN d2…B’∞ )ou must have this; it is cr  n@ ° d ONLN dM…∞’˙ )neated for you by   ° d ONLN d^’ ä· ì (ﬁ äPr  N† ° d ONLN d`’ î· √ )

otocolGen.     ° d ONLN dkÍ ~Ú Ç ( ~n      
 ° d ONLN dmÁ äÛ )P-class implementation glue     ‡  ° d ONLN dàÁÛ} )Å, or implementation glue.  ˆ@ ° d ONLN d¢Á}ÛÉ )rY  ∂¿ ° d ONLN d£ÁÉÛ¸ )ou must have this, too; it is  ° d ONLN d¡Û äˇ ¶ (¸ äalso cr –  ° d ONLN d»Û ¶ˇ ˙ )eated for you by Pr  n† ° d ONLN d€Û ˚ˇ* )U
otocolGen.     ° d ONLN dÊ ~ Ç ( ~n    
 ° d ONLN dË ä8 )'Other glue that you may need to write.   ¿ ° d ONLN d9? )ØY  ¬@ ° d ONLN d>¥ )ou may need to write glue  `Ä ° d ONLN d*µΩ )wto ` ° d ONLN d,æ◊ )	 insur [@ ° d ONLN d2◊	 )e that your  ° d ONLN d> ä Æ ( ä	code is r 5Ä ° d ONLN dG Øp )%.elocatable. This kind of glue is discussed in  N  ° d ONLN dupÛ )¡“Implementing a P-Class” on  ° d ONLN dë ä) ° (& äpage  Z‡ ° d ONLN dñ ¢) Ø )3-5  Æ¿ ° d ONLN dô Ø) ± ).  ° d ONLN dõ. ~: √ (7 ~When a p-class  ï  ° d ONLN d™. √: )Einterface method i   ° d ONLN dº.:ñ )Q"s called, its caller actually call )  ° d ONLN dﬁ.ñ:ü )Çs i  ŒÄ ° d ONLN d·.ü:⁄ )	nterface glue. tÄ ° d ONLN dÔ.€:„ )< T @ ° d ONLN dÒ.‰:Ò )	he   ° d ONLN dÙ; ~G ˜ (D ~interface glue in turns calls   † ° d ONLN d; ¯G ˙ )zi  ˘  ° d ONLN d; ˙GN )mplementation glu  ¢¿ ° d ONLN d$;OGV )Ue, Ï` ° d ONLN d&;VG¨ ) which passes contr     ° d ONLN d9;≠GÙ )Wol to the p-class  ° d ONLN dKH ~T ì (Q ~itself  Ì† ° d ONLN dQH ìT ò ).   
[ <v
 4\ <v
  
Ü <é
 4á <é
 p à <àà <à  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dUs <Ü ~ (Å <Packages    V˛ (Å2    
         ° d ONLN d_ó ~£ ≥ († ~Packages pr e‡ ° d ONLN djó ≥£O )5#ovide the means for loading code, r  g` ° d ONLN dçóO£g )úesour  Ø† ° d ONLN díóg£Û )#ces, objects, and scripts into the   ° d ONLN dµ§ ~∞ » (≠ ~Newton system.  ÉÄ ° d ONLN dƒ§ »∞ œ )JA  æ  ° d ONLN d≈§ œ∞` )! package consists of a number of     ¥` ° d ONLN dÊ§a∞w )íparts     w‡ ° d ONLN dÎ§x∞± ). Packages ar  [† ° d ONLN d¯§±∞˙ )9e built using the  ° d ONLN d
± ~Ωq (∫ ~;Packer tool; it takes a list of parts and builds a package.  
 ˇ û{®    @8           ° d ONLN dˇˇ         (	TProtocol    @f*u{ [u ° d ONLN dˇˇ         +Xp-class implementation  @g Œv [Y ° d ONLN dˇˇ         (p ÷p-class implementation     @5CC 6” ° d ONLN dˇˇ         (>	p-class interface p !6!!6! p Cg!C!g p C!f2C!f2  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 ^ ( ú * 4 Á (¬ * 40 (: * ˇ¢    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>2  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe Parts of  ÇÍ )1Y  Ç )our Product  4⁄ ú˙(         (‡ úPackages       
 ,  (‡2-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ∞ ( e úTher   ¿ ° d ONLN d  \ ± h ¡ )e ar ` ° d ONLN d  \ ¡ h » )e  Y  ° d ONLN d 
 \ » hË )@an unlimited number of possible kinds of package parts. These ar ≈‡ ° d ONLN d J \Ë h ( eË	e the thr E† ° d ONLN d S \ h )%ee   ° d ONLN d V i ú u ∏ ( r úyou ar  –¿ ° d ONLN d \ i ∏ u )e most likely to use …‡ ° d ONLN d p i u )U:  ° d ONLN d r y ú Ö • ( Ç úPr  N† ° d ONLN d t y ¶ Ö ¿ )
otocol J  ° d ONLN d z y ¡ Ö ’ ) part  ° d ONLN d Ä y ¯ Ö ˇ )7A  ∫† ° d ONLN d Å y ˇ Ö ) pr  ¿ ° d ONLN d Ñ y ÖÚ )4otocol part is a compiled and linked binary image cr ]  ° d ONLN d ∏ yÚ Ö )Êeated fr Á@ ° d ONLN d ¿ y Ö# )!om   ° d ONLN d √ Ö ¯ ë ˇ ( é ¯a      ° d ONLN d ≈ Ö  ë )p-class  († ° d ONLN d Ã Ö ë# ).  ° d ONLN d œ î ú † ∏ ( ù úFrame ü` ° d ONLN d ‘ î ∏ † Ã ) part  ° d ONLN d ⁄ î ¯ † ˇ )@A  ∫† ° d ONLN d € î ˇ †M ) frame part consis o` ° d ONLN d Ì îN †] )Ots o ‰@ ° d ONLN d Ò î] †’ )f a cluster of frame objects.    ° d ONLN d î÷ † )y
Some DDKs  ° d ONLN d † ¯ ¨ ˚ ( © ¯r E  ° d ONLN d † ¸ ¨ )equir  \@ ° d ONLN d † ¨ )e  %‡ ° d ONLN d  † ¨ ) f ˘¿ ° d ONLN d" † ¨3 )rame ä  ° d ONLN d& †4 ¨8 )s  «  ° d ONLN d' †8 ¨m ) with speciﬁ à@ ° d ONLN d4 †n ¨ö )6
c contents å` ° d ONLN d> †ö ¨ ),. If a frame is needed for a   ° d ONLN d[ ¨ ¯ ∏ ( µ ¯speciﬁ  Ó  ° d ONLN db ¨ ∏˚ )3c DDK, it is discussed in that DDK’s documentation.  ° d ONLN dñ ª ú « ∞ ( ƒ úRaw Ö  ° d ONLN dô ª ∞ « ƒ ) part  ° d ONLN dü ª ¯ « ˇ )HA  ∫† ° d ONLN d† ª ˇ «' )	 raw part  ;` ° d ONLN d© ª( «. )) c +† ° d ONLN d´ ª/ «H )onsist @ ° d ONLN d± ªI «M )s  T@ ° d ONLN d≤ ªM «‰ )# of raw binary data. The format, cr  À‡ ° d ONLN d’ ª‰ « )óeation, and  ° d ONLN d· « ¯ ”º ( – ¯.handling of raw parts is left to the developer  k@ ° d ONLN d «Ω ”ø )≈;  Î@ ° d ONLN d «ø ” ) no tools ar …‡ ° d ONLN d « ”	 )1e curr BÄ ° d ONLN d" «
 ”" )ently  ° d ONLN d( ” ¯ ﬂ ( ‹ ¯pr  G  ° d ONLN d* ” ﬂ )
Aovided for generating raw part data. If raw data is needed for a   ° d ONLN dk ﬂ ¯ Î ( Ë ¯speciﬁ  Ó  ° d ONLN dr ﬂ Î )c  ﬁ` ° d ONLN dt ﬂ Î4 )DDK,   ° d ONLN dx ﬂ5 Îñ ) it is discussed in that   í‡ ° d ONLN dë ﬂñ ÎØ )aDDK’ ¿ ° d ONLN dï ﬂ∞ Î¸ )s documentation. 
ˇˇˇˇˇˇˇˇ 4 ñ F † H 4 Ω F ” H 4 · F Î H ˇ¿    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>2  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Parts of  ÇÍ )1Y  Ç )our Product  4⁄ <˙
      
         (‡ <2-4       	 )BPackages     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇå    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h3  
         4⁄ ú˙( ,  	Helvetica              (‡ úThe DDK Disks      
 ,  (‡3-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú wπ ( p úDeveloping Using DDKs   ä* ( p3    
         ° d ONLN d   ú, ¢ () úT µ¿ ° d ONLN d   °,  )o develop softwar  E@ ° d ONLN d *  Ò,g )Pe using DDKs, you need to  ,  Zapf Dingbats     ° d ONLN d D6 ú> † (< ún    
 ° d ONLN d F3 ®? Æ )L  õ¿ ° d ONLN d G3 Æ?  )oad the DDK ﬁ  S¿ ° d ONLN d U3 Ò?- )Cles onto your  ø‡ ° d ONLN d c3-?i )<development  ¶Ä ° d ONLN d o3j?à )=system     ° d ONLN d vH úP † (N ún    
 ° d ONLN d xE ®Q )Develop your softwar 9‡ ° d ONLN d åE	Q )ae      ° d ONLN d éZ úb † (` ún    
 ° d ONLN d êW ®c ± )Pr N† ° d ONLN d íW ≤c ≈ )
epar ﬂ` ° d ONLN d ñW ≈c )e your softwar   ° d ONLN d §Wc; )Ae for deliver  ™` ° d ONLN d ±W;c@ )5y   
i ZÑ( 4j ZÑ(  
î Zú( 4ï Zú( p ñ Zñ.ñ Zñ.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN d ¥Å Zî d (è ZT ì‚ ° d ONLN d µÅ dî À )
he DDK Disks   V˛ (è 3    
         ° d ONLN d √• ú± ‚ (Æ úThe contents of   ô  ° d ONLN d ”• ‚± ˙ )Fthe D  ≥† ° d ONLN d ÿ• ˙±∏ ))DK disks vary somewhat, but they usually   ã‡ ° d ONLN d•π±˛ )øcontain several  ° d ONLN d≤ úæ (ª úimportant folders and ﬁ =` ° d ONLN d)≤æ )jles. ¨` ° d ONLN d-≤æ )   ,` ° d ONLN d.≤æ )T  b  ° d ONLN d/≤æk )o install the DDK:     ° d ONLN dB» ú– † (Œ ún    
 ° d ONLN dD≈ ®— ˘ )Drag the folders fr  ¸  ° d ONLN dW≈ ˘—$ )Q	om the Pr  ÒÄ ° d ONLN d`≈$—˘ )+2oducts folder on the distribution disk into the Pr t@ ° d ONLN dí≈˙— )÷oducts   ° d ONLN dô— ®› (⁄ ®folder in your MPW folder   ° d ONLN d≤—›  )v.      ° d ONLN d¥Ê úÓ † (Ï ún    
 ° d ONLN d∂„ ®Ô Ò )Drag the vt102 ﬁ ¿ ° d ONLN d«„ ÚÔ )Jle fr  \† ° d ONLN dÃ„Ô. )	om the Pr  R  ° d ONLN d’„.Ôl )+oducts:ARMT  z` ° d ONLN d‡„kÔ )=*ools folder on the distribution disk into  ° d ONLN d
Ô ®˚. (¯ ®your System:Extensions folder Å† ° d ONLN d'Ô.˚0 )Ü.      ° d ONLN d) ú † (
 ún    
 ° d ONLN d+ ®% )Drag the other folders and ﬁ "Ä ° d ONLN dH&; )~les fr ™` ° d ONLN dN; ).om the distribution disks into your MPW folder ° d ONLN d} ú π ( úThe Pr  ä` ° d ONLN dÉ π| )-oducts folder contains the following folders.  ° d ONLN d±" ú. ‰ (+ úExamples folder ° d ONLN d¡" ¯.q )\Contains example header ﬁ  ë  ° d ONLN d€"q.¶ )yles and sour Î‡ ° d ONLN dÁ"¶.∑ )5ce ﬁ ≤Ä ° d ONLN dÏ"∏.∆ )les. ° d ONLN dÒ1 ú= · (: úIncludes folder   ° d ONLN d1 ¯=j )\Contains system header ﬁ ˇ‡ ° d ONLN d1j=Ã )rles needed for linking.  ° d ONLN d3@ úL ’ (I úObject folder ° d ONLN dA@ ¯LD )\Contains object ﬁ  Û‡ ° d ONLN dS@DL® )Lles needed in building.  ∆Ä ° d ONLN dj@©L´ )e   ° d ONLN dlO ú[ • (X úPr  N† ° d ONLN dnO ¶[ ‡ )
oducts folder  ° d ONLN d|O ¯[2 )RContains the   ñ  ° d ONLN dâO2[P ):ARMT ∂@ ° d ONLN dçOO[} )
ools and T ÈÄ ° d ONLN dóO|[√ )-est Image folder ä  ° d ONLN dßO√[≈ )G.  ° d ONLN d©^ új ≥ (g úARM jÄ ° d ONLN d¨^ ¥j ∫ )T  †@ ° d ONLN d≠^ πj Í )ools folder  ° d ONLN d∫^ ¯j™ )?'Contains the MPW tools you’ll be using.   
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 3-0  *	T     )able 3-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4" F H 4` Fj H ˇ"Ä    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-2       	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h â ( e ~Th  r  ° d ONLN d  \ ä h ë )e  ]` ° d ONLN d  \ ë h ® )ARM  G‡ ° d ONLN d  \ © h Ø )T  }† ° d ONLN d  \ Æ h › )ools folder  ó¿ ° d ONLN d  \ › h Ù )/ has t ËÄ ° d ONLN d  \ Ù hC )he following tools Ö¿ ° d ONLN d + \D hF )P.  ° d ONLN d - l ~ x Ö ( u ~A G@ ° d ONLN d . l Ü x ≠ )RM6asm ° d ONLN d 5 l ⁄ x Ì )TThe  ]` ° d ONLN d 9 l Ì x3 )ARM assembler  N` ° d ONLN d F l3 x5 )F.  ° d ONLN d H { ~ á ü ( Ñ ~ARM6c ° d ONLN d N { ⁄ á Ì )\The  ]` ° d ONLN d R { Ì á8 )ARM C compiler Í` ° d ONLN d ` {7 á9 )J.  ° d ONLN d b ä ~ ñ Ø ( ì ~ARM6Link  ° d ONLN d k ä ⁄ ñ Ì )\The  ]` ° d ONLN d o ä Ì ñ! )
ARM linker ¯  ° d ONLN d y ä  ñ" )3.  ° d ONLN d { ô ~ • ¶ ( ¢ ~ARMCFr  ’† ° d ONLN d Å ô ¶ • ¥ )(ont  ° d ONLN d Ö ô ⁄ • )4
The C++ pr 8` ° d ONLN d è ô • )3e-pr   ° d ONLN d ì ô •? )ocessor  Ò  ° d ONLN d ö ô> •@ ).  ° d ONLN d ú ® ~ ¥ Ø ( ± ~DumpAOF ° d ONLN d § ® ⁄ ¥i )\An MPW tool that disassembles  Ù` ° d ONLN d ¬ ®i ¥¿ )èARM object format. ° d ONLN d ’ ∑ ~ √ ™ ( ¿ ~Hammer6 ° d ONLN d › ∑ ⁄ √ )\The debugger M  ° d ONLN d È ∑ √ )=.  Õ  ° d ONLN d Í ∑ √! ) T m¿ ° d ONLN d Ï ∑" √ÿ )	'he Hammer debugger is described in the     $  ° d ONLN d ∑Ÿ √ˇ )∑Hammer   ° d ONLN d √ ⁄ œ ( Ã ⁄User’s Guide     è  ° d ONLN d& √ œ )5.  ° d ONLN d( “ ~ ﬁ õ ( € ~Packer  ° d ONLN d/ “ ⁄ ﬁ5 )\An MPW tool that cr  8† ° d ONLN dB “6 ﬁ„ )\'eates a package that can be loaded and   ° d ONLN di ﬁ ⁄ Í ( Á ⁄	executed. [  ° d ONLN dr ﬁ Í )* P ‰† ° d ONLN dt ﬁ Í: )
ackages ar æ¿ ° d ONLN d~ ﬁ: Íf ).
e describe «@ ° d ONLN dà ﬁf Íy ),d in   ú¿ ° d ONLN dç ﬁz Í‘ )“Packages” on page   ]@ ° d ONLN d† ﬁ’ Í‚ )[2-2  ±  ° d ONLN d£ ﬁ‚ Í‰ ).  ° d ONLN d• Ì ~ ˘ á ( ˆ ~Pr  N† ° d ONLN dß Ì à ˘ µ )
	otocolGen  ° d ONLN d± Ì ⁄ ˘5 )RAn MPW tool that cr  8† ° d ONLN dƒ Ì6 ˘N )\eates  À@ ° d ONLN d  ÌN ˘Í )"p-class implementation templates a ‡ ° d ONLN dÏ ÌÎ ˘ )ùnd th  õ¿ ° d ONLN dÒ Ì ˘	 )e  ° d ONLN dÛ ˘ ⁄ ı ( ⁄glue n  † ° d ONLN d˘ ˘ ˆV )eeded to link them in. Ç@ ° d ONLN d ˘VX )`   @ ° d ONLN d ˘Yá )P-classes a  π  ° d ONLN d ˘áä ).r  ~  ° d ONLN d ˘ã∑ )
e describe ÜÄ ° d ONLN d& ˘∑  ),d in   \  ° d ONLN d+ ˘À )“P-Classes”  ° d ONLN d7 ⁄ ˇ ( ⁄on page   !¿ ° d ONLN d?  )&2-1  u† ° d ONLN dB ).  ° d ONLN dD ~  ï ( ~vt102 ° d ONLN dJ ⁄  · )\A  ∫† ° d ONLN dK · A ) Macintosh extension.   
& <A
 4' <A
  
Q <Y
 4R <Y
 p S <SS <S  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN db> <Q H (L <D Q" ° d ONLN dc> IQ ˆ )eveloping DDK Softwar  x< ° d ONLN dx> ˆQ ˝ )≠e    V˛ (L3    
         ° d ONLN d{b ~n ù (k ~DDK d ÿ` ° d ONLN dÄb ùn ” )evelopment   £@ ° d ONLN dãb ‘n ◊ )7r  h@ ° d ONLN dåb ÿn Ô )equir  Ä ° d ONLN dëb Ôn: )es that you take t ≈Ä ° d ONLN d£b:nç )Khe following steps:     ° d ONLN d∏u Å Ü (~ 1.  ° d ONLN dªu äÅ ï )Cr \  ° d ONLN dΩu ïÅ û )ea %† ° d ONLN døu üÅ ø )
te the h ‡` ° d ONLN d«u øÅ ⁄ ) eader    ° d ONLN dÕu €Å · )ﬁ  ¿ ° d ONLN dœu ·Å Î )le   @¿ ° d ONLN d“u ÎÅ ı )
an   ° d ONLN d‘u ˆÅ )d the  ã@ ° d ONLN dŸuÅ" ) sour  â‡ ° d ONLN dﬁu"Å3 )ce ﬁ PÄ ° d ONLN d„u4Å; )le Ä ° d ONLN dÂu<Åe )
 for your  <‡ ° d ONLN dÔueÅà ))	p-class i  Õ‡ ° d ONLN d¯uàÅ⁄ )#mplementation. M Ó@ ° d ONLN du⁄Å )Rany of the   ° d ONLN dÅ äç ô (ä äkits  v‡ ° d ONLN dÅ öç ¶ ) pr  æ  ° d ONLN dÅ ¶ç Ô )ovide example ﬁ  .† ° d ONLN d*Å çö )J)les that you can use as a starting point.  ¸‡ ° d ONLN dSÅöç≠ )™ For   Ù  ° d ONLN dXÅÆç≥ )k  É@ ° d ONLN dYÅ¥çæ )its  Î  ° d ONLN d\ÅæçÓ )
 that don’t  ° d ONLN dhç äô ì (ñ äpr  G  ° d ONLN djç îô » )
ovide these, † ° d ONLN dvç …ô_ )5! you can generate skeleton header  ` ° d ONLN dóç_ôa )ñ   ò` ° d ONLN dòçaôg )ﬁ  •  ° d ONLN döçgôz )les a    ° d ONLN düç{ôù )nd sour  ˇ‡ ° d ONLN d¶çúô≠ )!ce ﬁ ∆Ä ° d ONLN d´çÆô◊ )
les using  ° d ONLN dµô ä• ì (¢ äPr  N† ° d ONLN d∑ô î• √ )

otocolGen.    ° d ONLN d√´ ∑ Ü (¥ 2.  ° d ONLN d∆´ ä∑ ∑ )Implemen ’† ° d ONLN dŒ´ ∑∑ Õ )-t the  ı` ° d ONLN d‘´ Õ∑ Ì )p-class. û  ° d ONLN d‹´ Ó∑r )! This involves implementing r  P  ° d ONLN d˘´s∑ä )Öequir  g@ ° d ONLN d˛´ä∑π )	ed method  @ ° d ONLN d´∫∑÷ )0s plus   ° d ONLN d∑ ä√ – (¿ äimplementing y  ˘‡ ° d ONLN d∑ –√{ )F$our own private methods and function ë` ° d ONLN d@∑|√Ç )¨s.    ° d ONLN dD… ’ Ü (“ 3.  ° d ONLN dG… ä’ › )For some DDKs, cr  ˆ@ ° d ONLN dX… ›’ Ê )Sea ø‡ ° d ONLN dZ… Á’ ˆ )
te a K‡ ° d ONLN d^… ˜’K ) frame containing r  q  ° d ONLN dq…K’b )Tequir  à` ° d ONLN dv…b’Ô )"ed slots plus slots that you desir Ä ° d ONLN dò…’˜ )ée.    ° d ONLN dú€ Á Ü (‰ 4.  ° d ONLN dü€ äÁ ï )Cr \  ° d ONLN d°€ ïÁ' ) eate a package by combining the  ƒ  ° d ONLN d¡€'ÁG )íp-class, l† ° d ONLN d…€HÁç )! the frame, and  õ@ ° d ONLN dŸ€çÁí )Eg  *` ° d ONLN d⁄€ìÁ’ )lue code. Most   ¿ ° d ONLN dÈ€÷ÁÂ )Ckits † ° d ONLN dÌ€ÊÁË )   ° d ONLN dÓÁ äÛ À ( äcontain makeﬁ Ï¿ ° d ONLN d¸Á ÀÛ( )Ales to do this for you.     ° d ONLN d˘  Ü ( 5.  ° d ONLN d˘ ä ê )L  õ¿ ° d ONLN d˘ ê ö )oa @ ° d ONLN d˘ õ © )d y  <  ° d ONLN d˘ © Ì )our package int  ¿ ° d ONLN d-˘ Ó )Eo a N  ∆  ° d ONLN d2˘ )ewto û† ° d ONLN d6˘  )n  p  ° d ONLN d7˘! )- or load a ROM image and the package into an   ° d ONLN dd ä ƒ ( äArmistice car M  ° d ONLN dq ≈ À );d  h‡ ° d ONLN dr À Õ ).     ° d ONLN du # Ü (  6.  ° d ONLN dx ä# ¢ )Debu ï† ° d ONLN d| ¢# Ø )g y  3‡ ° d ONLN d ∞#Y )"our code using the Hammer debugger üÄ ° d ONLN d°X#Z )®.     ° d ONLN d§) 5 Ü (2 7.  ° d ONLN dß) ä5 ˝ )When your code works pr  @ ° d ONLN dæ) ˛5 )toperly ó‡ ° d ONLN dƒ)5' ), pr _  ° d ONLN d»)(5; )epar Ô¿ ° d ONLN dÃ);5~ )e it for delivery  ¨  ° d ONLN d›)~5É )C.  ° d ONLN d‡: ~F º (C ~These steps ar  èÄ ° d ONLN dÓ: ºF € )>e cover  Û¿ ° d ONLN dı: €F¢ )0ed in further detail in the sections that follow 7` ° d ONLN d%:¢F§ )«.   
k <r
 4l <r
 p m ~m
m ~m
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d'\ ~k µ (g ~	Creating  ∆ ° d ONLN d0\ µk æ )7Y  ØÃ ° d ONLN d1\ Ωk ‘ )our  =§ ° d ONLN d5\ ’k )Header ﬁ Ëb ° d ONLN d>\ká )7les and Source Files   €r )ˆ3       
         ° d ONLN dTw ~É Ñ (Ä ~Y @Ä ° d ONLN dUw ÑÉ ‹ )ou do not have to cr Ü  ° d ONLN diw ‹É  )Xeate   €† ° d ONLN dnw É )header ﬁ €` ° d ONLN dwwÉL )'les and sour 6  ° d ONLN dÉwMÉ^ )6ce ﬁ ¸¿ ° d ONLN dàw^Éo )les f  ø† ° d ONLN dçwpÉs )r  Ñ† ° d ONLN déwtÉ® )om scratch.  ° d ONLN dõâ ~ï ò (í ~Some  R‡ ° d ONLN d†â ôï ® )kits I¿ ° d ONLN d§â ©ï ˆ ) include example   C  ° d ONLN dµâ ˜ï )Nheader ﬁ B¿ ° d ONLN dæâïS )'les and sour ùÄ ° d ONLN d âSïd )5ce ﬁ d  ° d ONLN dœâeïv )les t  Ä ° d ONLN d‘âwïˆ )hat you can use as a starting  ° d ONLN dÚñ ~¢ æ (ü ~point for your  .  ° d ONLN dñ ø¢ ‚ )A	p-class i  ø  ° d ONLN d
ñ ‚¢d )#mplementation. The header ﬁ  •¿ ° d ONLN d&ñe¢£ )Éle has a name  ’  ° d ONLN d4ñ£¢µ )>like   ° d ONLN d9£ ~Ø Ñ (¨ ~E õ¿ ° d ONLN d:£ ÑØ ™ )xampleT  Ç@ ° d ONLN dA£ ™Ø )&ool.impl.h and the sour  ó  ° d ONLN dX£Ø" )gce ﬁ ]† ° d ONLN d]£#Ø† )le has a name like ExampleT  8¿ ° d ONLN dx£†Ø∑ )}ool.c. 
ˇˇˇˇˇˇˇˇ 4 ^ ( x * 4 å ( ¥ * 4 Ô (R * 4w (ô * 4≠ (∑ * 4› (Á * 4 ( * 4^ (¢ * ˇ¬    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ úDeveloping DDK Software      
 ,  (‡3-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ” ( e úIf example ﬁ  πÄ ° d ONLN d  \ ” h Í )7les ar ÌÄ ° d ONLN d  \ Í h )e not pr Ä ° d ONLN d  \ hU )#ovided with the  Ω@ ° d ONLN d + \U hc )Hkit, ˜  ° d ONLN d / \c hì ) or if you ﬁ ¥  ° d ONLN d < \î h )1nd you need to generate a fr ` ° d ONLN d X \ h! )|esh  ° d ONLN d \ i ú u ø ( r ú	p-class i   ° d ONLN d e i ¿ u )$mplementation,   º  ° d ONLN d t i u )Hsee  ` ° d ONLN d x i u) )“Cr  Ë` ° d ONLN d { i( u )6eating a Skeleton P-Class Implementation Header File”  ° d ONLN d ± v ú Ç ¡ (  úon page   !¿ ° d ONLN d π v ¬ Ç œ )&3-3  u† ° d ONLN d º v œ Ç ‰ ) and   b¿ ° d ONLN d ¡ v Â Ç ı )“Cr  >¿ ° d ONLN d ƒ v ı Çƒ )-eating a Skeleton P-Class Implementation Sour  I@ ° d ONLN d Ò vƒ Ç )œce File” on page   N` ° d ONLN d v Ç )I3-4  ¢@ ° d ONLN d v Ç ).  ° d ONLN d à ú î ¢ ( ë úY @Ä ° d ONLN d à ¢ î Ù )ou can change the  G‡ ° d ONLN d à Ù î )R	p-class i  ÿ‡ ° d ONLN d# à în )#mplementation deﬁ  ˆ  ° d ONLN d5 àn î© )Wnition to add  ê‡ ° d ONLN dC à™ î∆ )<these i  ›@ ° d ONLN dJ à∆ î )mportant featur  † ° d ONLN dY à î )Ges:  ,  Zapf Dingbats     ° d ONLN d] û ú ¶ † ( § ún    
 ° d ONLN d_ õ ® ß Ø )V  ú` ° d ONLN d` õ Æ ß ˜ )ersion numbers.  D† ° d ONLN dp õ ¯ ß ˛ )JY    ° d ONLN dq õ ˛ ßJ )ou can give your   ©  ° d ONLN dÇ õJ ßm )L	p-class i  :  ° d ONLN dã õn ß$ )$'mplementation a version number so that   ° d ONLN d≤ ß ® ≥ ¬ ( ∞ ®if mor  J¿ ° d ONLN d∏ ß √ ≥I )e than one implementation is r ‡ ° d ONLN d÷ ßJ ≥g )áegister  W  ° d ONLN d› ßg ≥† )ed the most r  '† ° d ONLN dÍ ß° ≥Ó ):ecent one is used.     ° d ONLN d˝ º ú ƒ † ( ¬ ún    
 ° d ONLN dˇ π ® ≈ · )Capabilities.  ¨‡ ° d ONLN d π · ≈ Ë )9A  ÁÄ ° d ONLN d π Ë ≈ )E capability declaration says that your implementation can do certain   ° d ONLN dS ≈ ® —@ ( Œ ®#things. This allows the system to ﬁ Ä ° d ONLN dw ≈A —V )ônd a   † ° d ONLN d| ≈W —z )	p-class i  î† ° d ONLN dÖ ≈z — )#$mplementation based on a capability  ° d ONLN d© — ® › ( ⁄ ®rather than on a name.  ° d ONLN d¿ ‚ ú Ó ¢ ( Î úY @Ä ° d ONLN d¡ ‚ ¢ Ó )Oou can also add methods and data members that you need for your implementation.  ° d ONLN d Ù ú  ° ( ˝ úS ø¿ ° d ONLN d Ù °  ≠ )ee   ”  ° d ONLN d Ù ≠ 1 )“P-Class Implementation Deﬁ  G  ° d ONLN d1 Ù2 y )Önition” on page  î@ ° d ONLN dA Ùy Ü )G8-3  Ë  ° d ONLN dD ÙÜ © ) for mor ≤† ° d ONLN dL Ù™  )$e information on these   ° d ONLN dc ú ∂ (
 úfeatur  ¨  ° d ONLN di ∂ ¡ )es.   
+ Z2( 4, Z2( p - ú-(- ú-(  
ˇ·ˇ‚7Ç     ° d ONLN dm ú, (( úCreating a Skeleton   1¿ ° d ONLN dÅ	,9 )m	P-Class I  €@ ° d ONLN dä9,… )0mplementation Header File    ‘@ )Ë3       
 ° d ONLN d•2 ú> ¢ (; úT µ¿ ° d ONLN d¶2 °>, )o make an implementation of a  Ü@ ° d ONLN dƒ2->M )åp-class, .‡ ° d ONLN dÃ2N>k )! declar  ±‡ ° d ONLN d”2k> )'e your implementation as a subclass of   ° d ONLN d˙? úK ¨ (H úthe   ›` ° d ONLN d˛? ¨K œ )	p-class i  n` ° d ONLN d? –K )$nterface, and r  ˛@ ° d ONLN d?K. )?edeclar   ‡ ° d ONLN d?/Kã ) e the methods of the   @ ° d ONLN d2?åKØ )]	p-class i  ©@ ° d ONLN d;?ØK )#nterface in the subclass.  ° d ONLN dUL úX • (U úPr  N† ° d ONLN dWL ¶X∏ )
=otocolGen can do this for you, to save you work and avoid err  '  ° d ONLN dîL∏X (U∏ors. Use this MPW   ° d ONLN d¶Y úe › (b úcommand line: , 
 Courier   ° d ONLN d¥p ú|b *!ProtocolGen -ImplementationHeader  ° d ONLN dŸpb|g )∆∂      ° d ONLN d›~ ¿ä ˘ (á ¿ProtoInterface       ﬁ‡ ° d ONLN dÎ~ ˘ä )9.h ° d ONLN dÚ~ä )!∂  ° d ONLN dˆå ¿ò  (ï ¿-rename       ° d ONLN d˛å ò/ )0TProtoInterface  ˙† ° d ONLN då/ò` )? TProtoImpl       ¨Ä ° d ONLN dåaòf )2∂  ° d ONLN dö ¿¶ “ (£ ¿-o      ° d ONLN d ö “¶ Û )ProtoIm  Œ‡ ° d ONLN d'ö Û¶ )!	pl.impl.h       ° d ONLN d7ö>¶C )K∂  ° d ONLN d;® ¿¥ Ã (± ¿-p  ° d ONLN dD®>¥C )~∂  ° d ONLN dH∂ ¿¬ “ (ø ¿-i      ° d ONLN dK∂ “¬ )includesDir       x  ° d ONLN dV∂¬ )0   ° d ONLN d^∂>¬C )<∂  ° d ONLN dbƒ ¿– “ (Õ ¿-i      ° d ONLN deƒ “– )includesDir       x  ° d ONLN dpƒ–, )0:OS600:  ° d ONLN d~ƒ>–C )<∂  ° d ONLN dÇ“ ¿ﬁ “ (€ ¿-i      ° d ONLN dÖ“ “ﬁ )includesDir       x  ° d ONLN dê“ﬁ> )0
:CLibrary:   ° d ONLN dõÍ úˆH (Û ú)Replace the italic parts as indicated her Ã  ° d ONLN dƒÍHˆO )¨e.   ° d ONLN d«¸ ú ‹ ( úProtoInterface.h     ° d ONLN dÿ¸ ¯ )\The ﬁ  »Ä ° d ONLN dﬁ¸ )@le that contains the declaration of the p-class interface you ar &¿ ° d ONLN d¸$ (e   ° d ONLN d 	 ¯m ( ¯using. The .h extension is r  @` ° d ONLN d<	nÖ )vequir  W† ° d ONLN dA	Ö )ed by the sample makeﬁ /¿ ° d ONLN dX	Ò% )lles shipped  ° d ONLN dd ¯", ( ¯
with DDKs.    ° d ONLN do( ú4 ¢ (1 úT õ¿ ° d ONLN dp( ¢4 € )ProtoInterface    ° d ONLN d( ¯4 )VThe  ª¿ ° d ONLN dÉ(4 )type name for the p-class i  Ú` ° d ONLN dû(4¡ )tnterface you ar   ‡ ° d ONLN d≠(¬4· )Ce using  ˜Ä ° d ONLN d¥(·4„ ).    ° d ONLN d∂: úF À (C ú
TProtoImpl     ° d ONLN d¡: ¯F )\The  ª¿ ° d ONLN d≈:Fn )type name for p-class i  ï  ° d ONLN d‹:oF— )dmplementation you ar ‡ ° d ONLN d:“F· )ce cr è¿ ° d ONLN dÙ:·F˛ )eating.    ° d ONLN d¸L úX · (U úProtoImpl.impl.h     ° d ONLN dL ¯X )\The ﬁ  »Ä ° d ONLN dLX' )@le that contains the declaration for p-class implementation you  ° d ONLN dSY ¯e  (b ¯ar  E  ° d ONLN dUYe )	e cr √‡ ° d ONLN dYYeü )"eating. The .impl.h extension is r s  ° d ONLN d{Y†e∑ )êequir  ä@ ° d ONLN dÄY∑e )ed by the sample   ° d ONLN dëf ¯r (o ¯makeﬁ πÄ ° d ONLN dófr )les shipped with DDKs.   ° d ONLN dÆx úÑ À (Å úincludesDir    ° d ONLN d∫x ¯Ñ? )\The includes dir @¿ ° d ONLN d x@Ñ[ )Hectory òÄ ° d ONLN d–xZÑ\ ).  ° d ONLN d“ä úñ ¢ (ì úY @Ä ° d ONLN d”ä ¢ñ )ou can add any private ﬁ ≤‡ ° d ONLN dÏäñÖ )nelds or methods you want.  ° d ONLN dú ú® ≠ (• úHer `  ° d ONLN d	ú ≠® Á )e is a sample    ° d ONLN dú Ë® );	p-class i  •  ° d ONLN d ú®ô )#mplementation header skeleton: 
ˇˇˇˇˇˇˇˇ 4 k F ß H 4 « F — H 4 ‰ F  H 4  FK H 4ú F¶ H 4Ï Fr H 4û F® H ˇl    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-4       	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ < h ú ( e <IntelFlashCard.h  ° d ONLN d  j < v Ã *#include "CardHandler.h" ° d ONLN d * Ü < íP *.PROTOCOL TIntelFlashCard : public TCardHandler ° d ONLN d Y î < † B *{  ° d ONLN d [ ¢ < Æ f *public:  ° d ONLN d d ∞ N ºV +,PROTOCOL_IMPL_HEADER_MACRO(TIntelFlashCard);  ° d ONLN d í æ N   ú *TFlashCard *   ° d ONLN d ü æ ú   ¢ )N   ° d ONLN d † æ ¢  , )New(); // "constructor"  ° d ONLN d π Ã N ÿ ( ’ N!void Delete();    // "destructor" ° d ONLN d › Ë ` ÙÊ +ABoolean  RecognizeCard( TCardSocket* socket, TCardPCMCIA* card ); ° d ONLN d! ` x *long ° d ONLN d( ñ‡ )67InstallServices(TCardSocket* socket, TCardPCMCIA* card,  ° d ONLN dh ÃV +6ULong configNumber=0 ); ° d ONLN dÇ. `: x (7 `long  ° d ONLN dâ. ñ: )6PowerDownCard(void); ° d ONLN d†< `H x (E `long  ° d ONLN dß< ñH )6PowerUpCard(void); ° d ONLN d∫J <V H (S <};    ° d ONLN dΩb ~n ¢ +BThe deﬁ ≠‡ ° d ONLN d≈b ¢n ˇ )$nition of the method     ¬† ° d ONLN d⁄b ˇn )]New    ¬† ° d ONLN d›bnP ) has been alter  ˆ† ° d ONLN dÏbPnx )?
ed in the  Û  ° d ONLN dˆbynú ))	p-class i  Ñ  ° d ONLN dˇbùn‡ )$mplementation  /@ ° d ONLN db·nÍ )D fr  »  ° d ONLN dbÍn˙ )	om   ° d ONLN do ~{ — (x ~the way it was deﬁ  Ù` ° d ONLN d%o —{F )Sned in the p-class interface ±  ° d ONLN dAoG{— )v#; it is no longer static, and the ﬁ  ¥@ ° d ONLN deo—{ﬁ )ärst    ¶@ ° d ONLN dioﬂ{˝ )char*    ¶@ ° d ONLN dno˝{ˇ )   ° d ONLN do| ~à ⁄ (Ö ~parameter has been r  P† ° d ONLN dÉ| €à )]emoved.  o` ° d ONLN dä|à )&   ° d ONLN dåé ~ö Ñ (ó ~T †¿ ° d ONLN dçé Ñö ë )he     ª¿ ° d ONLN dêé ëö ó )N  ª¿ ° d ONLN dëé óö £ )ew   ª¿ ° d ONLN dìé £ö ∏ ) and     ®‡ ° d ONLN dòé πö › )Delete   ®‡ ° d ONLN dûé ›ö )$
 methods a (Ä ° d ONLN d®éö )1r  ÌÄ ° d ONLN d©éö` )e used in place of     ° d ONLN dºéaöë )P
C++ constr “¿ ° d ONLN d∆éëöÿ )0uctors and destr b  ° d ONLN d÷éŸö˘ )Huctors;  ° d ONLN dﬁõ ~ß Õ (§ ~you can overload    ü  ° d ONLN dÔõ Õß ﬂ )ONew    ü  ° d ONLN dÚõ ﬂß Ù ) and     å  ° d ONLN d˜õ ıß )Delete   å  ° d ONLN d˝õßê )$ as much as you want. The    U  ° d ONLN dõëßó )xO  U  ° d ONLN dõóß” )
peratorNew   U  ° d ONLN d"õ”ßË )< and     ° d ONLN d'® ~¥ “ (± ~OperatorDelete    ° d ONLN d5® “¥ ‘ )T      ° d ONLN d6® ’¥ )	methods a  ˇ† ° d ONLN d?®¥ )-r  ƒ† ° d ONLN d@®¥U )e used in place of   ﬂ@ ° d ONLN dS®U¥{ )Othe C++    Ú  ° d ONLN d[®{¥Å )&n  Ú  ° d ONLN d\®Å¥ç )ew   Ú  ° d ONLN d^®ç¥è )   r  ° d ONLN d_®ê¥£ )and    ﬂ@ ° d ONLN dc®£¥© )d  ﬂ@ ° d ONLN dd®©¥« )elete    ﬂ@ ° d ONLN di®«¥ˆ ) operators.  ˙† ° d ONLN dt®ˆ¥¯ )/   z† ° d ONLN du®˘¥ )If   ° d ONLN dxµ ~¡ £ (æ ~you use     ôÄ ° d ONLN dÄµ £¡ Â )%OperatorNew    ôÄ ° d ONLN dãµ Â¡ ˙ )B and     Ü† ° d ONLN dêµ ˚¡O )OperatorDelete   Ü† ° d ONLN dûµO¡ˇ )T( in a p-class implementation, they must  ° d ONLN d∆¬ ~Œ ¶ (À ~	be declar T@ ° d ONLN dœ¬ ¶Œ ≥ )(ed     π† ° d ONLN d“¬ ≥Œ ◊ )static   π† ° d ONLN dÿ¬ ◊Œ ‹ )$.       	 ° d ONLN d€‹ ~Á ñ (‰ ~NOTE        
 ° d ONLN d‡È ~ı& *'The header skeleton includes this line:    ° d ONLN dˇ ~  *PROTOCOL_IMPL_HEADER_MACRO(      ° d ONLN d#ˇ Å )¢ProtocolImplementation      €¿ ° d ONLN d9ˇÅá )a)  €¿ ° d ONLN d:ˇáç );    ° d ONLN d= ~ ∫ ( ~This is a macr  F  ° d ONLN dK ªL )=o that makes everything work pr  (¿ ° d ONLN djLh )ëoperly ∏` ° d ONLN dpg¥ ), and you should   ° d ONLN dÅ ~* í (' ~not r N@ ° d ONLN dÜ ì* ª )	emove it.  ,  Zapf Dingbats     ¸  ° d ONLN dê! ¿) ≈ )-u   
G <N
 4H <N
 p I ~I
I ~I
  
ˇ·ˇ‚7Ç     ° d ONLN dí: ~H Í (D ~Creating a Skeleton   1¿ ° d ONLN d¶: ÎH )m	P-Class I  €@ ° d ONLN dØ:H© )0mplementation Source File    ‘@ )Ë3       
 ° d ONLN d N ~Z æ (W ~Once you’ve ﬁ ∂¿ ° d ONLN dÿN æZ ı )@nished your  b† ° d ONLN d‰N ˆZ )8	p-class i  Û† ° d ONLN dÌNZÜ )#mplementation header ﬁ Ä ° d ONLN dNáZô )nle, y  _† ° d ONLN d	NôZ∏ )ou can   ‡ ° d ONLN dNπZ˘ ) use this MPW   ° d ONLN d[ ~g ” (d ~command line to cr  ”¿ ° d ONLN d/[ ”g) )Ueate a skeleton sour y  ° d ONLN dC[*g; )Wce ﬁ ?† ° d ONLN dH[<gh )le for you:    ° d ONLN dTr ~~D ({ ~!ProtocolGen -ImplementationSource ° d ONLN dÅrV~[ )ÿ∂      ° d ONLN dÖÄ ¢å ÷ (â ¢ProtocolImpl       ﬂÄ ° d ONLN dëÄ ÷å ‚ )4.h ° d ONLN dùÄVå[ )Ä∂  ° d ONLN d°é ¢ö ﬁ (ó ¢
-NoLibMain  ° d ONLN dµéVö[ )¥∂  ° d ONLN dπú ¢® ¥ (• ¢-i      ° d ONLN dºú ¥® „ )includesDir       x  ° d ONLN d«ú ‰® Í )0   ° d ONLN d“úV®[ )r∂  
ˇˇˇˇˇˇˇˇ 4d (Œ * 4 ( * 4< (Z * 4t (® * ˇ!l    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ úDeveloping DDK Software      
 ,  (‡3-5     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( , 
 Courier       
 ° d ONLN d   \ ¿ h “ ( e ¿-i      ° d ONLN d  \ “ h )includesDir       x  ° d ONLN d  \ h, )0:OS600:  ° d ONLN d  \b hg )`∂  ° d ONLN d " j ¿ v “ ( s ¿-i      ° d ONLN d % j “ v )includesDir       x  ° d ONLN d 0 j v> )0
:CLibrary:   ° d ONLN d ; Ç ú éH ( ã ú)Replace the italic parts as indicated her Ã  ° d ONLN d d ÇH éO )¨e.   ° d ONLN d g î ú † – ( ù úProtocolImpl     ° d ONLN d t î ¯ †A )\The name of the  QÄ ° d ONLN d Ñ îB †e )J	p-class i  ‚Ä ° d ONLN d ç îe †« )#mplementation you ar ^` ° d ONLN d ° î» †◊ )ce cr ›@ ° d ONLN d • î◊ †Ù )eating.    ° d ONLN d ≠ ¶ ú ≤ À ( Ø úincludesDir    ° d ONLN d π ¶ ¯ ≤? )\The includes dir @¿ ° d ONLN d … ¶@ ≤[ )Hectory òÄ ° d ONLN d œ ¶Z ≤\ ).  ° d ONLN d — ∏ ú ƒ ¢ ( ¡ úY @Ä ° d ONLN d “ ∏ ¢ ƒ ß )o  ∂  ° d ONLN d ” ∏ ß ƒ ’ )
u can add  ∂@ ° d ONLN d › ∏ ’ ƒ Ì ).any p  ò‡ ° d ONLN d ‚ ∏ Ó ƒ@ )rivate functions yo  v  ° d ONLN d ı ∏A ƒO )Su n  ŒÄ ° d ONLN d ¯ ∏O ƒ^ )eed  }Ä ° d ONLN d ˚ ∏_ ƒa ).   
 È Z ( 4 Í Z ( p  Î ú Î( Î ú Î(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d ˝ ⁄ ú È ü ( Â úI ?Ó ° d ONLN d ˛ ⁄ † È ˝ )mplementing a  ¯R ° d ONLN d ⁄ ˝ È0 )]P-Class    €r ( Â 3      
         ° d ONLN d  ú ¸ £ ( ˘ úA ∫† ° d ONLN d  £ ¸ • )   :† ° d ONLN d  ¶ ¸ … )	p-class i  À† ° d ONLN d!  … ¸q )#)nterface is an abstract class that declar  ¯  ° d ONLN dJ q ¸µ )®es the methods   €¿ ° d ONLN dY ∂ ¸π )Et    ° d ONLN dZ ∫ ¸ )he system needs to   ° d ONLN dm ˝ ú	 « ( ú	make the  ä  ° d ONLN dv ˝ «	 Ô )+	p-class w  â¿ ° d ONLN d ˝ 	 ))ork.   S` ° d ONLN dÑ ˝	
 )Y  ‡ ° d ONLN dÖ ˝
	 )ou   Ä ° d ONLN dà ˝	( )deﬁ  † ° d ONLN då ˝)	9 )ne t `  ° d ONLN dê ˝9	> )h  1` ° d ONLN dë ˝?	H )es 8  ° d ONLN dì ˝H	ì )	e methods in the   ` ° d ONLN d§ ˝î	∑ )L	p-class i  ©` ° d ONLN d≠ ˝∑	 )#mplementation sour S  ° d ONLN dø ˝	 )Zce   ° d ONLN d¬
 ú ¢ ( úﬁ å¿ ° d ONLN dƒ
 ¢ Æ )le.    ° d ONLN d»
 Ø µ )Y  —† ° d ONLN d…
 ¥ˇ )Gou can also add your own private methods to the implementation header ﬁ  ∂  ° d ONLN d
  ( le and  ° d ONLN d ú# ¨ (  údeﬁ r  ° d ONLN d ≠# Ω )ne t œÄ ° d ONLN d  Ω# ¬ )h  †‡ ° d ONLN d! √# ÷ )em i ¶‡ ° d ONLN d% ÷# )
n the sour ‘@ ° d ONLN d/# ),ce ﬁ ö‡ ° d ONLN d4# )le.  ° d ONLN d8) ú5 ¢ (2 úT †¿ ° d ONLN d9) ¢5 ◊ )he major dif ˘  ° d ONLN dE) ◊5 „ )5fer  €Ä ° d ONLN dH) „5( )ence between a   † ° d ONLN dW))5N )F	p-class a  (@ ° d ONLN d`)O5ô )&nd a class is that   „Ä ° d ONLN ds)ô5» )Jp-classes h  d  ° d ONLN d~)…5˚ )0ave certain  ° d ONLN dä6 úB ü (? úr E  ° d ONLN dã6 †B œ )estrictions. ‡ ° d ONLN dó6 –B )0 Most of these r ‰` ° d ONLN dß6B1 )Cesult fr µ¿ ° d ONLN dØ62Bi )om these thr º  ° d ONLN dª6iBá )7ee mor ›¿ ° d ONLN d¡6áBµ )e general r  ;  ° d ONLN dÃ6∂BÂ )/estrictions: ,  Zapf Dingbats     ° d ONLN dŸL úT † (R ún    
 ° d ONLN d€I ®U ≤ )Al /† ° d ONLN d›I ≥U ∏ )l  ò  ° d ONLN dﬂI ∏U Ê )p-classes e  ‡ ° d ONLN dÍI ÁUg )/xecute in memory that is deﬁ ñ¿ ° d ONLN dIgUâ )Äned as r OÄ ° d ONLN dIäU∞ )#ead-only +` ° d ONLN dI∞U≤ )&.  ´` ° d ONLN dI≤U¥ )       ° d ONLN d^ úf † (d ún    
 ° d ONLN d[ ®g Æ )Y  @Ä ° d ONLN d[ Æg ≥ )o  ∂  ° d ONLN d[ ≥g= )!u need to write code as if it wer  à  ° d ONLN d?[>gm )ã
e in ROM.  ¨@ ° d ONLN dI[mg— )/All such code must be  ° d ONLN d_g ®s (p ®position-independent.       ° d ONLN dv| úÑ † (Ç ún    
 ° d ONLN dxy ®Ö º )Ther  ¿ ° d ONLN d|y ΩÖU )&e is no static initialized data space. ° d ONLN d£ä úñA (ì ú%When you write the actual code for a  <¿ ° d ONLN d»äBñe )¶	p-class i  Õ¿ ° d ONLN d—äeñæ )#mplementation, you Ñ† ° d ONLN d„äøñ¡ )Z’  K‡ ° d ONLN d‰ä¬ñ  )ll do so in one or mor °@ ° d ONLN d˙ä ñ' )^e  ° d ONLN d¸ó ú£ û († ú.    ° d ONLN d˝ó ü£ £ )c  p@ ° d ONLN d˛ó ££ © ) s -@ ° d ONLN d ó ™£ π )our  n‡ ° d ONLN dó π£   )ce ﬁ 5Ä ° d ONLN dó À£T )!les. In exactly one of these sour  -@ ° d ONLN d)óT£e )âce ﬁ Û‡ ° d ONLN d.óe£ )$les you need to place the statement:   ° d ONLN dSÆ ú∫J (∑ úPROTOCOL_IMPL_SOURCE_MACRO (      ° d ONLN dpÆJ∫U )ÆIm õ  ° d ONLN drÆU∫\ )pl b` ° d ONLN dtÆ]∫â )
ementation ^† ° d ONLN d~Æä∫° )-Name      A  ° d ONLN dÇÆ¢∫¥ ) );    ° d ONLN dÜ¡ úÕ ⁄ (  úIf you used Pr  ∂@ ° d ONLN dî¡ ⁄Õa )>otocolGen to generate the sour Ù  ° d ONLN d≤¡aÕ' )á.ce code skeleton, this has been done for you.   
Î ZÚ( 4Ï ZÚ( p Ì úÌ(Ì úÌ(  
ˇ·ˇ‚7Ç     ° d ONLN d·ﬁ úÏ Ó (Ë úRestrictions on   ,@ ° d ONLN dÒﬁ ÔÏ )S	P-Class I  ’¿ ° d ONLN d˙ﬁÏs )0mplementations   ‘@ (Ë!3      
 ° d ONLN d
˜ ú ø (  ú	P-class i Ä ° d ONLN d˜ ¿ )$mplementations     ° d ONLN d" ú † ( ún    
 ° d ONLN d$
 ® ∑ )use  ç¿ ° d ONLN d'
 ∑ π )     ¿ ° d ONLN d(
 ∫ Ã )New    ¿ ° d ONLN d+
 Ã · ) and     ˙‡ ° d ONLN d0
 · )Delete   ˙‡ ° d ONLN d6
ë )$ methods in place of C++ constr  l† ° d ONLN dU
íŸ )çuctors and destr ¸  ° d ONLN de
ŸÙ )Guctors     ° d ONLN dl ú' † (% ún    
 ° d ONLN dn ®( Ω )have ¡@ ° d ONLN dr Ω( « ) a   ¡@ ° d ONLN du «( ” )
dif  Î† ° d ONLN dx ”( ﬂ )fer  Œ  ° d ONLN d{ ﬂ( ¯ )ent m  ˇÄ ° d ONLN dÄ ¯(# )
eans of pr h  ° d ONLN dä$(‡ ),+oviding special allocation and deallocation  =@ ° d ONLN dµ·(% )Ω than that used  ° d ONLN d≈( ®4 (1 ®for C++ style objects     ° d ONLN d€= úE † (C ún    
 ° d ONLN d›: ®F ´ )r  E  ° d ONLN dﬁ: ¨F √ )equir  \@ ° d ONLN d„: √F « )e  %‡ ° d ONLN d‰: »Fi )% special glue code for obtaining addr  }† ° d ONLN d	:iF≤ )°esses of function  üÄ ° d ONLN d:≤F∂ )Is      ° d ONLN dO úW † (U ún    
 ° d ONLN dL ®X Æ )d  õ¿ ° d ONLN dL ÆX “ )	efault ar  0  ° d ONLN d(L ”X )%gument expr  ±  ° d ONLN d3LX- )8essions  ·  ° d ONLN d;L-XJ )"must c +¿ ° d ONLN dALKX˛ ))onsist only of a single number or identiﬁ  Ü  ° d ONLN dkL˛X )≥er     ° d ONLN dna úi † (g ún    
 ° d ONLN dp^ ®j ≈ )cannot J‡ ° d ONLN dv^ ∆j	 ) have subclasse  Ù  ° d ONLN dÖ^	j )Cs      ° d ONLN dás ú{ † (y ún    
 ° d ONLN dâp ®|? )!cannot have inline methods declar  4@ ° d ONLN d™p@| )ò)ed in the body of the p-class declaration      ° d ONLN d‘Ö úç † (ã ún    
 ° d ONLN d÷Ç ®é ≈ )cannot J‡ ° d ONLN d‹Ç ∆é Ÿ ) deﬁ Ω  ° d ONLN d·Ç Ÿéw )$ne operator functions (for example,    ‡ ° d ONLN dÇxé∫ )üoperator ==    ‡ ° d ONLN dÇ∫éΩ )B)      ° d ONLN dó úü † (ù ún    
 ° d ONLN dî ®† ‹ )Cannot use   ˇ` ° d ONLN dî ‹†  )4non-   kÄ ° d ONLN d#î Ò† )const    kÄ ° d ONLN d(î† )   ÎÄ ° d ONLN d)î†| )global or static variables     ° d ONLN dD© ú± † (Ø ún    
 ° d ONLN dF¶ ®≤ ≈ )cannot J‡ ° d ONLN dL¶ ∆≤ » )    ‡ ° d ONLN dM¶ »≤ ÿ )deﬁ  Ω  ° d ONLN dQ¶ Ÿ≤ ˇ )ne and u L@ ° d ONLN dY¶ ≤Ó )'7se any code that has virtual methods or that derives fr  Z  ° d ONLN dê¶Ó≤ )Óom classes   ° d ONLN dõ≤ ®æ (ª ®with virtual method »‡ ° d ONLN dÆ≤æ )Ys  
ˇˇˇˇˇˇˇˇ 4 ^ F h H 4 Ñ F	 H 4 Fg H 4{ F£ H 4‡ Fé H 4® Fæ H ˇ∏    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-6       	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h Ñ ( e ~T †¿ ° d ONLN d  \ Ñ h Ë )hese details of writing  ˛Ä ° d ONLN d  \ Ë h )d	p-class i  èÄ ° d ONLN d " \ h_ )$mplementations ar  º† ° d ONLN d 3 \_ hØ )Se discussed in the   5@ ° d ONLN d F \∞ h’ )Q	sections   ° d ONLN d O i ~ u Â ( r ~immediately following.   
 è < î
 4 ê < î
 p  ë ~ ë
 ë ~ ë
  
ˇ·ˇ‚7Ç     ° d ONLN d f Ñ ~ ê Ö *U  ∏  ° d ONLN d g Ñ Ö ê´ );sing New/Delete Methods Instead of Constructors/Destructors    ‡ ( ç3        ° d ONLN d § ñ ~ ¢ Ñ ( ü ~Y @Ä ° d ONLN d • ñ Ñ ¢ )ou cannot use C++ style constr  ‡ ° d ONLN d √ ñ ¢S )àuctors and destr ∞@ ° d ONLN d ” ñS ¢| )G
uctors in  »‡ ° d ONLN d › ñ| ¢ü ))	p-class i  Y‡ ° d ONLN d Ê ñ† ¢Ï )$mplementations.  ° d ONLN d ˆ £ ~ Ø  ( ¨ ~Instead, if you want a “constr  ‹Ä ° d ONLN d £  Ø )Çuctor  A  ° d ONLN d £ Ø1 ),” deﬁ 3  ° d ONLN d  £2 ØF )ne a   , 
 Courier   Œ  ° d ONLN d% £F ØX )New    Œ  ° d ONLN d( £X ØŸ ) method; if you want a “destr  Ü‡ ° d ONLN dE £⁄ ØÒ )Çuctor  Î` ° d ONLN dJ £ Ø˙ ),”   ° d ONLN dM ∞ ~ º é ( π ~deﬁ r  ° d ONLN dQ ∞ è º £ )ne a       ° d ONLN dV ∞ § º » )Delete     ° d ONLN d\ ∞ » º Ò )$	 method.   ¢  ° d ONLN de ∞ Ò º ˜ ))Y  b† ° d ONLN df ∞ ˜ º» )/ou do not have to have either of these methods.  ° d ONLN dñ ¬ ~ Œ ï ( À ~Each    ]` ° d ONLN dõ ¬ ñ Œ ® )New    ]` ° d ONLN dû ¬ ® Œ Ï ) method must r ?Ä ° d ONLN d¨ ¬ Ï Œ )Deturn    ñ† ° d ONLN d≤ ¬ Œ )this   ñ† ° d ONLN d∂ ¬ Œ# ).  8@ ° d ONLN d∏ ¬# Œ* )A  r‡ ° d ONLN dπ ¬* Œ, )     Ú‡ ° d ONLN d∫ ¬, Œ> )New    Ú‡ ° d ONLN dΩ ¬> Œ‰ )& method typically follows this format:   ° d ONLN d‰ Ÿ ~ Â, ( ‚ ~TProtocol * implName :: New() ° d ONLN d Á ~ Û Ñ *{  ° d ONLN d ı ê& +<<<your initialization>>> ° d ONLN d  ê ÿ *return this; ° d ONLN d1 Í, )Z// required  ° d ONLN d= ~ Ñ ( ~}   ° d ONLN d?) ~5í *>If you have a class-type object that you want as a data member s  ° d ONLN d})í5Ó (2í, and that class has a  ° d ONLN dî6 ~B ô (? ~constr  ï  ° d ONLN dö6 ôB ∞ )uctor  ˘† ° d ONLN dü6 ØB' ), you need to take some car  ﬁ  ° d ONLN d∫6'B† )xe to make certain the constr 'Ä ° d ONLN d÷6°B‡ )zuctor is called. ° d ONLN dÁH ~T ﬂ (Q ~Suppose you have a ﬁ  °  ° d ONLN d¸H ﬂT )aeld of type    U` ° d ONLN dHT) )2TFoo   U` ° d ONLN dH)T} ) which has a constr  À@ ° d ONLN dH}T¬ )Tuctor taking an    X‡ ° d ONLN d/H√TÌ )Finteger    X‡ ° d ONLN d6HÌT )* and   ° d ONLN d;U ~a Ö (^ ~a        ° d ONLN d=U Üa § )void*       ° d ONLN dBU §a ¶ ):    ° d ONLN dDl ~x ∆ (u ~class TFoo {  ° d ONLN dQz ~Ü ® *public:  ° d ONLN d[à ¢î Ã +$TFoo(); ° d ONLN deñ ¢¢ *TFoo(int, void*);  ° d ONLN dy§ ¢∞ ∆ *// ... ° d ONLN dÄ≤ ~æ ä (ª ~};  ° d ONLN dÉŒ ~⁄2 *PROTOCOL TYourImplementation { ° d ONLN d¢‹ ~Ë ® *public:  ° d ONLN d¨Í ¢ˆ ∆ +$// ...  ° d ONLN dµ¯ ¢ ∫ *TFoo ° d ONLN dª¯ ∆ ‰ )$fFoo;  ° d ONLN d√ ¢ ∆ ( ¢// ...  ° d ONLN d  ~  ä ( ~};    ° d ONLN dÕ, ~8 Ñ *T  µ¿ ° d ONLN dŒ, É8 Ã )o initialize this ﬁ  X` ° d ONLN d‚, Õ8' )Jeld you would write    ° d ONLN dˆC ~O ﬁ (L ~#include <new.h>  ° d ONLN d
_ êk ¥ +// ...  ° d ONLN d{ ~á˛ (Ñ ~@TSomeInterface * TYourImplementation::New(int arg1, void * arg2)  ° d ONLN dRâ ~ï Ñ *{  ° d ONLN dVó ¢£ ∆ +$// ...  ° d ONLN d_• ¢±t *#(void) new(&fFoo) TFoo(arg1, arg2);  ° d ONLN dÖ≥ ¢ø ∆ *// ... 
ˇˇˇˇˇˇˇˇ 4 ^ ( ¢ * 4 (ø * ˇ¬    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ úDeveloping DDK Software      
 ,  (‡3-7     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( , 
 Courier       
 ° d ONLN d   \ ¿ h ( e ¿return this;  ° d ONLN d  j ú v ¢ ( s ú}   ° d ONLN d  Ç ú é ƒ *Suppose    «@ ° d ONLN d  Ç ƒ é )(fArrayOfFoo    «@ ° d ONLN d " Ç éD )B is an array of    {¿ ° d ONLN d 2 ÇE é] )?TFoo   {¿ ° d ONLN d 6 Ç] éµ ) objects such as this:   ° d ONLN d M ô ú • ¥ ( ¢ úTFoo  ° d ONLN d S ô ¿ • )$fArrayOfFoo[5];    ° d ONLN d c ¨ ú ∏ ¢ ( µ úY @Ä ° d ONLN d d ¨ ¢ ∏ )ou call the default constr [¿ ° d ONLN d ~ ¨ ∏Í )m3uctor for each element of the array with this code:    ° d ONLN d ≤ √ ú œb ( Ã ú!(void) new(&fArrayOfFoo) TFoo[5];   ° d ONLN d ‘ ÷ ú ‚ ƒ *	Similarly  õ@ ° d ONLN d › ÷ √ ‚ )', you should call    ˜  ° d ONLN d Ô ÷ ‚2 )Kdelete   ˜  ° d ONLN d ı ÷2 ‚; )$ fr  ê  ° d ONLN d ¯ ÷< ‚d )
om your    ◊‡ ° d ONLN d  ÷d ‚à )(Delete   ◊‡ ° d ONLN d ÷à ‚≤ )$
 function.  
 ¸ Z( 4 ˝ Z( p  ˛ ú ˛( ˛ ú ˛(  
ˇ·ˇ‚7Ç     ° d ONLN d Ò ú ˝ ¢ ( ˙ úS +Ä ° d ONLN d Ò £ ˝; )pecial Glue Code For Obtaining     ° d ONLN d1 Ò; ˝Æ )òAddresses Of Functions   ‡ )Á3         ° d ONLN dI ú ƒ ( úThe addr  ∏@ ° d ONLN dQ ƒ≥ )(7ess of a function is position-dependent, so you cannot   `  ° d ONLN dà¥π )o  ’† ° d ONLN dâπÁ )btain it dir M@ ° d ONLN dïË
 )/	ectly in   ° d ONLN dû ú ¡ ( ú	p-class c ò‡ ° d ONLN dß ¡0 )%ode. If you need the addr    ° d ONLN d¿1ª )p!ess of a function, you can get ar  ‘‡ ° d ONLN d·ªÎ )äound this r  <¿ ° d ONLN dÏÏ% )1estriction by  ° d ONLN d˙ ú) º (& úusing a ç  ° d ONLN d º)± ) 6n assembly-language glue function that passes the addr ˚  ° d ONLN d7±)˘ )ıess back to you.   €† ° d ONLN dH˘)ˇ )HY  ú  ° d ONLN dIˇ) )ou can   ° d ONLN dP* ú6 ¢ (3 úﬁ å¿ ° d ONLN dR* ¢6 Œ )	nd a macr  É  ° d ONLN d[* Œ6 ),o that does that in    ° d ONLN do* 6R )R
AsmGlue.i.  
P ZU( 4Q ZU( p R úR(R úR(  
ˇ·ˇ‚7Ç     ° d ONLN dzE úQ £ (N úD ∏  ° d ONLN d{E £Q ¿ )efault      ° d ONLN dÇE ¿Q- )Argument Expressions   ‡ (N"3        ° d ONLN dòW úc ¯ (` úAlthough you can pr µ  ° d ONLN d´W ¯c> )\ovide default ar Œ† ° d ONLN dªW>c® )Fgument values, the expr  I` ° d ONLN d“W©c˝ )kessions you give ar  1` ° d ONLN dÂW˝c& )T
e limited  ° d ONLN dÔd úp (m úto a single number or identiﬁ ‡ ° d ONLN ddp% )Åer ¿ ° d ONLN dd%p* ).    ° d ONLN dd)p/ )Y  ∞† ° d ONLN dd/pb )ou can expr  (@ ° d ONLN ddcp )4)ess the integer in any way you want. For   ° d ONLN dFq ú} ∆ (z ú	example,    ˙` ° d ONLN dOq ∆} ﬁ )*0x45   ˙` ° d ONLN dSq ﬁ} „ ),    ˙` ° d ONLN dUq „} )45483    ˙` ° d ONLN dZq} ), and    gÄ ° d ONLN d`q}> )'frog'   gÄ ° d ONLN dfq>}I )$ ar  ¨Ä ° d ONLN diqI}u )e all legal.  
ó Zú( 4ò Zú( p ô úô(ô úô(  
ˇ·ˇ‚7Ç     ° d ONLN dvå úò (ï úDon’t Create Subclasses   ‡ (ï"3        ° d ONLN dèû ú™ ¢ (ß úY @Ä ° d ONLN dêû ¢™ ÿ )ou cannot cr Ω@ ° d ONLN dúû ÿ™î )6*eate a subclass or a new implementation fr ∑¿ ° d ONLN d∆ûî™¨ )ºom a   @ ° d ONLN dÀû≠™– )	p-class i  í@ ° d ONLN d‘û–™ )#mplementation.    
ƒ Z…( 4≈ Z…( p ∆ ú∆(∆ ú∆(  
ˇ·ˇ‚7Ç     ° d ONLN d‰π ú≈ ∏ (¬ úDon’t   “  ° d ONLN dÍπ ∏≈ · )	Declare I  ° d ONLN dÛπ ‚≈ Ë )*n  õ¿ ° d ONLN dÙπ Ë≈ Í )l  c  ° d ONLN dıπ Î≈% )ine Methods  µ† ° d ONLN d π%≈Ô ):* by Giving Code in the P-Class Declaration   ‡ )˝3         ° d ONLN d,À ú◊ Ú (‘ úIn C++ classes, ther  a  ° d ONLN d@À Ú◊ )Ve ar o† ° d ONLN dDÀ◊∏ ))e two ways of declaring a method inline.   h† ° d ONLN dmÀ∏◊æ )∂Y  )  ° d ONLN dnÀæ◊# )ou can only use one of   ° d ONLN dÖÿ ú‰	 (· úthem with p-classes. Her  ì¿ ° d ONLN dùÿ	‰S )me is the way you     “  ° d ONLN dÆÿS‰a )Jcan     „@ ° d ONLN d±ÿa‰Œ ) use with p-classes, wher  ™` ° d ONLN d ÿœ‰ )ne you use the    ° d ONLN dÿÂ úÒ ¿ (Ó úinline    ° d ONLN dﬁÂ ¿Ò ‰ )$ keywor  y` ° d ONLN dÂÂ ‰Ò: )$d to indicate you ar W‡ ° d ONLN d˘Â:Ò¡ )V e going to give the inline code:   ° d ONLN d¸ úJ ( úPROTOCOL PInterface: PImple { ° d ONLN d9
 Æ  +int add1(int x);};  ° d ONLN dM ú$å (! ú(inline int PInterface::add1(int x){x++;}    ° d ONLN dv0 ú< *The other way you can declar 7¿ ° d ONLN dí0<# )É<e an inline method in C++ is to simply give the code in the  ° d ONLN dŒ= úI È (F úclass declaration.  G@ ° d ONLN d·= ÍI  )NY  ¿ ° d ONLN d‚= Ië )%ou cannot do this with a p-class. Her  u` ° d ONLN d=ëIŒ )°e is what you    ⁄‡ ° d ONLN d=ŒIÈ )=cannot    ?` ° d ONLN d=ÍI ) do with a   ° d ONLN d&J úV º (S úp-class:    ° d ONLN d/a úm ¸ *class NotProto { ° d ONLN dAo Æ{P +int add1(int x) { x++; } };  
ñ Zõ( 4ó Zõ( p ò úò(ò úò(  
ˇ·ˇ‚7Ç     ° d ONLN d]ã úó À (î ú	Don’t Deﬁ µ  ° d ONLN dgã Àó6 )/ne Operator Functions    ‡ (î"3        ° d ONLN d~ù ú© ¢ (¶ úY @Ä ° d ONLN dù ¢© · )ou cannot deﬁ  z  ° d ONLN dçù ·©u )?#ne operator functions as part of a   ¸@ ° d ONLN d∞ùu©ï )îp-class. 
ˇˇˇˇˇˇˇˇ 4 ^ F ‚ H 4 FQ H 4† F{ H 4ü F© H ˇ!™    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-8       	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
  
 g < l
 4 h < l
 p  i ~ i
 i ~ i
  
ˇ·ˇ‚7Ç  
 ° d ONLN d   \ ~ h: ( e ~&Don’t Use Non-Const Global Or Static V  A† ° d ONLN d & \: h_ )ºariables   ‡ ) 3         ° d ONLN d 0 n ~ z ˛ ( w ~Global and static variables ar  ≥` ° d ONLN d N n ˛ zË )Ä4e not position-independent, so you cannot use them.  ° d ONLN d É Ä ~ å ë ( â ~The   ]` ° d ONLN d á Ä ë åÄ )3ARM C compiler will generate position-independent r    ° d ONLN d ∫ ÄÅ åë )efer ≥@ ° d ONLN d æ Äë å˙ )ences for most forms of  ° d ONLN d ÷ ç ~ ô ´ ( ñ ~
constant d  f  ° d ONLN d ‡ ç ¨ ô˘ ).Nata, such as strings, but in general, if you need to make any code-to-data or  ° d ONLN d. ö ~ ¶ ª ( £ ~data-to-code r  M‡ ° d ONLN d< ö º ¶ Ã )>efer ˙  ° d ONLN d@ ö Ã ¶ ‰ )ences  ‡ ° d ONLN dE ö Â ¶ Á ),  ã‡ ° d ONLN dF ö Á ¶D ) you have to do it by  „Ä ° d ONLN d\ öD ¶J )]u  Í† ° d ONLN d] öJ ¶ ))sing assembly language that computes the   ° d ONLN dÜ ß ~ ≥ ì ( ∞ ~addr  |Ä ° d ONLN dä ß ì ≥ ∫ )
esses at r Á¿ ° d ONLN dî ß ∫ ≥Î )'Cun-time, and you need to write the assembly language code yourself.  ° d ONLN dÿ π ~ ≈ˆ ( ¬ ~SIf you need to pass values between functions and you do not want to write assembly  ° d ONLN d+ ∆ ~ “* *&language code, you can use function ar ¢@ ° d ONLN dQ ∆* “S )¨guments.      	 ° d ONLN dZ ‡ ~ Î î ( Ë ~Note:       
 ° d ONLN d` Ì ~ ˘ ë *The  ]` ° d ONLN dd Ì ë ˘∏ )@ARM C compiler generates position-independent string constants,  ° d ONLN d§ ˘ ~∏ ( ~Fso you can use string constants. This is mentioned because many other   ° d ONLN dÍ ~ µ *compilers pr M  ° d ONLN dˆ ∂t )8*oduce position-dependent string constants. ,  Zapf Dingbats     ?Ä ° d ONLN d!z )ƒu     
 åõ ° d ONLN d"ÄÇ )    
* </
 4+ </
 p , ~,
, ~,
  
ˇ·ˇ‚7Ç     ° d ONLN d$ ~+ ö (( ~Don’t   “  ° d ONLN d* ö+ ¨ )Deﬁ  µ  ° d ONLN d. ≠+ – )ne and   µ  ° d ONLN d5 –+1 )#Use Code that Has V  N  ° d ONLN dH2+v )birtual Methods   ‡ )“3         ° d ONLN dX1 ~= ˙ (: ~An important implication of O‡ ° d ONLN ds1 ˚= ˝ )}   œ‡ ° d ONLN dt1 ˝=c )the fact that p-classes n  
Ä ° d ONLN dç1d=v )geed  9Ä ° d ONLN dë1v=| )p  ;† ° d ONLN dí1|=˘ )osition-independent code is  ° d ONLN dÆ> ~J • (G ~	that you  ·‡ ° d ONLN d∑> •J ≈ )'cannot   ,¿ ° d ONLN dæ> ∆J )!use code that  €¿ ° d ONLN dÃ>J" )<derives  I  ° d ONLN d”>#J, )! fr  ·‡ ° d ONLN d÷>,Jˆ )	.om classes with virtual methods. In particular Ó‡ ° d ONLN d>ˆJ˚ ) ,  ° d ONLN dK ~W∆ (T ~Fmost Newton ROM classes have virtual methods, so you generally cannot   ]` ° d ONLN dLK«WÈ (T«derive f  aÄ ° d ONLN dTKÈWÏ )"r  &Ä ° d ONLN dUKÌW˝ )om   ° d ONLN dXX ~d ˝ (a ~classes in the Newton ROM.  Ë@ ° d ONLN dsX ˝d )(Y ¸† ° d ONLN duXdø )	,ou can instantiate those classes, though.) I Ä ° d ONLN d°X¿d )∫n addition, you  ° d ONLN d±e ~qÖ (n ~9can’t use some methods of ROM base classes because they r ŸÄ ° d ONLN dÍeÖqú (nÖequir ¿ ° d ONLN dÔeúqÎ )e that you supply  ‹  ° d ONLN deÏqÒ )Pa  ‹  ° d ONLN deÒq˘ )n  ° d ONLN dr ~~ ˙ ({ ~instance of a derived class fr  E@ ° d ONLN d"r ˚~Ø )})om a base class that has virtual methods.   
ú <£
 4ù <£
 p û ~û
û ~û
  
ˇ·ˇ‚7Ç     ° d ONLN dLè ~ù À (ô ~Doing Special   0¿ ° d ONLN dZè Àù[ )MAllocation and Deallocation    ‘@ (ô3      
 ° d ONLN dw£ ~ØÙ (¨ ~TThe p-class system normally allocates and deallocates space for you, and you almost   ° d ONLN dÀ∞ ~ºG *-certainly should not have to do anything spec  y  ° d ONLN d¯∞Hºa ) ial. (Y  ^  ° d ONLN dˇ∞aºÍ )ou might need to do your own   ° d ONLN dΩ ~…è (∆ ~@allocation and deallocation if, for example, you needed to call   , 
 Courier   ¿ ° d ONLN d\Ωê…“ (∆êNewClearPtr   ¿ ° d ONLN dgΩ“… )B instead of    ° d ONLN ds  ~÷ ¢ (” ~Malloc    ° d ONLN dy  ¢÷ ß )$.) ° d ONLN d|‹ ~Ë à (Â ~W ° d ONLN d}‹ àË ¢ )
hen a  Ï` ° d ONLN dÉ‹ ¢Ë » )	p-class o  
Ä ° d ONLN då‹ …Ë Ò )'bject is cr  ø¿ ° d ONLN dó‹ ÒËr )(eated, the object system calls     ≈¿ ° d ONLN d∂‹rËê )Åalloc    ≈¿ ° d ONLN dª‹êË ) to get space for the object.  ° d ONLN dŸÈ ~ı √ (Ú ~When it is destr  Ê@ ° d ONLN dÈÈ √ıA )Eoyed, the object system calls    ‰‡ ° d ONLN dÈBıZ )free   ‰‡ ° d ONLN dÈZık ) to r  a¿ ° d ONLN dÈlı∂ )elease the space.  ¿ ° d ONLN d"È∑ıΩ )KY  Õ@ ° d ONLN d#Èºı )ou can override    ° d ONLN d3ˆ ~ ú (ˇ ~alloc   ° d ONLN d8ˆ ú ± ) and     m  ° d ONLN d=ˆ ≤   )free   m  ° d ONLN dAˆ   ) if you need to. ° d ONLN dR ~ Ñ ( ~T µ¿ ° d ONLN dS É ≥ )o override     √† ° d ONLN d^ ≥ — )0alloc    √† ° d ONLN dc — ﬂ ), pr ä¿ ° d ONLN dg ‡J )ovide a method in your   Ô  ° d ONLN d~Jm )j	p-class i  ° d ONLN dán )$"mplementation or interface called    ° d ONLN d© ~! ¿ ( ~OperatorNew   ï  ° d ONLN d¥ ø!   )A. T   ¿ ° d ONLN d∑ …! ˘ )
o override     ÿ† ° d ONLN d¬ ˘! )0free   ÿ† ° d ONLN d∆! ), pr ü¿ ° d ONLN d  !Ñ )ovide a method called    Ú@ ° d ONLN d‡Ñ!ÿ )dOperatorDelete   Ú@ ° d ONLN dÓÿ!	 )T. Note that  ° d ONLN d˙" ~. † (+ ~these ar  ©  ° d ONLN d" †.Ò )"Me not operator functions, and you never call them yourself. If these methods   ° d ONLN dO/ ~; (8 ~$exist, the object system automatical    ° d ONLN ds/; )úl  Ô` ° d ONLN dt/;! )y  ~Ä ° d ONLN du/";- ) ca  n¿ ° d ONLN dx/.;É )lls them in place of     U` ° d ONLN dç/Ñ;¢ )Valloc    U` ° d ONLN dí/¢;∑ ) and     BÄ ° d ONLN dó/∏;– )free   BÄ ° d ONLN dõ/–;“ ).   
Y <`
 4Z <`
 p [ ~[
[ ~[
  
ˇ·ˇ‚7Ç     ° d ONLN dùL ~Z Á (V ~Making the System   0Ä ° d ONLN dØL ÁZ Ô )iA  ˙¿ ° d ONLN d∞L ÓZ )ware of  o¿ ° d ONLN d∏LZ! )+Y  V¿ ° d ONLN dπL ZQ )our Code   ‘@ )„3       
 ° d ONLN d√` ~l € (i ~As mentioned earlier  ÷  ° d ONLN d◊` ⁄l Ê )\, a  V  ° d ONLN d€` Ál
 )	p-class i  Á  ° d ONLN d‰`
l± )#'s essentially a class. When the system   í‡ ° d ONLN d	`≤lˇ )®or an application  ° d ONLN d	m ~y ≠ (v ~needs to cr *Ä ° d ONLN d	(m Æy ﬂ )0eate a new   r  ° d ONLN d	3m ﬂy )1	p-class o  ê@ ° d ONLN d	<myM )&bject, it uses the     Ω¿ ° d ONLN d	OmMyÉ )H	NewByName    Ω¿ ° d ONLN d	XmÉyË )6 function. For example:    ° d ONLN d	pÑ ~ê8 (ç ~screenDriver = NewByName("TScre ° d ONLN d	èÑ8ê> )∫e  ° d ONLN d	êÑ>ên )nDriver" ° d ONLN d	òÑnêû )0, "TMain ° d ONLN d	†ÑûêŒ )0DisplayD ° d ONLN d	®ÑŒê¯ )0river")  ° d ONLN d	ØÑ¯ê˛ )*;    ° d ONLN d	±ó ~£ ë († ~The     ª¿ ° d ONLN d	µó ë£ « )	NewByName    ª¿ ° d ONLN d	æó «£ … )6   ;¿ ° d ONLN d	øó  £ Ò )	function      ° d ONLN d	»ó Ò£ )'is given a   (  ° d ONLN d	”ó£A )-	p-class i  π  ° d ONLN d	‹óA£¿ )#nterface name followed by a  h† ° d ONLN d	¯ó¡£· )Äp-class  ° d ONLN d
 § ~∞ Ä (≠ ~i h` ° d ONLN d
§ Å∞ « )mplementation  ìÄ ° d ONLN d
§ «∞ ˜ )F
name. The    >@ ° d ONLN d
§ ¯∞. )1	NewByName    >@ ° d ONLN d
"§.∞] )6 function a  LÄ ° d ONLN d
-§]∞m )/sks  ’† ° d ONLN d
1§m∞v )th È` ° d ONLN d
3§v∞á )	e Pr † ° d ONLN d
7§à∞Ï )otocol Registry for the  ° d ONLN d
O± ~Ω £ (∫ ~	p-class c ò‡ ° d ONLN d
X± £Ω ’ )%ode identiﬁ  J` ° d ONLN d
d± ÷Ω* )3ed by those names. Ç` ° d ONLN d
v±*Ω, )T   
ˇˇˇˇˇˇˇˇ 4 è ( ¶ * 4 ‚ (q * 4• (º * 4ﬁ (Ë * 4¯ ( * 4b (Ω * ˇ     d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ úDeveloping DDK Software      
 ,  (‡3-9     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ± ( e úIn or j` ° d ONLN d  \ ± h — )der for  , 
 Courier   ˛` ° d ONLN d  \ — h ) 	NewByName    ˛` ° d ONLN d  \ h. )6	 to work:  ,  Zapf Dingbats     ° d ONLN d   r ú z † ( x ún    
 ° d ONLN d " o ® { ª )The  ª¿ ° d ONLN d & o ª { · )	p-class n  5¿ ° d ONLN d / o ‚ {{ )'#amed in the function call must be r  ∆@ ° d ONLN d R o{ {ò )ôegister  ` ° d ONLN d Y oô {◊ )ed with the Pr y‡ ° d ONLN d g o◊ { )>otocol Registry  …‡ ° d ONLN d v o { )A.  ° d ONLN d x { ® á ‡ ( Ñ ®When you cr -` ° d ONLN d É { · áØ )9.eate a package for a DDK, you give Packer the    Î† ° d ONLN d ± {Ø áÂ )Œ	-autoLoad    Î† ° d ONLN d ∫ {Â á& )6 switch. When  ° d ONLN d » á ® ìa ( ê ®*you specify that switch, Packer marks the   \  ° d ONLN d Ú áb ìÜ )∫	p-class s  A† ° d ONLN d ˚ áá ì )% o that when the Package Manager  ° d ONLN d ì ® ü ( ú ®loads the package, it r ﬁ  ° d ONLN d2 ì üî )` egisters the package with the Pr NÄ ° d ONLN dR ìï ü◊ )çotocol Registry  ûÄ ° d ONLN da ì÷ ü€ )A.  p‡ ° d ONLN dc ì€ ü· )Y  1` ° d ONLN dd ì· ü& )ou also need to  ° d ONLN dt ü ® ´ Õ ( ® ®	give the    D¿ ° d ONLN d} ü Œ ´ )&-autoRemove    D¿ ° d ONLN dà ü ´µ )B$ switch, so the Package Manager un-r :  ° d ONLN d¨ üµ ´ )•egisters the package.      ° d ONLN d¬ ¥ ú º † ( ∫ ún    
 ° d ONLN dƒ ± ® ΩT )%The system must have the name of the   ≥¿ ° d ONLN dÈ ±T Ωw )¨	p-class i  D¿ ° d ONLN dÚ ±x Ωª )$mplementation  Ô‡ ° d ONLN dˇ ±ª ΩΩ )C.  ° d ONLN d ¬ ú Œ ¢ ( À úY @Ä ° d ONLN d ¬ ¢ Œ0 )ou may wonder how the system zÄ ° d ONLN d ¬0 Œ2 )é   ˙Ä ° d ONLN d ¬2 ŒÇ )or an application f  è@ ° d ONLN d2 ¬É Œ® )Q	inds the     ° d ONLN d; ¬© ŒÃ )&	p-class i    ° d ONLN dD ¬Õ Œ )$mplementation  ° d ONLN dR œ ú € π ( ÿ úname.   Ô  ° d ONLN dX œ π €/ )That depends on the DDK. ° d ONLN dq · ú Ì ( Í úVThe Printer DDK has a frame part that you add to the package. The frame part contains   ° d ONLN d« Ó ú ˙{ *1the name. When the user wants to choose a printer  ô  ° d ONLN d¯ Ó{ ˙# )ﬂ), the OS looks at the frame parts of all   ° d ONLN d! ˚ ú ü ( úr E  ° d ONLN d" ˚ † Ω )egister  î  ° d ONLN d) ˚ Ω )Fed printer drivers and uses the information to build a chooser display Ä ° d ONLN do ˚" (. When the  ° d ONLN dz ú˝ ( úPuser chooses one of the printers, the OS gets the p-class implementation name fr  ÑÄ ° d ONLN d ˝ (˝om the  ° d ONLN d— ú!( ( ú!frame part of that printer driver É¿ ° d ONLN dÚ(!* )å.  ° d ONLN dÙ' ú3 (0 úMost other DDKs need corr G  ° d ONLN d'3! )z=esponding applications. If, for example, you want to use the   ° d ONLN dJ4 ú@ (= úCommunications DDK to cr  æ  ° d ONLN db4@ö ){eate a communications driver   ° d ONLN d~4ö@' )É , you or someone else will need  ° d ONLN dûA úM° (J ú;to write a communications application that uses that driver -  ° d ONLN dŸA°M" (J°. When the user wants to use  ° d ONLN dˆN úZ (W úyour communications facility  ‡ ° d ONLN dNZ )Å=, the user starts the application. The application then uses     ° d ONLN dO[ úg “ (d ú	NewByName   ° d ONLN dX[ “g Ë )6 to cr m  ° d ONLN d^[ Ëgs )eate the communications driver ©Ä ° d ONLN d|[sg' )ã*. Thus, the application needs to have the  ° d ONLN d¶h útÑ (q ú1p-class implementation name or have some way of ﬁ `‡ ° d ONLN dÿhÖtª )Ènding it out.   
ô Z†( 4ö Z†( p õ úõ(õ úõ(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dÊä úô • (ï úC wé ° d ONLN dÁä ¶ô )
reating a Frame    €r (ï 3      
         ° d ONLN d¯† ú¨ Õ (© úSome kits r é¿ ° d ONLN d† Õ¨ ‰ )1equir  ¶  ° d ONLN d† ‰¨ Î )e  Ô† ° d ONLN d
† Î¨  )a  Ô† ° d ONLN d† ¨% ) frame with  ¶‡ ° d ONLN d†&¨K )6	special c  ‡‡ ° d ONLN d †K¨p )%	ontents.   &  ° d ONLN d)†q¨x )&A  `¿ ° d ONLN d*†x¨˛ ) frame is a NewtonScript data  ° d ONLN dH≠ úπ ß (∂ ústr ﬁ  ° d ONLN dK≠ ßπ æ )uctur  c‡ ° d ONLN dP≠ øπ\ )'e that is similar to a C++ class or str  k‡ ° d ONLN dw≠\πt )ùuct. T F` ° d ONLN d}≠uπ¯ )he Newton OS uses the frame      ° d ONLN dô√ úÀ † (… ún    
 ° d ONLN dõ¿ ®Ã Æ )T  µ¿ ° d ONLN dú¿ ≠Ã] )&o determine what to do with the packag [† ° d ONLN d¬¿^Ãb )±e      ° d ONLN dƒ’ ú› † (€ ún    
 ° d ONLN d∆“ ®ﬁ Æ )T  µ¿ ° d ONLN d«“ ≠ﬁ ª )o ﬁ  ∏  ° d ONLN dÀ“ ªﬁ! )nd out the name of the   W@ ° d ONLN d‚“"ﬁE )g	p-class i  Ë@ ° d ONLN dÎ“Eﬁà )#mplementation      ° d ONLN d˘Á úÔ † (Ì ún    
 ° d ONLN d˚‰ ® Æ )T  µ¿ ° d ONLN d¸‰ ≠: )!o get information that will be pr   ` ° d ONLN d‰;\ )éesented  …¿ ° d ONLN d$‰\ç )! to the user ﬂ` ° d ONLN d0‰ç' )1# in a chooser or in some other form  ° d ONLN dTı ú ⁄ (˛ úEach DDK’s d  ∫  ° d ONLN d`ı ⁄[ )>ocumentation describes what  0Ä ° d ONLN d{ı\ô )Ç, if anything, i í@ ° d ONLN dãıô )=s needed in the frame for that   ° d ONLN d™ ú ™ ( úkit.   
3 Z:( 44 Z:( p 5 ú5(5 ú5(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dØ$ ú3 *$Building a Package   €r (/ 3      
         ° d ONLN d√: úF ¢ (C úY @Ä ° d ONLN dƒ: ¢F )ou have to make your   a` ° d ONLN dŸ:F( )c	p-class i  Ú` ° d ONLN d‚:(Fq )#mplementation i  ‡ ° d ONLN dÒ:rFä )Jnto a  è  ° d ONLN d˜:äFì )pr V@ ° d ONLN d˘:îF… )
otocol part f  ‹¿ ° d ONLN d:…F )5or inclusion in a  ° d ONLN dG úS≤ (P ú;package that can be placed on a Newton or in a Newton ROM.  /  ° d ONLN dSG≥Sπ (P≥Y Ô† ° d ONLN dTG∏S )ou then combine the  ° d ONLN dhT ú` • (] úpr  G  ° d ONLN djT ¶` ‡ )
otocol part w  –¿ ° d ONLN dwT ‡` Î ):ith  Ã‡ ° d ONLN dzT Ï`$ ) other parts t H‡ ° d ONLN dàT%`u )9o make a package.  ° d ONLN döf úr ü (o úI ﬁÄ ° d ONLN dõf ür ﬁ )n many of the  ã  ° d ONLN d©f ﬂr ˘ )@DDKs Ñ¿ ° d ONLN d≠f ˙r ˇ ),  Ñ¿ ° d ONLN dØf ˇr )t  «  ° d ONLN d∞frú )he MPW commands for compiling  ™` ° d ONLN dŒfùr∆ )õ
p-classes, Y† ° d ONLN dÿf«r )* generating the  ° d ONLN dËs ú ¡ (| únecessar  ¡Ä ° d ONLN ds ¡ „ )%y glue c 	  ° d ONLN d¯s ‰ê )#'ode, linking, and building a package ar  Æ† ° d ONLN d	sê£ )¨e alr  •† ° d ONLN d	$s£ƒ )eady pr  a@ ° d ONLN d	+s≈ )"ovided in the ﬁ  ä` ° d ONLN d	;s )Cle   ° d ONLN d	>Ä úå ° (â ú“ ° d ONLN d	?Ä °å Ø )Ma ı@ ° d ONLN d	AÄ Øå ø )keﬁ  Z¿ ° d ONLN d	EÄ ¿å — )le.”   ¿ ° d ONLN d	JÄ “å ÿ )T  -Ä ° d ONLN d	KÄ ÿåQ )he documentation for your  ÆÄ ° d ONLN d	eÄQåg )ykit w  ?` ° d ONLN d	jÄhå} )ill pr ?† ° d ONLN d	pÄ}å¨ )ovide instr  ¿‡ ° d ONLN d	{Ä¨å )/uctions for executing the  ° d ONLN d	ïç úô ∫ (ñ úmakeﬁ πÄ ° d ONLN d	õç ∫ô ¡ )le kÄ ° d ONLN d	ùç ¬ô “ ). Th ]† ° d ONLN d	°ç ”ô ¯ )	ose instr  qÄ ° d ONLN d	™ç ¯ô )%uctions  Ä ° d ONLN d	≤çô; )#typicall Ä ° d ONLN d	∫ç<ôF )!y l    ° d ONLN d	ΩçGô∞ )ook something like this:   ° d ONLN d	ÿ§ ¿∞™ (≠ ¿'Directory "{{local-dir}}ExampleDriver:" ° d ONLN d
≤ ¿æt *Make > Makeout && DoIt Makeout 
ˇˇˇˇˇˇˇˇ 4 q F { H 4 â F ì H 4 ≥ Fπ H 4‘ Fﬁ H 4< FF H 4V Fr H 4Ç Fô H ˇ     d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-10        	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h ’ ( e ~The build system cr U` ° d ONLN d  \ ’ h ˚ )W	eates a ﬁ  t¿ ° d ONLN d  \ ˚ h‹ )&3le called “Makeout,” which contains the build instr  ç  ° d ONLN d P \‹ h˛ )·uctions  ° d ONLN d X i ~ u Î ( r ~for a given compilation r —† ° d ONLN d q i Î u )mun, and  @ ° d ONLN d y i uY )%a folder called O  #@ ° d ONLN d ä iY uˆ )I$bjects, which contains intermediate  ° d ONLN d Æ v ~ Ç ó (  ~object  P  ° d ONLN d ¥ v ò Ç † ) ﬁ ‹‡ ° d ONLN d ∑ v † Ç ≥ )les a  K‡ ° d ONLN d º v ¥ Ç Á )nd binary ﬁ  ‡ ° d ONLN d » v Ë Ç ˆ )4les. ° d ONLN d Õ à ~ î ‘ ( ë ~During the build pr † ° d ONLN d ‡ à ’ î ˆ )Wocess, a I  ° d ONLN d Ë à ˆ î )!n MPW s  ÷@ ° d ONLN d Ô à îQ )(cript called   , 
 Courier   å` ° d ONLN d ¸ àR îj )4DoIt   å` ° d ONLN d  àj î… ) opens the Makeout ﬁ S  ° d ONLN d à  î‘ )`le.  Ö  ° d ONLN d à‘ îﬁ )
 U Ã` ° d ONLN d àﬁ î˙ )
sing a   ° d ONLN d! ï ~ ° ™ ( û ~selection ( Ó` ° d ONLN d, ï ™ ° ˇ ),video highlighting)  ÇÄ ° d ONLN d? ï  ° )V pr  …† ° d ONLN dB ï °@ )ocess, this ﬁ  ∏‡ ° d ONLN dP ïA °ÿ )5"le shows you the individual build  ° d ONLN dr ¢ ~ Æ ( ´ ~commands as they take place.   ‡ ° d ONLN dé ¢ Æ )Ñ I ˇ` ° d ONLN dê ¢ Æ )f ther u† ° d ONLN dñ ¢ ÆI )e is an err  7@ ° d ONLN d° ¢J Æ´ )+or during the build pr Ä ° d ONLN d∑ ¢´ Æ« )aocess,     F‡ ° d ONLN dæ ¢« Æﬂ )DoIt   F‡ ° d ONLN d¬ ¢ﬂ Æ˚ ) stops   ° d ONLN d… Ø ~ ª= ( ∏ ~(executing commands, closes the Makeout ﬁ  @ ° d ONLN dÚ Ø> ªõ )¿le, and leaves any err ﬂ  ° d ONLN d Øõ ªÒ )]or messages on the   ° d ONLN d º ~ » £ ( ≈ ~MPW W ì‡ ° d ONLN d  º £ » À )%	orksheet.  Ô  ° d ONLN d) º À » Õ )(   AÄ ° d ONLN d* º Œ » ‘ )Y    ° d ONLN d+ º ‘ » ˘ )ou can ﬁ Õ  ° d ONLN d4 º ˘ » )%x the pr ö  ° d ONLN d< º »R )"oblem, and r O` ° d ONLN dH ºS »á )8epeat the pr À† ° d ONLN dT ºá »† )4ocess. ° d ONLN d[ Œ ~ ⁄ û ( ◊ ~If your   0¿ ° d ONLN dc Œ ü ⁄ ≥ )!kit d  Ü` ° d ONLN dh Œ ≥ ⁄ ﬁ )
oes not pr R‡ ° d ONLN dr Œ ﬂ ⁄ˆ ),=ovide the necessary commands, or if you need to change them,   ° d ONLN dØ € ~ Á ö ( ‰ ~you’ll  £¿ ° d ONLN d∂ € ö Á √ )	need to u  „  ° d ONLN dø € √ Á ))nderstand the r  õ` ° d ONLN dŒ € Á3 )D
elevant Pr † ° d ONLN dÿ €4 Á[ )-otocolGe Ö‡ ° d ONLN d‡ €[ Ác )'n  ◊@ ° d ONLN d‚ €c Áh )a  ◊@ ° d ONLN d„ €h Áî )	nd Packer  	† ° d ONLN dÏ €ï Áõ )- c ˘‡ ° d ONLN dÓ €õ Á√ )ommand Ä ° d ONLN dÙ €ƒ Á» ))s  AÄ ° d ONLN dı €» Áﬁ ) (see  e† ° d ONLN d˚ €ﬁ Á )Chapter  ° d ONLN d Ë ~ Ù ™ ( Ò ~
4, “The Pr  ä` ° d ONLN d Ë ™ Ù ﬂ ),otocolGen T  w¿ ° d ONLN d Ë ﬂ Ù Ò )5ool” K  ° d ONLN d Ë Ú Ù ) and   8@ ° d ONLN d! Ë Ùw )Chapter 5, “The Packer T X  ° d ONLN d9 Ëv Ùà )nool” +Ä ° d ONLN d= Ëâ Ùé )). ˇ` ° d ONLN d? Ëé ÙÏ ) Making the package  ° d ONLN dS ı ~ Æ ( ˛ ~consists of   ‚@ ° d ONLN d_ ı Æ Í )0two phases; ﬁ  ï  ° d ONLN dm ı Î )=	rst, ther  ©` ° d ONLN dv ı )"e ar ∏  ° d ONLN dz ır )e several steps to cr  H` ° d ONLN dè ısé )Veate a     ° d ONLN dñ ıèò )pr Â  ° d ONLN dò ıòˆ )	otocol part; you then  ° d ONLN dÆ ~ Ä ( ~i h` ° d ONLN dØ Å î )nclu ôÄ ° d ONLN d≥ î „ )de it in a package.     ° d ONLN d» ! Ü ( 1.  ° d ONLN dÀ ä! ë )U  G@ ° d ONLN dÃ í! ß )se Pr  úÄ ° d ONLN d— ß!À )@otocolGen to generate assembly language glue needed for linking.    ° d ONLN d' 3 Ü (0 2.  ° d ONLN d' ä3 … )Compile your   {` ° d ONLN d#'  3 Ì )@	p-class i  ` ° d ONLN d,' Ó3G )$mplementation sour ∂  ° d ONLN d>'G3R )Yce.     ° d ONLN dC9 E Ü (B 3.  ° d ONLN dF9 äE € )Assemble the glue  æ  ° d ONLN dW9 €E › )Q.     ° d ONLN dZK W Ü (T 4.  ° d ONLN d]K äWπ )CLink your code with the glue and with libraries and system header ﬁ  È¿ ° d ONLN d°KπWƒ (Tπles ÿ¿ ° d ONLN d§K≈W« ).  ° d ONLN d¶Z äf ê (c äY @Ä ° d ONLN dßZ êf ‘ )ou have now cr QÄ ° d ONLN dµZ ‘f ˇ )D
eated a pr 
  ° d ONLN døZ f2 ),otocol part.    ° d ONLN dÕl x Ü (u 5.  ° d ONLN d–l äx ë )U  G@ ° d ONLN d—l íx
 )se Packer to build a packag  V‡ ° d ONLN dÏl
x )xe.  
ú <£
 4ù <£
 p û ~û
û ~û
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dÔç ~ú ≤ (ò ~Loading   “ ° d ONLN d˜ç ≤ú ª )4Y  ºû ° d ONLN d¯ç ∫ú )our Package    €r (ò3      
         ° d ONLN d® ~¥ (± ~Once you’ve built the package,  Ä ° d ONLN d#®¥ )â8 you can load it into a Newton using Newton Connection,  ° d ONLN d[µ ~¡® (æ ~Bthe way you load any package. The next section deals with loading   Œ@ ° d ONLN dùµ®¡‹ (æ®a package u /† ° d ONLN d®µ›¡ )5	sing the   ° d ONLN d±¬ ~Œ “ (À ~Hammer debugger F‡ ° d ONLN d¿¬ “ŒS )T, in case your package has err ﬂ¿ ° d ONLN dﬁ¬SŒc )Åors.  
Û <˙
 4Ù <˙
 p ı ~ı
ı ~ı
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d„‰ ~Û0 (Ô ~Using the Hammer Debugger   €r (Ô3      
         ° d ONLN d˛˙ ~ Ñ ( ~Y @Ä ° d ONLN dˇ˙ Ñ £ )ou can   ˛¿ ° d ONLN d˙ £ © )u  ‡ ° d ONLN d˙ ™ Æ )s  B‡ ° d ONLN d˙ Æ Ω )e H  ›‡ ° d ONLN d˙ Ω ﬁ )ammer  ¬  ° d ONLN d˙ ﬂ )"	to help d  @ ° d ONLN d˙ )(ebug   Ç¿ ° d ONLN d˙M )
your code. ° d ONLN d* ~ à ( ~W ° d ONLN d+ à Á )
hen you use Hammer ~  ° d ONLN d= Áù )_', you load it with a Newton ROM image.   ‡¿ ° d ONLN ddù£ )∂Y  °@ ° d ONLN de£Ò )ou must have the   ° d ONLN dv ~%j (" ~3ROM image for the kind of Newton you want to test.   
C <J
 4D <J
 p E ~E
E ~E
  
ˇ·ˇ‚7Ç     ° d ONLN d™6 ~D *Physically Connecting to the   âÄ ° d ONLN d«6Df )öArmistice Card   ‘@ )Î3       
 ° d ONLN d◊J ~V Ñ (S ~Y @Ä ° d ONLN dÿJ ÑV )!ou can connect your Macintosh dir  ∞Ä ° d ONLN d˘JVL )ôectly to an  O  ° d ONLN dJMVá )0Armistice car  @ ° d ONLN dJàVê );d  ∏  ° d ONLN dJêV )with a null modem cable,   ° d ONLN d-W ~cB (` ~0that is, a serial cable in which pins 2 and 3 ar  &Ä ° d ONLN d]WCcR )≈e cr •` ° d ONLN daWRc )'ossed over (pin 2 on the Macintosh end   ° d ONLN dàd ~p (m ~Yconnects to pin 3 on the Newton end of the cable; pin 3 on the Macintosh end connects to  ° d ONLN d·q ~}Ç *;pin 2 on the Newton end). This cable is also known as a dir  È† ° d ONLN dqÇ}˙ (zÇect serial cable and is often   ° d ONLN d:~ ~ä „ (á ~sold as a printer cable.  ù  ° d ONLN dS~ „ä È )eY  ]Ä ° d ONLN dT~ Èä )ou can use   K  ° d ONLN d_~ä˜ )1/Apple cable model M0197, part number 590-0552.   ° d ONLN déã ~ó∂ (î ~EThis is the same cable you use to connect your Macintosh to a Newton. 
ˇˇˇˇˇˇˇˇ 4 x ( ° * 4 › (3 * 4M (x * 4∑ (¡ * 4¸ (ó * ˇ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ úDeveloping DDK Software      
 ,  (‡3-11      (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ¢ ( e úY @Ä ° d ONLN d  \ ¢ hï )9ou install the cable between the serial connector on the   ÷  ° d ONLN d : \ï hœ )ÛArmistice car  £  ° d ONLN d G \– h );d and one of the   ° d ONLN d X i ú u! ( r úserial ports on the Macintosh.  è¿ ° d ONLN d w i! u' )ÖY  P@ ° d ONLN d x i' u )7ou can use either the modem serial port or the printer   ° d ONLN d Ø v ú ÇS (  ú+serial port; the modem port is the default.      	 ° d ONLN d € ê ú õ Ø *Note       
 ° d ONLN d ‡ ù ú © ≈ *Make sur ◊  ° d ONLN d Ë ù ≈ ©8 ))e that no other Macintosh  ° d ONLN d © ú µ Ω ( ≤ úsoftwar ‰¿ ° d ONLN d
 © Ω µB )! e is using the same serial port. ,  Zapf Dingbats     ` ° d ONLN d+ ¨H ¥M )ãu   
 “ Z Ÿ( 4 ” Z Ÿ( p  ‘ ú ‘( ‘ ú ‘(  
ˇ·ˇ‚7Ç     ° d ONLN d- ≈ ú ” Ô ( œ úUsing Hammer    ‘@ ( œ!3      
 ° d ONLN d< Ÿ ú Â ¢ ( ‚ úY @Ä ° d ONLN d= Ÿ ¢ Â Ë )ou need to conﬁ  9@ ° d ONLN dM Ÿ È Â ¯ )Ggur  îÄ ° d ONLN dP Ÿ ¯ Âz )e Hammer so that it works pr ôÄ ° d ONLN dl Ÿz ÂÕ )Çoperly with the car  *† ° d ONLN d ŸŒ Â )Td. In this case,   ° d ONLN dê Ê ú Úr ( Ô ú,Hammer displays an image of a Newton display  ı  ° d ONLN dº Êq ÚË )’. This section contains instr  }  ° d ONLN dŸ ÊÈ Ú )xuctions for  ° d ONLN dÂ Û ú ˇ ± ( ¸ úconﬁ  C‡ ° d ONLN dÍ Û ≤ ˇë ).guring Hammer and for using the Newton display ˆÄ ° d ONLN d Ûê ˇí )ﬁ.   
 Z( 4 Z( p  ú( ú(  
ˇ·ˇ‚7Ç     ° d ONLN d ú µ ( úConﬁ  ` ° d ONLN d ∂ ˇ )guring Hammer    ‡ ("3        ° d ONLN d.  ú, ≥ () úBefor Û¿ ° d ONLN d3  ≥, ˝ )e using Hammer B† ° d ONLN dA  ˝,W )J, you must make sur  ^¿ ° d ONLN dT W,Ü )Ze it is conﬁ º` ° d ONLN da Ü,ï )/gur  † ° d ONLN dd ñ,µ )ed corr  ` ° d ONLN dk µ, )ectly for use with an  ° d ONLN dÅ- ú9 ÷ (6 úArmistice car M  ° d ONLN dé- ◊90 );d. Follow these instr  Ä ° d ONLN d£-19S )Zuctions.    ° d ONLN d≠@ ùL § (I ù1.  ° d ONLN d∞@ ®L ” )	Open the   x  ° d ONLN dπ@ ”L  )+Arm T  ª† ° d ONLN dæ@ ÔL )ools folder  ` ° d ONLN d…@L  )/.     ° d ONLN dÃR ù^ § ([ ù2.  ° d ONLN dœR ®^È )BLaunch the Newton ROM image by dragging it onto the Hammer6 icon.  ° d ONLN da ®m ‚ *Alternatively  ˆ  ° d ONLN da ·m )9>, you can double-click on the Hammer6 icon. Hammer displays a  ° d ONLN d]m ®y … (v ®standar ±Ä ° d ONLN ddm …y ◊ )!d ﬁ  Z  ° d ONLN dhm ÿyª )1le dialog box allowing you to choose a ROM image.  ° d ONLN dö| ®à ı (Ö ®When Hammer ﬁ Æ¿ ° d ONLN d®| ıà‹ )M4rst comes up, you will initially see only one window ‡  ° d ONLN d‹|€à )Ê, labeled with   ° d ONLN dÎà ®î (ë ®the name of the image ﬁ   ° d ONLN dàîç )kle; this is the status window  ¿ ° d ONLN d àçîí )z.     ° d ONLN d$ö ù¶ § (£ ù3.  ° d ONLN d'ö ®¶d ))Once the message at the bottom changes fr  ·† ° d ONLN dPöd¶Ï )ºom Initializing to Stop and Rer  ¸¿ ° d ONLN doöÏ¶! )àun, click on   ° d ONLN d|¶ ®≤ ˙ (Ø ®the Stop button. Fr † ° d ONLN dè¶ ˚≤4 )Som the Conﬁ  ó  ° d ONLN dõ¶4≤É )9g menu, make sur “@ ° d ONLN d´¶É≤« )Oe these items ar  @ ° d ONLN dª¶«≤Ù )D
e checked: ° d ONLN d«µ æ¡ (æ æDefault Stdio On  ° d ONLN dŸƒ æ–  *Don't Sleep  ° d ONLN dÊ” æﬂ *Fake Battery Level ° d ONLN d˘‚ ®Ó ¿ (Î ®Ignor yÄ ° d ONLN d˛‚ ¿Ó. )e the other items for now  Z@ ° d ONLN d‚.ÓÎ )n&, checking them may make Hammer hang.       	 ° d ONLN d>˚ ú Ø ( úNote        
 ° d ONLN dC ú9 *#The Don’t Sleep setting in the Conﬁ  ›  ° d ONLN dg9s )ùg menu contr †¿ ° d ONLN dstñ );	ols a dif  f  ° d ONLN d|ó£ )#fer  HÄ ° d ONLN d£’ )ent kind of  ° d ONLN dã ú h ( ú/sleep than the sleep setting in the Newton’s pr ÁÄ ° d ONLN d∫h x )Ãefer ì† ° d ONLN dæy © )ences. The   Ç‡ ° d ONLN d…© √ )0ARM  ° d ONLN dÕ  ú, • () úpr  G  ° d ONLN dœ  ¶,— )
Cocessor has a sleep mode that is independent of the Newton’s sleep   ° d ONLN d, ú8 Â (5 úmode. The Conﬁ  U@ ° d ONLN d!, Ê8  )Jg menu contr   ° d ONLN d-,!8t );ols the sleep featur ¯  ° d ONLN dA,s8ï )R	e of the   ä  ° d ONLN dJ,ñ8∞ )#ARM  ° d ONLN dN8 úD • (A úpr  G  ° d ONLN dP8 ¶D ∆ )
ocessor  @ ° d ONLN dW8 ∆D » ) .      õ@ ° d ONLN dY; ÕC “ )u     
    ° d ONLN d\J ùV § (S ù4.  ° d ONLN d_J ®V Œ )In the W  † ° d ONLN dgJ ŒVP )&indows menu choose Display IÄ ° d ONLN dÅJOV" )Å., this will open the Newton display window on  ° d ONLN dØV ®b Î (_ ®the Macintosh.     ° d ONLN d¿h ùt § (q ù5.  ° d ONLN d√h ®t Ê )Quit Hammer    ° d ONLN dŒh Êt Ë )>.  ° d ONLN d–y úÖ ˚ (Ç úHammer is now conﬁ  <¿ ° d ONLN d„y ¸Ö )`gur  ò  ° d ONLN dÊyÖx )ed so that it will work pr ÷@ ° d ONLN d yxÖ )m"operly the next time you start it.  
ü Z§( 4† Z§( p ° ú°(° ú°(  
ˇ·ˇ‚7Ç     ° d ONLN d#î ú† ≈ (ù úLoading   ˙¿ ° d ONLN d+î ≈† À ))Y  Ë‡ ° d ONLN d,î À†- )our Program Into an  ›  ° d ONLN d@î-†t )bArmistice Card   ‡ )ı3         ° d ONLN dP¶ ú≤ ¡ (Ø ú	If you ar   ° d ONLN dY¶ ¬≤ Ò )&e using an   L¿ ° d ONLN dd¶ Ò≤+ )/Armistice car  ‡ ° d ONLN dq¶,≤s );d to test your pr  >` ° d ONLN dÇ¶s≤Ê )Gogram, follow these steps. 
ˇˇˇˇˇˇˇˇ 4 ^ F≤ H ˇ8    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-12        	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
    ° d ONLN d   \  h Ü ( e 1.  ° d ONLN d  \ ä h Û )Connect a serial cable fr  ∏@ ° d ONLN d  \ Û h¢ )i(om your Macintosh to the serial port of  ‹Ä ° d ONLN d D \¢ h‹ )ØArmistice car  ©† ° d ONLN d Q \› hÂ );d.    ° d ONLN d U n  z Ü ( w 2.  ° d ONLN d X n ä z µ )	Open the   x  ° d ONLN d a n µ z “ )+Arm T  ª† ° d ONLN d f n — z  )ools folder  ` ° d ONLN d q n  z )/.     ° d ONLN d t Ä  å Ü ( â 3.  ° d ONLN d w Ä ä å… )ALaunch the Newton ROM image by dragging it onto the Hammer6 icon.  àÄ ° d ONLN d ∏ Ä… åı ( â… Hammer   ° d ONLN d ¿ å ä ò ç ( ï är E  ° d ONLN d ¡ å é ò ∂ )
esets the  † ° d ONLN d À å ∂ ò· )(@Armistice, downloads a ROM image into it, and launches the image 5  ° d ONLN d å· òÊ ( ï·.   ° d ONLN d õ ä ß ƒ ( § äAlternatively ˆ  ° d ONLN d õ √ ß‰ )9>, you can double-click on the Hammer6 icon. Hammer displays a  ° d ONLN dY ß ä ≥ ´ ( ∞ ästandar ±Ä ° d ONLN d` ß ´ ≥ π )!d ﬁ  Z  ° d ONLN dd ß ∫ ≥ù )1le dialog box allowing you to choose a ROM image.  ° d ONLN dñ ∂ ä ¬ ™ ( ø äIf you’r  J` ° d ONLN dû ∂ ´ ¬ ∂ )!e r  r† ° d ONLN d° ∂ ∂ ¬˙ )Bunning MPW for DDKs, you can choose one of the Launch commands in  ° d ONLN d„ ¬ ä Œ ¿ ( À ä
the DDK_Pr  h† ° d ONLN dÌ ¬ ¿ Œ ˛ )6oducts menu.   ° d ONLN d˚ — ä › ù ( ⁄ äThe   ]` ° d ONLN dˇ — ù › ◊ )Armistice car  *Ä ° d ONLN d — ÿ ›B );d displays a Newton scr  ©  ° d ONLN d# —B ›• )jeen on the Macintosh.  È¿ ° d ONLN d9 —• ›´ )cY  ™@ ° d ONLN d: —´ ›Ô )ou can use this  ° d ONLN dJ › ä È ñ ( Ê äscr Ú@ ° d ONLN dM › ñ È^ )-een in the same way you use a Newton. It is r  L@ ° d ONLN dz ›_ Ès )…eferr  Î  ° d ONLN d ›s ÈË )ed to as a Newton for the r  ú` ° d ONLN dö ›È È )vest of   ° d ONLN d° È ä ı ∑ ( Ú äthese instr ˚¿ ° d ONLN d¨ È ∑ ı Ÿ )-uctions.    ° d ONLN d∂ ˚  Ü ( 4.  ° d ONLN dπ ˚ äA )+Make certain that the sleep setting on the   ]` ° d ONLN d‰ ˚Bh )∏Newton   ÷  ° d ONLN dÎ ˚h± )&is set to “never”.    ° d ONLN dˇ  Ü ( 5.  ° d ONLN d ä ê )Y  @Ä ° d ONLN d ê· )Hou can use either the NTK Inspector or the Hammer NewtonScript Inspector J` ° d ONLN dK·Ï (·. T Ä  ° d ONLN dNÎÚ )
o  ° d ONLN dP ä%V (" ä*bring up the Hammer NewtonScript Inspector  Ω† ° d ONLN dzV% )Ã), check the Default Stdio On item in the   ° d ONLN d£% ä1 ¢ (. äConﬁ  Í† ° d ONLN d®% ¢1 √ )g menu o‡ ° d ONLN dÆ% ƒ1 ∆ )".     ° d ONLN d±7 C Ü (@ 6.  ° d ONLN d¥7 äC )In the Inspector window type:  , 
 Courier   ° d ONLN d”M êY  +LoadPackage(NIL)       ° d ONLN dÂa m Ü (j 7.  ° d ONLN dËa äm ì )Pr N† ° d ONLN dÍa îm ª )
	ess Enter  @† ° d ONLN dÛa ªmT )'". The Macintosh displays a standar ã  ° d ONLN daTmb )ôd ﬁ  3† ° d ONLN dacmé )le dialog.      ° d ONLN d&s  Ü (| 8.  ° d ONLN d)s ä Ó )Choose your package.   T@ ° d ONLN d>s Ó( )dAlternatively   @ ° d ONLN dKs'˘ )9., you can simply type the package pathname in  ° d ONLN dy äã Æ (à ä	place of    m¿ ° d ONLN dÇ Øã ¡ )%NIL    m¿ ° d ONLN dÖ ¡ã √ ).     ° d ONLN dàë ù Ü (ö 9.  ° d ONLN dãë äùô );On the Newton, select “Connection” and “Macintosh Serial”.   h¿ ° d ONLN d∆ëöùÓ (ööThe tool should be  ° d ONLN dŸù ä©Q (¶ ä+automatically downloaded. (This step may fr Y  ° d ONLN dùQ©” )«eeze your Macintosh for appr ü  ° d ONLN d ù”© )Ç
oximately  ° d ONLN d*© äµw (≤ ä530 seconds. When it completes, the Inspector should r i` ° d ONLN d_©wµ˘ )Ìeport a successful download.   ° d ONLN d|µ ä¡ › (æ äThe Newton may r  ‹† ° d ONLN dåµ ›¡ )Seport an err •Ä ° d ONLN dòµ¡ )4or P@ ° d ONLN döµ¡y )	, which you can ignor  Û` ° d ONLN dØµy¡É )_e.)     ° d ONLN d¥« z” Ü (– z10. ° d ONLN d∏« ä”˛ )SOn the Newton, you can verify that your package has been successfully installed by   ° d ONLN d” äﬂ Û *going to the Memory pr 4  ° d ONLN d!” Ùﬂ )jefer ‡  ° d ONLN d%”ﬂ· )/ences and tapping the “Remove package” button.     ° d ONLN dT”‚ﬂË )ﬁY  ƒÄ ° d ONLN dU”ÁﬂÙ )ou   ° d ONLN dXﬂ äÎQ (Ë ä-should see your package, but don’t actually r T  ° d ONLN dÖﬂQÎ“ )«emove it, unless you want to.  å† ° d ONLN d§Ò z˝  (˙ z1    ° d ONLN d•Ò ˝ Ü )1. ° d ONLN d®Ò ä˝£ );See the Hammer manual for information on using the debugger  ¥¿ ° d ONLN d„Ò£˝• (˙£.  
 <
 4 <
 p  ~
 ~
  
ˇ·ˇ‚7Ç     ° d ONLN dÂ ~ ( ~Using Hammer ‘s Newton Display    ‡ (3        ° d ONLN d" ~. Õ (+ ~When you use an   x‡ ° d ONLN d" Õ. )OArmistice car  F  ° d ONLN d"". );7d, Hammer displays an image of a Newton display in the   ° d ONLN dY/ ~;  (8 ~newton MessagePad window  @@ ° d ONLN dq/ ; )Ç.  † ° d ONLN ds/; )Y  ”  ° d ONLN dt/
; )5ou operate in the Newton MessagePad window just like   ° d ONLN d©< ~H≠ (E ~Byou would with a Newton. Use the mouse to click, drag, write, draw     ° d ONLN dÎ<≠H√ (E≠, etc.  ‡ ° d ONLN dÚ<√H )At the bottom  ° d ONLN d I ~U` (R ~2of the window you will see a check box labeled Car  † ° d ONLN d2IaU )„#d Locked and a button labeled Power  ’@ ° d ONLN dUIU )§.  ° d ONLN dW[ ~g ° (d ~The Car ó¿ ° d ONLN d^[ °gì )#7d Locked checkbox is the equivalent of the physical car  WÄ ° d ONLN dï[îgÔ )Ûd lock switch on the   ° d ONLN d™h ~t – (q ~Newton. Make sur  œ‡ ° d ONLN d∫h –tM )Re the box is unchecked befor Í  ° d ONLN d÷hMtï )}e you install or r ˆÄ ° d ONLN dËhïtÂ )Hemove a PCMCIA øÄ ° d ONLN dˆhÂtÙ )P car t¿ ° d ONLN d˙hıt )d in   ° d ONLN dˇu ~Å é (~ ~the     ° d ONLN d	u éÅ » )Armistice car  L  ° d ONLN d	u …Åß );5d. (Unchecking the box is all that is necessary to “r  Í  ° d ONLN d	EußÅ¸ )ﬁemove” a PCMCIA  ≥  ° d ONLN d	Tu¸Å˛ )U   ° d ONLN d	UÇ ~é ã (ã ~car µ@ ° d ONLN d	XÇ ãé} )7d, so you can test your application's behavior when car  t` ° d ONLN d	èÇ~éì )Ûds ar    ° d ONLN d	îÇîéü )e r   ¿ ° d ONLN d	óÇüéÍ )emoved without   ° d ONLN d	¶è ~õ ß (ò ~
actually r  ﬁ† ° d ONLN d	∞è ßõ	 ))emoving the PCMCIA @ ° d ONLN d	¬è
õ )c car πÄ ° d ONLN d	∆èõ( )d fr n  ° d ONLN d	 è)õJ )om the   6† ° d ONLN d	—èJõÑ )!Armistice car  ¿ ° d ONLN d	ﬁèÖõê );d.)  
ˇˇˇˇˇˇˇˇ 4 ^ (õ * ˇ"    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ úDeveloping DDK Software      
 ,  (‡3-13      (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( ,  Zapf Dingbats       
 ° d ONLN d   \ ú g § ( d ús           k    ° d ONLN d  ^ Ø f ∏ )W  á† ° d ONLN d  ^ ∏ f € )	ARNIN  ‹† ° d ONLN d  ^ € f „ )#G        
         ° d ONLN d 
 i ú u ¢ ( r úY @Ä ° d ONLN d  i ¢ u ˆ )ou can install and r ∫¿ ° d ONLN d  i ˆ u> )Temove PCMCIA ¿ ° d ONLN d + i? uN )I car π  ° d ONLN d / iN ub )ds fr  ™† ° d ONLN d 4 ib uÉ )om the   s  ° d ONLN d ; iÉ uΩ )!Armistice car  @@ ° d ONLN d H iæ u∆ );d  ° d ONLN d J u ú Åø ( ~ úBwhile it is in operation, just like you can with a Newton. However  ¿ ° d ONLN d å uø Å÷ ( ~ø, it is   ° d ONLN d î Å ú ç≥ ( ä ú?easy to disconnect or jar the NuBus connection while doing so.  }@ ° d ONLN d ” Å≥ ç∫ ( ä≥A ∑‡ ° d ONLN d ‘ Å∫ ç÷ ) small   ° d ONLN d € ç ú ôS ( ñ ú(piece of tape stuck to the end of PCMCIA  &¿ ° d ONLN d çS ôb )∑ car ‹  ° d ONLN d çb ôí )d will aid r Q  ° d ONLN d çì ô⁄ )1emoving it. The  ° d ONLN d# ô ú • © ( ¢ úcar µ@ ° d ONLN d& ô © • Á )d is logically r ‡‡ ° d ONLN d6 ô Á •\ )>emoved as soon as the Car  ,` ° d ONLN dO ô] •€ )vd Lock switch is unchecked,  ° d ONLN dk • ú ± € ( Æ úso physically r O† ° d ONLN dz • ‹ ±# )@emoving the car  dÄ ° d ONLN dâ •# ±À )G'd is only necessary to actually change   ° d ONLN d∞ ± ú Ω © ( ∫ úcar µ@ ° d ONLN d≥ ± © Ω µ )ds.      é  ° d ONLN d∑ ¥ ª º ¡ )s     
 ° d ONLN dπ ¬ ú Œ! ( À úWThe Power button is the equivalent of the power switch on the Newton. Click on it once  ° d ONLN d œ ú € … *to put the   ÇÄ ° d ONLN d œ … € )-Armistice car  O† ° d ONLN d( œ €± );*d to sleep; click on it again to wake the  ?Ä ° d ONLN dR œ± €Î )≠Armistice car  † ° d ONLN d_ œÏ € );
d up. The  ° d ONLN di ‹ ú ËÉ ( Â ú4display will not actually go blank when you put the   \† ° d ONLN dù ‹É ËΩ )ÁArmistice car  )¿ ° d ONLN d™ ‹æ Ë );d to sleep, but input  ° d ONLN d¿ È ú ı ( Ú úwill be disabled as on the r  û  ° d ONLN d‹ È ıJ )veal Newton.  õ@ ° d ONLN dË ÈJ ıP )8Y  [¿ ° d ONLN dÈ ÈP ı )-ou can test your application's behavior when   ° d ONLN d ˆ ú8 ( ˇ ú#the Newton is put to sleep this way Ω@ ° d ONLN d9 ˆ79 )õ.  ° d ONLN d; ú Ò ( úThe Status window R` ° d ONLN dL Ò )UD, labeled with the name of the image, is used to start and stop the  ° d ONLN dê ú! ÷ ( úArmistice car M  ° d ONLN dù ◊!w );$d. It may stop occasionally when err J† ° d ONLN d¡w!ü )†	ors occur    ° d ONLN d ü! )(, when it does, use the GO   ° d ONLN dÂ" ú. À (+ úbutton to r W@ ° d ONLN d" À. )/Fesume. The RERUN button in this window is the equivalent of the Reset  ° d ONLN d6/ ú;G (8 ú'switch under the battery cover on the r Ä ° d ONLN d]/H;” )¨!eal Newton. Use it to do a soft r  ë¿ ° d ONLN d~/”;& )ãeset of the system.  ° d ONLN dí< úH ß (E ú(A  Ä ° d ONLN dî< ßH ¿ ) soft r  @ ° d ONLN dõ< ¿H Ò )eset stops r AÄ ° d ONLN dß< ÒHã )1#unning applications, but does not r  ﬂ` ° d ONLN d <ãH )öemove packages or user data.)  ° d ONLN dËN úZ• (W ú9In the Commands menu, you will also see Stop, Go, and Rer <¿ ° d ONLN d!N¶Z (W¶un command, and another   ° d ONLN d9[ úg" (d úcommand called Reload & Rer 0  ° d ONLN dT[#gí )áun. Use the Reload & Rer ¬Ä ° d ONLN dl[íg )oun command to do a full r  O¿ ° d ONLN dÖ[g$ )teset of  ° d ONLN dçh út ¨ (q úthe     ° d ONLN dëh ¨t Ê )Armistice car  L  ° d ONLN dûh Át );Jd. This is the equivalent of taking out both the batteries for a while on  ° d ONLN dËu úÅ ∞ (~ úthe r ¢` ° d ONLN dÌu ∞Å )Oeal Newton, which deletes any installed user data and packages and OS patches.   ° d ONLN d<Ç úé € (ã úQuitting and r  À  ° d ONLN dJÇ €éL )?estarting Hammer will pr û‡ ° d ONLN dbÇLéñ )qoduce a similar r  r‡ ° d ONLN dsÇñé≠ )Jesult. ° d ONLN dzî ú† £ (ù úA ∫† ° d ONLN d{î £†t ). window titled stdin/stdout/stderr will appear ô@ ° d ONLN d©ît†˘ )—. Some debugging messages fr † ° d ONLN d≈î˙† )Üom the   ° d ONLN dÃ° ú≠L (™ ú#Newton OS may appear in this window ∏‡ ° d ONLN dÔ°K≠P )Ø.  ã@ ° d ONLN dÒ°P≠V )Y  K¿ ° d ONLN dÚ°V≠ç )ou can ignor ç` ° d ONLN d˛°ç≠ú )7e it.  ° d ONLN d≥ úøΩ (º ú<When you load a package, a Package Loader window will appear  #@ ° d ONLN d@≥Ωø (ºΩ. Some text about the   ° d ONLN dV¿ úÃ1 (… ú package being loaded will appear  Ê† ° d ONLN dv¿0Ã5 )î.  π  ° d ONLN dx¿5Ã; )Y  yÄ ° d ONLN dy¿;Ãr )ou can ignor ª  ° d ONLN dÖ¿rÃÅ )7e it.  ° d ONLN dã“ úﬁ £ (€ úA ∫† ° d ONLN då“ £ﬁi )* window titled Hammer Listener will appear í  ° d ONLN d∂“iﬁ )∆%. This gives you an interface to the   ° d ONLN d€ﬂ úÎ ÷ (Ë úArmistice car M  ° d ONLN dËﬂ ◊ÎT );d similar to NTK’s Inspector )Ä ° d ONLN dﬂTÎÇ )}	. However  ∂  ° d ONLN dﬂÅÎ% )-', you can only type one line at a time   ° d ONLN d4Ï ú¯ (ı úin the Listener window  ‡ ° d ONLN dJÏ¯” )f0, and as soon as you start typing, the Newton fr ¨  ° d ONLN dzÏ”¯ )—eezes until you  ° d ONLN dä˘ ú Í ( úcomplete the line.  ° d ONLN dù úN *'The Listener is communicating with the   X  ° d ONLN dƒNà )≤Armistice car  %@ ° d ONLN d—â ); d over the NuBus, so it is much  ° d ONLN dÒ ú$ (! úUfaster than the Inspector with NTK which must use the serial port. Using the “trace”  ° d ONLN d	F% ú1∂ *?global variable for debugging may be possible with the Listener  ≈  ° d ONLN d	Ö%µ1∑ (.µ. ° d ONLN d	á7 úC ﬂ (@ úThe Listener pr ›† ° d ONLN d	ñ7 ﬂCú )C'ovides two additional commands which ar  ‹  ° d ONLN d	Ω7úC√ )Ω
e useful,  , 
 Courier   v‡ ° d ONLN d	«7ƒC )(LoadPackage    v‡ ° d ONLN d	“7C )B, and    ° d ONLN d	ÿD úP ¥ (M úLoad    ° d ONLN d	‹D ¥P ª ).    “` ° d ONLN d	ﬂD ªP ¡ )Y  í‡ ° d ONLN d	‡D ¡P° )/ou type these commands into the Listener window   ` ° d ONLN d
D°P¶ )‡.     ` ° d ONLN d
D¶PË )LoadPackage     ` ° d ONLN d
DËP )B will take a   ° d ONLN d
)Q ú]_ (Z ú,package built with NTK and load it into the   É  ° d ONLN d
UQ_]ô )√Armistice car  P@ ° d ONLN d
bQö]• );d.   >` ° d ONLN d
eQ•]´ )Y  ˛‡ ° d ONLN d
fQ™] )ou use this to test you  ° d ONLN d
~^ új (g úapplications. The syntax is     ›Ä ° d ONLN d
ö^ja )wloadpackage("      ›Ä ° d ONLN d
ß^aj« )Nfull path name to .pkg file       ûÄ ° d ONLN d
¬^»j‘ )g")   ûÄ ° d ONLN d
ƒ^‘j ) If you don't  ° d ONLN d
“k úwB (t ú%know the full path name to the .pkg ﬁ }` ° d ONLN d
¯kCwv )ßle, use this:    ˆ@ ° d ONLN dkvw÷ )3loadpackage(nil)   ˆ@ ° d ONLN dk÷w )` This will bring   ° d ONLN d'x úÑ ‘ (Å úup a Standar  ΩÄ ° d ONLN d3x ‘Ñ´ )83d File dialog that you can use to select the .pkg ﬁ  “¿ ° d ONLN dgx´Ñ )◊le to load.  (Hint—NTK   ° d ONLN d~Ö úë Œ (é úputs .pkg ﬁ µ¿ ° d ONLN däÖ Œë] )2"les in the same location as the pr ∑¿ ° d ONLN d¨Ö]ëy )èoject ﬁ  ç  ° d ONLN d¥Özëã )les.)  ° d ONLN d∫ó ú£ Ø († úThe     ª¿ ° d ONLN dæó Ø£ « )Load   ª¿ ° d ONLN d¬ó «£ ¸ )
 command r ˚† ° d ONLN dÃó ¸£> )5eads in a text ﬁ [Ä ° d ONLN d›ó?£ )C/le and executes each of the lines in the text ﬁ  ÏÄ ° d ONLN dó£  )√	le as if   ° d ONLN d§ ú∞ (≠ úit was typed into the Listener  ‰  ° d ONLN d4§∞_ )Ä. The syntax is:     Õ¿ ° d ONLN dE§`∞ )Dload("full path name of text   ° d ONLN db± úΩ ∆ (∫ úfile").   ° d ONLN di± ∆Ωk )*$ The load command will not accept a    ∏@ ° d ONLN dç±kΩ} )•nil    ∏@ ° d ONLN dê±}Ω≠ )
 parameter ‡ ° d ONLN dö±≠Ω≤ )0.  ﬁ@ ° d ONLN dú±±Ω∑ )Y  û¿ ° d ONLN dù±∑Ω )ou can use this featur œ‡ ° d ONLN d≥±Ω' )^e to   
ˇˇˇˇˇˇˇˇ 4 ^ FΩ H ˇ˙    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-14        	 )BDeveloping DDK Software      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h Ü ( e ~cr  µ@ ° d ONLN d  \ Ü h † )eate ﬁ † ° d ONLN d 	 \ ° hL )#les of commonly executed commands.   ` ° d ONLN d , \L hR )´Y  ¡‡ ° d ONLN d - \Q h≤ )ou can write whole pr  ’  ° d ONLN d B \≤ h˚ )aograms this way  ‡‡ ° d ONLN d Q \˙ hˇ )H,  ° d ONLN d S i ~ u ÷ ( r ~but doing so is not r —` ° d ONLN d h i ÷ u )Xecommended.        ° d ONLN d t Ö ~ ç ù ( ã ~IMPORT  Ä ° d ONLN d z Ö ù ç ® )AN íÄ ° d ONLN d | Ö ® ç ¨ )T        
 ° d ONLN d ~ ê ~ ú ë ( ô ~The   , 
 Courier   ª¿ ° d ONLN d Ç ê ë ú ” )loadpackage    ª¿ ° d ONLN d ç ê ” úÖ )B& command does not automatically stop r ª@ ° d ONLN d ≥ êÖ úß )≤unning   ° d ONLN d ∫ ú ~ ®≥ ( • ~Eapplications or unload the old packages for you as the NTK Inspector  ° d ONLN d ˇ ® ~ ¥ í *can.   î  ° d ONLN d ® í ¥ ò )Y  TÄ ° d ONLN d ® ò ¥ )ou need to do this yourself.   g` ° d ONLN d" ® ¥ ){Y  '‡ ° d ONLN d# ® ¥\ )ou can do it thr z‡ ° d ONLN d3 ®\ ¥¡ )Cough the Newton user   ° d ONLN dH ¥ ~ ¿ ‘ ( Ω ~interface (Extras, Pr   ° d ONLN d] ¥ ’ ¿ Â )Wefer À  ° d ONLN da ¥ Â ¿( )ences, Memory  À` ° d ONLN dn ¥' ¿u )B, Remove Softwar „‡ ° d ONLN d~ ¥u ¿¥ )Ne) or by using   ° d ONLN dç ¿ ~ Ã é ( … ~the     ›` ° d ONLN dë ¿ é Ã ‚ )removepackage    ›` ° d ONLN dü ¿ ‚ Ãk )Tglobal function in the Newton.     ÿÄ ° d ONLN dæ ¿l Ã∫ )äRemovepackage    ÿÄ ° d ONLN dÀ ¿∫ Ãº )N   ° d ONLN dÃ Ã ~ ÿ ƒ ( ’ ~takes a single ar ’  ° d ONLN d› Ã ƒ ÿY )F!gument, which is the package to r  »‡ ° d ONLN d˛ ÃY ÿ{ )ïemove.   @ ° d ONLN d Ã| ÿÇ )#Y  ﬁ¿ ° d ONLN d ÃÅ ÿª )ou can get at  ° d ONLN d ÿ ~ ‰ Á ( · ~your package using the    C  ° d ONLN d+ ÿ Ë ‰* )jgetpackages    C  ° d ONLN d6 ÿ* ‰ñ )B global function, which r  E† ° d ONLN dO ÿñ ‰¡ )l
eturns an  ° d ONLN dY ‰ ~ 8 ( Ì ~*array of the loaded packages. Usually ther    ° d ONLN dÉ ‰9 π )ªe is just one package loaded,  ° d ONLN d°  ~ ¸ ’ ( ˘ ~your application, so  g¿ ° d ONLN dµ  ÷ ¸ ÿ )X     Á¿ ° d ONLN d∂  ÿ ¸8 )getpackages()[0]   Á¿ ° d ONLN d∆ 8 ¸π )` is your application package.  ° d ONLN d‰ ¸ ~ ˇ ( ~The full command to type is:    ° d ONLN d ~ Ñ *r  ° d ONLN d Ñ8 )emovepackage(getpackages()[0])   ° d ONLN d". ~: Ñ (7 ~Y @Ä ° d ONLN d#. Ñ: ¨ )	ou can cr  4  ° d ONLN d,. ¨:7 )("eate a global function that calls    I  ° d ONLN dN.7:Ö )ãremovepackage    I  ° d ONLN d[.Ö:± )N
 and then    ° d ONLN de: ~F ¿ (C ~LoadPackage   ° d ONLN dp: ¿Fd )B( for you. The function looks like this:    ° d ONLN dôP ~\ Ã (Y ~global zap()  ° d ONLN dß^ ~j ¢ *begin  ° d ONLN dØl êxV +!removepackage(getpackages()[0]);  ° d ONLN d“z êÜ ˆ *loadpackage(nil)   ° d ONLN d‰à ~î ê (ë ~end   ° d ONLN dË† ~¨ ˇ *Now all you need to type to r  J@ ° d ONLN d† ¨º )Ç*emove the old package and get a dialog to  ° d ONLN d/¨ ~∏ › (µ ~install the new one is:     ° d ONLN dF¨ ﬁ∏ )` zap()   ° d ONLN dMΩ ~… Ñ (∆ ~Y @Ä ° d ONLN dNΩ Ñ… Ÿ )ou can also use the    ¿ ° d ONLN dbΩ ⁄… Ú )Vload   ¿ ° d ONLN dfΩ Ú…ã )$ function to do something like this. ,  Zapf Dingbats     ÎÄ ° d ONLN dã¿ê»ñ )ûs   
‚ <Á
 4„ <Á
 p ‰ ~‰
‰ ~‰
  
ˇ·ˇ‚7Ç      
 ° d ONLN dç◊ ~„ Ñ (‡ ~T   ° d ONLN dé◊ Ñ„ Ã )roubleshooting   ‡ (‡3        ° d ONLN dûÓ ~˙ˇ (˜ ~VIf Hammer appear to hang while starting, or crashes to MacsBug while starting, it may   ° d ONLN dÙ˚ ~ *#be that you have not installed the   Î‡ ° d ONLN d˚M )ïArmistice car  π  ° d ONLN d$˚N´ );d, or installed it impr  Z` ° d ONLN d;˚¨» )^operly Í  ° d ONLN dA˚«… ).  ° d ONLN dC ~ ( ~WIf Hammer hangs during or after loading the image, it may be that you have set some of  ° d ONLN dö ~& · *the option in the Conﬁ H` ° d ONLN d± ‚&  )dg menu incorr  §¿ ° d ONLN dæ &4 )>ectly  |¿ ° d ONLN d√4&b )
. Make sur ”‡ ° d ONLN dÕb&∞ ).e that the only thr  h  ° d ONLN d‡±&¯ )Oee options set ar  Ø† ° d ONLN dÒ¯&ˇ )Ge  ° d ONLN dÛ' ~3j (0 ~6Default Stdio on, Don't Sleep, and Fake Battery Level.  ° d ONLN d*9 ~E ‚ *Remember to Stop the   ›¿ ° d ONLN d?9 ‚E )dArmistice car  ™‡ ° d ONLN dL9E< );d befor  &@ ° d ONLN dS9=Eà ) e changing Conﬁ  EÄ ° d ONLN dc9àE )Kg menu items, and quit and   ° d ONLN d~F ~R Å (O ~r E  ° d ONLN dF ÇR € )estart Hammer after  ¿ ° d ONLN díF €RB )Y. If you cannot stop the   å¿ ° d ONLN d´FBR| )gArmistice car  Y‡ ° d ONLN d∏F}R” );d because the Conﬁ ‡ ° d ONLN dÀF‘R	 )Wg menu has   ° d ONLN d÷S ~_ € (\ ~some items set incorr ı† ° d ONLN dÎS €_ )]Bectly (Bunwarmer Diagnostics does this, for example), you need to  ° d ONLN d-` ~l ´ (i ~delete the  ¢` ° d ONLN d8` ´l œ )-ARM pr ‘  ° d ONLN d>` œl ﬂ )$efer Ä  ° d ONLN dB` ‡l  )ences ﬁ  ¿ ° d ONLN dJ`l )!le fr  i† ° d ONLN dO`l= )	om the Pr  _  ° d ONLN dX`=lM )+efer @ ° d ONLN d\`Nlﬁ )!ences folder in the System folder  v@ ° d ONLN d}`›lı )è, and  ° d ONLN dÉm ~y (v ~then start Hammer again and r ¿ ° d ONLN d†my! )âeconﬁ  °@ ° d ONLN d¶m!y0 )gur  ¸Ä ° d ONLN d©m0y? )e it.  ° d ONLN dØ ~ã (à ~!If you get a dialog box saying “T @ ° d ONLN d–ãm )êimeout waiting for W ÿ@ ° d ONLN d‰lãˇ )^ indow Input”, your must use the  ° d ONLN då ~ò Ë (ï ~Exit button to quit and r ˛Ä ° d ONLN då Ëò* )jestart Hammer  Ù¿ ° d ONLN d*å*ò˚ )B.. This happens occasionally when you type too  ° d ONLN dXô ~• ˇ (¢ ~fast into the Listener window ã  ° d ONLN duô ˇ•` )Å. When you type the ﬁ  äÄ ° d ONLN dãôa•Ö )b
rst letter ≤  ° d ONLN dïôÖ•ˇ )$, Hammer goes and tries to   ° d ONLN d∞¶ ~≤ £ (Ø ~	stop the  ˆ  ° d ONLN dπ¶ £≤ › )%Armistice car  √  ° d ONLN d∆¶ ﬁ≤~ );&d. If you type the second letter befor √¿ ° d ONLN dÏ¶~≤„ )†e it has stopped the car 7† ° d ONLN d	¶‰≤ )fd, you   
ˇˇˇˇˇˇˇˇ 4 ^ (≤ * ˇÏ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDeveloping Using DDKs 4⁄ ú˙(         (‡ ú
Preparing   ÿê ))Y  – )our Code For Delivery       
 ,  (‡3-15      (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h Ó ( e úget stuck like this.  %@ ° d ONLN d  \ Ó h )RCAfter the second letter you can type as fast as you want. (This rar  ∫@ ° d ONLN d X \ h ( eely   ° d ONLN d \ i ú u  ( r úhappens, however) ° d ONLN d n { ú á¡ *BIf you get unusual “deep toast alert” messages when you start the  d† ° d ONLN d ∞ {¡ á$ ( Ñ¡Armistice image, then   ° d ONLN d ∆ à ú î ≥ ( ë úyour  †  ° d ONLN d À à ≥ î Ì )Armistice car  m  ° d ONLN d ÿ à Ó î  );d pr –  ° d ONLN d ‹ à  î@ )obably has har q  ° d ONLN d Í àA îX )Adwar ®¿ ° d ONLN d Ó àX îi )e pr πÄ ° d ONLN d Ú ài îã )oblems.   
 õ Z ∂( 4 ú Z ∂(  
 ∆ Z Œ( 4 « Z Œ( p  » Z ». » Z ».  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN d ˚ ≥ Z ∆ c ( ¡ ZP m¢ ° d ONLN d ¸ ≥ d ∆ j )
r  Ä4 ° d ONLN d ˝ ≥ j ∆ • )eparing  ö4 ° d ONLN d ≥ • ∆ Ø );Y  
v ° d ONLN d ≥ Ø ∆Q )
our Code For Delivery    V˛ ( ¡ 3    
         ° d ONLN d ◊ ú „ ( ‡ úWhen your code works pr @ ° d ONLN d4 ◊ „, )toperly ó‡ ° d ONLN d: ◊+ „9 ), pr _  ° d ONLN d> ◊: „M )epar Ô¿ ° d ONLN dB ◊M „ê )e it for delivery  ¨  ° d ONLN dS ◊ê „© )C. Ther ,‡ ° d ONLN dY ◊™ „∫ )e ar ;Ä ° d ONLN d] ◊∫ „¡ )e  Ö  ° d ONLN d_ ◊¡ „⁄ )two b  õ† ° d ONLN dd ◊⁄ „ )asic forms of  ° d ONLN dr ‰ ú  √ ( Ì ú	delivery: ,  Zapf Dingbats     ° d ONLN d| ˙ ú † *n     
 ° d ONLN d~ ˜ ® Ø )A  ∫† ° d ONLN d ˜ Ø≠ )8 package can be distributed to desktop computers on disk u‡ ° d ONLN d∑ ˜Æµ )ˇ o k` ° d ONLN dπ ˜∂ )r in some other form,  ° d ONLN dœ ®∂ ( ®6and then downloaded to Newtons using Newton Connection  † ° d ONLN d∑º (∑.       ° d ONLN d ú  † ( ún    
 ° d ONLN d
 ®! Ø )A  ∫† ° d ONLN d Ø! ˆ ) package can be  ß¿ ° d ONLN d ˜!) )Hplaced on a  .¿ ° d ONLN d&*!U )3 PCMCIA  Ù¿ ° d ONLN d-T!c )* car ™  ° d ONLN d1d!¿ )d using the PCMCIA ˆ  ° d ONLN dC¿! )\ Masked ROM  ú  ° d ONLN dO! )CKit. à‡ ° d ONLN dS! )   ° d ONLN dT! ®- — (* ®	These car ˜† ° d ONLN d]! —-F ))ds can then be manufactur    ° d ONLN dv!G-Ü )ved and deliver Œ† ° d ONLN dÑ!Ü-ì )?ed.  4  ° d ONLN dá!î-· ) See the PCMCIA  ™` ° d ONLN dñ!‡-" )L Masked ROM  ° d ONLN d¢- ®9 æ (6 ®Kit d à† ° d ONLN dß- æ9A )ocumentation for information ‡ ° d ONLN d√-B9D )Ñ.  
ˇˇˇˇˇˇˇˇ 4 ^ F „ H 4 F! H 4/ FJ H ˇ⁄    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>3  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Developing Using DDKs 4⁄ <˙
      
         (‡ <3-16        	 )B
Preparing  ÿê ))Y  – )our Code For Delivery      (Ô ~Draft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇh    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h4  
         4⁄ ú˙( ,  	Helvetica              (‡ úUsing ProtocolGen      
 ,  (‡4-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w Á ( p úThe Pr  ≤î ° d ONLN d  Z Á wr )KotocolGen T  ≤Ü ° d ONLN d  Zp wì )âool    ä* )´4     
         ° d ONLN d  ú' ¸ ($ úIn general, the makeﬁ ïÄ ° d ONLN d - ¸'ã )`le contained in your DDK has Pr  1‡ ° d ONLN d Lå'ø )êotocolGen r  »  ° d ONLN d Wø' )3ules built in to it.   Œ‡ ° d ONLN d l' )MY  è` ° d ONLN d m' )ou   ° d ONLN d p( ú4  (1 úshouldn’t need to r g` ° d ONLN d É( 4h )Tead this chapter unless you  ÿÄ ° d ONLN d û(h4¸ )x!: need to generate a new header ﬁ  t‡ ° d ONLN d ¿(˝4 )ïle or  ° d ONLN d ∆5 úA Ø (> úsour  ˛† ° d ONLN d  5 ØA ¿ )ce ﬁ ≈@ ° d ONLN d œ5 ¡A )Mle for your p-class implementation or need to make you own p-class interface.  ° d ONLN dG úS ¢ (P úT †¿ ° d ONLN dG ¢S π )he Pr  ä` ° d ONLN d#G πS' )otocolGen tool serves thr  ÷† ° d ONLN d<G'S^ )nee functions:  ,  Zapf Dingbats     ° d ONLN dJ] úe † (c ún    
 ° d ONLN dLZ ®f “ )
It simpliﬁ y‡ ° d ONLN dWZ ”f ˜ )+	es the cr  ì  ° d ONLN d`Z ˜f: )$eation of heade    ° d ONLN doZ;fD )Dr f  Ø  ° d ONLN drZDfd )		iles for   BÄ ° d ONLN d{Zefà )!	p-class i  ”Ä ° d ONLN dÑZàfÀ )#mplementation  ~† ° d ONLN dëZÃf– )Ds  ª† ° d ONLN díZ–f“ ).      ° d ONLN dîo úw † (u ún    
 ° d ONLN dñl ®x “ )
It simpliﬁ y‡ ° d ONLN d°l ”x ˜ )+	es the cr  ì  ° d ONLN d™l ˜x3 )$eation of sour ` ° d ONLN d∏l4xE )=ce ﬁ ›  ° d ONLN dΩlExb )les for  à  ° d ONLN d≈lcxÜ )	p-class i    ° d ONLN dŒláxŒ )$mplementations   ° d ONLN d‹lœx— )H.      ° d ONLN dﬁÅ úâ † (á ún    
 ° d ONLN d‡~ ®ä ◊ )It generate  ì@ ° d ONLN dÎ~ ◊ä ˘ )/s glue n È‡ ° d ONLN dÛ~ ˘ä? )"eeded for linkin %@ ° d ONLN d~@äE )Gg  ¥` ° d ONLN d~Eäo )
. These ar ª¿ ° d ONLN d~oä§ )*e the build r  <† ° d ONLN d~•ä )6ules built into the sample   ° d ONLN d6ä ®ñ ∆ (ì ®makeﬁ πÄ ° d ONLN d<ä ∆ñ ÷ )les.   ° d ONLN dBõ úß ¢ (§ úT †¿ ° d ONLN dCõ ¢ß Ø )he   ª¿ ° d ONLN dFõ Øß – )DDKs c •† ° d ONLN dLõ —ß )"ome with sample  Q  ° d ONLN d\õ ß| )Oor template header ﬁ è` ° d ONLN dqõ|ß± )\les and sour Í  ° d ONLN d}õ±ß¬ )5ce ﬁ ∞¿ ° d ONLN dÇõ√ßŒ )les  ü¿ ° d ONLN dÖõœß ) complete with   ° d ONLN dî® ú¥1 (± ú"glue, so you do not need to use Pr  5† ° d ONLN d∂®2¥Ù )ñ-otocolGen. If you need to use it because the   H¿ ° d ONLN d„®Ù¥ )¬kit d  û` ° d ONLN dË®¥ )oes  ° d ONLN dÏµ ú¡ Ì (æ únot have sample ﬁ ú` ° d ONLN d˛µ Ì¡ ¯ )Qles  ã` ° d ONLN dµ ˘¡ ˚ ),  ` ° d ONLN dµ ¸¡ )  or if you want to start with fr ˛Ä ° d ONLN d"µ~¡ï )Çesh ﬁ  c@ ° d ONLN d(µñ¡˚ )les, you can follow the  ° d ONLN d@¬ úŒ ® (À údir I  ° d ONLN dC¬ ©Œ )ections in this section  ç  ° d ONLN dZ¬Œ	 )^.    ° d ONLN d[¬
Œ )   .† ° d ONLN d\¬Œ( )After t  
¿ ° d ONLN dc¬)Œ. )h  ‹  ° d ONLN dd¬.Œ7 )es ‚¿ ° d ONLN df¬7ŒK )	e dir  ıÄ ° d ONLN dk¬KŒÅ )ections is a r H` ° d ONLN dy¬ÇŒí )7efer ÙÄ ° d ONLN d}¬íŒ& )%ence section that details all of the   ° d ONLN d¢œ ú€ ‘ (ÿ úoptions of Pr >@ ° d ONLN dØœ ’€ )9
otocolGen.  
‚ Z˝( 4„ Z˝(  
 Z( 4 Z( p  Z. Z.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dª˙ Z ô ( ZUsing Pr  o¿ ° d ONLN d√˙ ô ‚ )?	otocolGen    V˛ ( 4    
         ° d ONLN dŒ ú* ¢ (' úY @Ä ° d ONLN dœ ¢* À )	ou use Pr  ôÄ ° d ONLN dÿ À* ))otocolGen for thr  e‡ ° d ONLN dÈ*N )Lee purposes:     ° d ONLN dˆ4 ú< † (: ún    
 ° d ONLN d¯1 ®= Æ )T  µ¿ ° d ONLN d˘1 ≠= ≤ )o  +@ ° d ONLN d˙1 ≥= › )
 generate  † ° d ONLN d1 ﬁ= Ó )+a “s ⁄† ° d ONLN d1 Ó= )tarte  † ° d ONLN d1= )r” h _† ° d ONLN d1=5 )eader ﬁ  é  ° d ONLN d15=U )!	le for a   |  ° d ONLN d"1V=y )!	p-class i    ° d ONLN d+1z=Ω )$mplementation      ° d ONLN d9F úN † (L ún    
 ° d ONLN d;C ®O Æ )T  µ¿ ° d ONLN d<C ≠O ≤ )o  +@ ° d ONLN d=C ≥O ÷ ) generat ‘  ° d ONLN dEC ÷O Ê )#e “s Z† ° d ONLN dIC ÁO ˚ )tarte  õ† ° d ONLN dNC ˚O )r”   @ ° d ONLN dQCO )s  K@ ° d ONLN dRCO )our  å‡ ° d ONLN dUCO# )ce ∆¿ ° d ONLN dWC#O+ )	 ﬁ SÄ ° d ONLN dZC,O¥ )	le for a p-class implementation      ° d ONLN dzX ú` † (^ ún    
 ° d ONLN d|U ®a ∞ ) T 5¿ ° d ONLN d~U ∞a Û )o generate glue  ° d ONLN déf úr ¢ (o úY @Ä ° d ONLN dèf ¢r Ø )ou   =  ° d ONLN díf ∞rf )*can only accomplish this last task with Pr ôÄ ° d ONLN dºffrò )∂otocolGen.   £Ä ° d ONLN d«fòrû )2Y  d  ° d ONLN d»fûr∆ )	ou can cr  WÄ ° d ONLN d—f∆r )(eate your own  ° d ONLN dﬂs ú ‰ (| úheader and sour ^¿ ° d ONLN dÓs ‰ ı )Hce ﬁ %` ° d ONLN dÛs ˆ9 )les, but using P |  ° d ONLN ds9< )Cr  A  ° d ONLN ds=j )	otocolGen  x¿ ° d ONLN dsjñ )- to do so s  ±` ° d ONLN dsñ• ),ave  !@ ° d ONLN ds¶≤ )s y  m` ° d ONLN ds≤Ÿ )ou work  8@ ° d ONLN d&s⁄ﬂ )(h  	† ° d ONLN d's‡Ì )elp  Ω¿ ° d ONLN d*sÌÒ )s  ˙¿ ° d ONLN d+sÒ ) avoid   ° d ONLN d2Ä úå » (â ú
typing err  ù¿ ° d ONLN d<Ä »å ÿ ),ors.  
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 4-0  *	T     )able 4-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4* Fß H 4∑ FŒ H 43 FO H 4h F H ˇ‡    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>4  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The ProtocolGen   ˙` )CT  LR )ool  4⁄ <˙
      
         (‡ <4-2       	 )BUsing ProtocolGen      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
  
 k < r
 4 l < r
 p  m ~ m
 m ~ m
  
ˇ·ˇ‚7Ç      ˇˇ‹. ˇ◊ ° d ONLN d   \ ~ k à ( g ~G ?Ó ° d ONLN d  \ â k )enerating a Header File    €r ( g4      
         ° d ONLN d  r ~ ~ Ñ ( { ~T µ¿ ° d ONLN d  r É ~ ¶ )o use Pr † ° d ONLN d # r ß ~8 )$ otocolGen to generate a header ﬁ È@ ° d ONLN d D r8 ~? )ële õ@ ° d ONLN d F r@ ~E ),  õ@ ° d ONLN d H rE ~G )i  É† ° d ONLN d I rH ~M )n  U  ° d ONLN d J rN ~i ) MPW h‡ ° d ONLN d N ri ~ˆ ), enter the following command,   ° d ONLN d m  ~ ã Å ( à ~r E  ° d ONLN d n  Ç ã ß )eplacing   ≤@ ° d ONLN d v  ß ã © )%:  ,  Zapf Dingbats        ° d ONLN d x ï ~ ù Ç ( õ ~n      
 ° d ONLN d z í ä û î )kit     ` ° d ONLN d } í ï û ü ) w ‚` ° d ONLN d  í ü û Ù )
ith the name of the  Q† ° d ONLN d ì í ı û )Vkit y  † ° d ONLN d ò í	 û )ou ar  ‹@ ° d ONLN d ù í û> )e using      ° d ONLN d • ß ~ Ø Ç ( ≠ ~n      
 ° d ONLN d ß § ä ∞ ≥ )
TInterface    ∆‡ ° d ONLN d ± § ≥ ∞ )) with the name of the    ° d ONLN d « § ∞7 )a	p-class i  û  ° d ONLN d – §7 ∞y )#nterface you ar  Ã† ° d ONLN d ﬂ §y ∞ˆ )Be using as the basis for your  ° d ONLN d ˝ ∞ ä º – ( π äimplementation      ° d ONLN d ≈ ~ Õ Ç ( À ~n      
 ° d ONLN d ¬ ä Œ ﬁ )TMyImplementation     Í† ° d ONLN d ¬ ﬁ Œí )T( with the name you want to use for your  Ä† ° d ONLN dG ¬ì Œ∂ )µ	p-class i  † ° d ONLN dP ¬∑ Œ˙ )$mplementation      ° d ONLN d^ ◊ ~ ﬂ Ç ( › ~n      
 ° d ONLN d` ‘ ä ‡ ∏ )	MyProduct     T¿ ° d ONLN di ‘ π ‡π )/8 with the name you want to use for your implementation f "† ° d ONLN d° ‘∫ ‡ƒ ( ›∫ile Ω  ° d ONLN d§ ‘ƒ ‡» )
s  , 
 Courier   ° d ONLN dß Í ê ˆ ñ ( Û êP ° d ONLN d® Í ñ ˆ\ )!rotocolGen -ImplementationHeader   ° d ONLN d÷ Íz ˆ )‰∂      ° d ONLN d⁄ ¯ ¢ ¨ ( ¢kit      ` ° d ONLN d› ¯ ≠ ≥ ).  ` ° d ONLN dﬁ ¯ ≥ ø )h  ° d ONLN dÏ ¯z )«∂  ° d ONLN d ¢ “ ( ¢-rename       ° d ONLN d¯ “ ˚ )0
TInterface      ∆‡ ° d ONLN d ˚ ))       ∆‡ ° d ONLN dS )TmyImplementation       àÄ ° d ONLN dTZ )S   ° d ONLN d!z )&∂  ° d ONLN d% ¢  ÿ ( ¢	-stdout >     ° d ONLN d. ÿ  · )6M  @ ° d ONLN d/ ·  )	yProduct      T¿ ° d ONLN d7 7 )&.impl.h  ° d ONLN dKz  )s∂  ° d ONLN dO" ¢., (+ ¢-i {includes-dir}OS600:   ° d ONLN dg: ~F ù (C ~This pr ﬁ† ° d ONLN dn: ùF Ì )oduces a header ﬁ  Ì† ° d ONLN dÄ: ÌF, )Ple called MyPr ô  ° d ONLN dé:-Fˆ )@-oduct.impl.h which looks something like this:    ° d ONLN dºQ ~] ¥ (Z ~	#include  ° d ONLN d≈Q ¥] ∫ )6"  ° d ONLN d∆Q ∫] “ )kit. ° d ONLN d Q “] ÿ )h  ° d ONLN dÀQ ÿ] ﬁ )"  ° d ONLN dÕm ~yí (v ~.PROTOCOL TMyImplementation : public TInterface  ° d ONLN d¸{ ~á Ñ *{  ° d ONLN d˛â ~ï ® *public:  ° d ONLN dó ê£§ +.PROTOCOL_IMPL_HEADER_MACRO(TMyImplementation);  ° d ONLN d7• ê±h *$TInterface * New(); // "constructor" ° d ONLN d]≥ êø ® *void ° d ONLN dd≥ ∆ø ¸ )6	Delete();  ° d ONLN dq≥øh )H// "destructor"  ° d ONLN dÅ¡ ~Õ Ñ (  ~. ° d ONLN dÉœ ~€ Ñ *.  ° d ONLN dÖ› ~È Ñ *.  ° d ONLN dáÎ ~˜ ä *};   ° d ONLN dä ~ ó *The ﬁ  »Ä ° d ONLN dê ó: )(rst line in the public section is a macr &` ° d ONLN d∏;† )§o that you should not r  [  ° d ONLN dœ†¿ )eemove.  
4 <;
 45 <;
 p 6 ~6
6 ~6
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d÷% ~4 (0 ~Generating a Source File    €r (04      
         ° d ONLN d; ~G á (D ~Pr  N† ° d ONLN dÚ; àG )
otocolGen can use your header ﬁ  ”¿ ° d ONLN d;G6 )ële to cr r‡ ° d ONLN d;7Gf )eate a sour  «  ° d ONLN d%;fGw )/ce ﬁ ç¿ ° d ONLN d*;xGÚ )le that has skeletons for the  ˇˇ‚ı ° d ONLN dHH ~T ∑ (Q ~methods deﬁ Tµ ° d ONLN dTH ∏T ):ned in the header ﬁ  Æ) ° d ONLN dhHT )Ule.  ~ ° d ONLN dlHT  )Y  ’˛ ° d ONLN dmHT÷ )+ou can, of course, easily generate such a ﬁ  F∆ ° d ONLN dôH◊T )∏le yourself. ˚ ° d ONLN d•HT
 )1        ° d ONLN dßZ ~f Ñ (c ~T µ¿ ° d ONLN d®Z Éf ¶ )o use Pr † ° d ONLN d∞Z ßf% )$otocolGen to generate a sour h  ° d ONLN dÃZ%f6 )~ce ﬁ .¿ ° d ONLN d—Z7f> )le ‡¿ ° d ONLN d”Z>fK ), in öÄ ° d ONLN d◊ZLfg ) MPW Æ` ° d ONLN d€ZgfÙ ), enter the following command,   ° d ONLN d˙g ~s Å (p ~r E  ° d ONLN d˚g Çs © )	eplacing     2@ ° d ONLN dg ™s ÿ )(	MyProduct       ° d ONLN dg Ÿs‹ )/8 with the name you want to use for your implementation ﬁ Ω@ ° d ONLN dFg‹sÁ (p‹les   ° d ONLN dK~ êä\ (á ê"ProtocolGen -ImplementationSource   ° d ONLN dy~häm )ÿ∂      ° d ONLN d}å ¢ò – (ï ¢	MyProduct      T¿ ° d ONLN dÜå —ò )/.impl.h  ° d ONLN dôåhòm )ó∂  ° d ONLN dùö ¢¶ ÿ (£ ¢	-stdout >     ° d ONLN d¶ö ÿ¶ )6	MyProduct       T¿ ° d ONLN dØö¶ )/.c   ° d ONLN dΩöh¶m )a∂  ° d ONLN d¡® ¢¥ ‰ (± ¢-NoLibMain  ° d ONLN d◊®h¥m )∆∂  
ˇˇˇˇˇˇˇˇ 4 t ( ~ * 4 ¶ ( ∞ * 4 ƒ ( Œ * 4 Ï (  * 4Ä (¥ * ˇP    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>4  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe ProtocolGen   ˙` )CT  LR )ool  4⁄ ú˙(         (‡ úUsing ProtocolGen      
 ,  (‡4-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( , 
 Courier       
 ° d ONLN d   \ ¿ hP ( e ¿-i {includes-dir}OS600:   ° d ONLN d ! \b hg )¢∂  ° d ONLN d % j ¿ vV ( s ¿-i {includes-dir}CLibrary   ° d ONLN d ? Ç ú é ª ( ã úThis pr ﬁ† ° d ONLN d F Ç ª é Í )
oduces a ﬁ ˙† ° d ONLN d Q Ç Í é Ù )/le   ,† ° d ONLN d T Ç ı é )called   ”  ° d ONLN d [ Ç é* )MyPr ¶  ° d ONLN d _ Ç* é— )'oduct.c that looks something like this:    ° d ONLN d á ô ú •Ü ( ¢ ú'PROTOCOL_IMPL_MACRO(TMyImplementation); ° d ONLN d ∞ µ ú ¡Ü *'TInterface * TMyImplementation :: New()  ° d ONLN d ÿ √ ú œ ¢ *{  ° d ONLN d ⁄ — ú › ¢ *}  ° d ONLN d ‹ Ì ú ˘\ * void TMyImplementation::Delete() ° d ONLN d ˝ ˚ ú ¢ *{  ° d ONLN d ˇ	 ú ¢ *}  ° d ONLN d ú# ¢ *.  ° d ONLN d% ú1 ¢ *.  ° d ONLN d3 ú? ¢ *.    ° d ONLN dK úW µ *The ﬁ  »Ä ° d ONLN dK µW Ê )rst line deﬁ ò` ° d ONLN dK ÁW )2
nes a macr y† ° d ONLN d$KW{ )/o that you should not r  Æ` ° d ONLN d;K{Wõ )eemove.  
| ZÉ( 4} ZÉ( p ~ ú~(~ ú~(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dBm ú|  (x úGenerating Glue   €r (x 4      
         ° d ONLN dSÉ úè ≥ (å úBefor Û¿ ° d ONLN dXÉ ≥è )e you can use or pr  «¿ ° d ONLN dkÉè) )Tovide a  ±@ ° d ONLN dsÉ*èJ )#p-class, Y‡ ° d ONLN d{ÉKèˆ )!( you will need to write or generate the  ° d ONLN d£ê úú ∞ (ô úappr  I@ ° d ONLN dßê ±ú§ )8opriate glue. This is most easily done by adding build r ˘† ° d ONLN dﬂê§ú )Ûules and dependencies to   ° d ONLN d¯ù ú© ≥ (¶ úyour  ˛` ° d ONLN d˝ù ≥© — )makeﬁ  7‡ ° d ONLN dù “© ‹ )le.  i‡ ° d ONLN dù ‹© ﬁ )
   ãÄ ° d ONLN dù ﬁ© Ë )Al ;  ° d ONLN d	ù È© ˛ )l the   ‡ ° d ONLN dù ˇ©  )standar  2` ° d ONLN dù ©( )!d  Œ  ° d ONLN dù(©Ù )-glue you need can be generated for you using   ° d ONLN dE™ ú∂ • (≥ úPr  N† ° d ONLN dG™ ¶∂ ’ )

otocolGen. @ ° d ONLN dQ™ ÷∂ ÿ )0   X† ° d ONLN dR™ ÿ∂ ﬁ )Y    ° d ONLN dS™ ﬁ∂' )Lou may need to write additional glue if you write certain kinds of code, as  ° d ONLN dü∑ ú√ ﬁ (¿ úis described in   π¿ ° d ONLN dØ∑ ﬁ√y )B!“Implementing a P-Class” on page   ì@ ° d ONLN d–∑z√á )ú3-5  Á  ° d ONLN d”∑á√â ).  ° d ONLN d’… ú’ ÷ (“ úMost of the k †  ° d ONLN d‚… ÷’ ‚ ):its  á¿ ° d ONLN dÊ… „’ Á )c  ¯  ° d ONLN dÁ… Á’1 )ome with makeﬁ ó¿ ° d ONLN dˆ…2’ã )Kles that contain the r L  ° d ONLN d…å’È )Zules to generate glue. 4¿ ° d ONLN d"…Í’ı )^ If  Á  ° d ONLN d&…ı’	 )your ÂÄ ° d ONLN d*…
’ )   eÄ ° d ONLN d+…’ )kit  ° d ONLN d/÷ ú‚ ¢ (ﬂ úd õ¿ ° d ONLN d0÷ ¢‚ ≤ )oes  ó‡ ° d ONLN d4÷ ≥‚ œ )not, in  ⁄‡ ° d ONLN d;÷ œ‚E )clude the following build r  ¿ ° d ONLN dV÷F‚î )wules lines in your   ]¿ ° d ONLN di÷î‚≤ )Nmakeﬁ  ó@ ° d ONLN do÷≤‚º )le:    ° d ONLN dsÌ ú˘ ﬁ (ˆ ú.h.o  ƒ  .h ° d ONLN dÄ˚ Æ +9ProtocolGen -InterfaceGlue {depDir}{Default}.h {COptions} ° d ONLN dπ˚ ( ∂  ° d ONLN dæ	 ¿¬ ( ¿+-stdout >"{{CPlusScratch}}{Default}.glue.h" ° d ONLN dÎ Æ#Ÿ (  Æ2{product-asm} "{{CPlusScratch}}{Default}.glue.h" ∂  ° d ONLN d % ¿1V +-o {targDir}{Default}.h.o ° d ONLN d;3 Æ?º (< Æ- Delete -i "{{CPlusScratch}}{Default}.glue.h" ° d ONLN diO ú[ (X ú.impl.h.o ƒ  .impl.h  ° d ONLN d] Æi	 +:ProtocolGen -ImplementationGlue {depDir}{Default}.impl.h ∂  ° d ONLN dºk ¿w ˚ +
-package ∂  ° d ONLN d…y ¿Ö *6{COptions} -stdout >"{{CPlusScratch}}{Default}.impl.h" ° d ONLN dá ÆìŸ (ê Æ2{product-asm} "{{CPlusScratch}}{Default}.impl.h" ∂  ° d ONLN d6ï ¿°t +-o {targDir}{Default}.impl.h.o  ° d ONLN dV£ ÆØ∂ (¨ Æ,Delete -i "{{CPlusScratch}}{Default}.impl.h"  
ˇˇˇˇˇˇˇˇ 4 ^ F h H 4 Ñ F é H 4Ö Fè H 4ü F‚ H 4˝ F H ˇ$    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>4  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The ProtocolGen   ˙` )CT  LR )ool  4⁄ <˙
      
         (‡ <4-4       	 )BProtocolGen Reference      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h ¿ ( e ~These default r å  ° d ONLN d  \ ¿ hj )B$ules assume that you have added appr *@ ° d ONLN d 3 \k hå )´opriate  , 
 Courier   ‡ ° d ONLN d ; \ç hô )"-i   ‡ ° d ONLN d = \ô h® ) dir R  ° d ONLN d A \® h‰ )ectives to the   ° d ONLN d P i ~ u § ( r ~	variable    ∫‡ ° d ONLN d Y i § u ‡ )&
{COptions}   ∫‡ ° d ONLN d c i ‡ u ‚ )<.  ° d ONLN d e { ~ á™ ( Ñ ~EFor each interface that your code calls, add a dependency similar to:   ° d ONLN d ´ í < û, ( õ <({Objects}interface.h.o ƒ "{includes-dir}  ° d ONLN d ” í, ûD )Foo: ° d ONLN d ◊ íD û‘ )interface.h" …otherDeps…   ° d ONLN d  • ~ ±W ( Æ ~4This line generates interface glue for the interface   Ä ° d ONLN d$ •X ±Z )⁄   †Ä ° d ONLN d% •Z ±¬ )a subsystem called Foo.  ı‡ ° d ONLN d< •¬ ±ƒ )h   Ä ° d ONLN d= •≈ ±¸ )Add the .o ﬁ u‡ ° d ONLN dJ •¸ ± )7le   ° d ONLN dM ≤ ~ æ ‚ ( ª ~to your link statement. ° d ONLN de ƒ ~ –; *)For each implementation that your code pr  ¸¿ ° d ONLN dé ƒ; –√ )Ωovides, add a dependency like:   ° d ONLN d≠ € ~ Á ¢ ( ‰ ~{Objec  ° d ONLN d≥ € ¢ Á )$;ts}Frobozz.impl.h.o ƒ {MyIncludes}Frobozz.impl.h …otherDeps  ° d ONLN dÓ € Á
 ( ‰…   ° d ONLN d Ó ~ ˙ õ ( ˜ ~This w  nÄ ° d ONLN dˆ Ó ú ˙. )!ill generate implementation glue.  ı¿ ° d ONLN d Ó. ˙0 )í   ` ° d ONLN d Ó1 ˙8 )A  ﬁ† ° d ONLN d Ó8 ˙m )gain, add th Ú¿ ° d ONLN d% Óm ˙Ç )5e .o f ÷@ ° d ONLN d+ ÓÇ ˙ )ile to your link statement î‡ ° d ONLN dE ÓÒ ˙Û )o.   
 <
 4 <
  
, <4
 4- <4
 p . <.. <.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dH <, L (' <Pr  Ä4 ° d ONLN dJ L, ¿ )otocolGen Refer  BB ° d ONLN dY ¿, ‡ )tence   V˛ ('4    
         ° d ONLN d_= ~I Œ (F ~The options for Pr  l† ° d ONLN dq= ŒI )PotocolGen ar È@ ° d ONLN d}=I< )8e as follows:    ° d ONLN dãT ~`> (] ~ ProtocolGen option... sourceFile  ° d ONLN d¨b ~n ä *       ° d ONLN dÆb än Æ )<action>      ° d ONLN d∑p ~| ¢ (y ~  [-d       ° d ONLN dΩp ¢| æ )$symbol      ` ° d ONLN d√p ø| À )[=     ` ° d ONLN d≈p À| ‡ )value       ≠† ° d ONLN d p ‡| Ï )]] ° d ONLN dÕ~ ~ä ¢ (á ~  [-i       ° d ONLN d”~ ¢ä ∆ )$	directory       »  ° d ONLN d‹~ ∆ä Ã )$]  ° d ONLN dﬁå ~ò ¿ (ï ~  [-rename      ° d ONLN dÈå ¿ò “ )Bintfc       ` ° d ONLN dÓå ”ò Ÿ )       ` ° d ONLN dÔå Ÿò Î )impl      Y  ° d ONLN dÛå Îò Ò )]  ° d ONLN dıö ~¶ ¢ (£ ~  [-p]  ° d ONLN d¸® ~¥ ¿ *  [-stdout]  ° d ONLN d∂ ~¬ ∆ *  [-package]   ° d ONLN dŒ ~⁄ Ω *The options ar '  ° d ONLN d#Œ æ⁄ Û )@e explained  lÄ ° d ONLN d/Œ Û⁄ )5her  ÃÄ ° d ONLN d2Œ⁄ )e.   ° d ONLN d5ﬁ ~Í ¢ (Á ~<action>     ° d ONLN d>ﬁ ⁄Í ˜ )\Speciﬁ ‡ ° d ONLN dEﬁ ˜Í )	es the Pr  £Ä ° d ONLN dNﬁÍg )&otocolGen action =  ° d ONLN d^ﬁhÍ¢ )K. Exactly one    º  ° d ONLN dlﬁ¢Í® ):<      º  ° d ONLN dmﬁ®Í¿ )action      X† ° d ONLN dsﬁ¡Í« )>    X† ° d ONLN dtﬁ«ÍÔ )	 must be   ° d ONLN d}Í ⁄ˆ ˆ (Û ⁄speciﬁ  Ó  ° d ONLN dÑÍ ˆˆ£ )(ed, and it must be one of the following: ° d ONLN dÇC ⁄OÍ (L ⁄BFuller descriptions of these actions follow later in this section.    ° d ONLN d≈R ~^ Ñ ([ ~- ° d ONLN d∆R Ñ^ ê )d      ° d ONLN d»R ê^ ¨ )symbol      ` ° d ONLN dŒR ≠^ π )[=     ` ° d ONLN d–R π^ Œ )value       ≠† ° d ONLN d’R Œ^ ‘ )]    ° d ONLN d◊^ ⁄j Ï +Deﬁ † ° d ONLN d€^ Ìj )nes a pr ≤¿ ° d ONLN d„^j )"epr  CÄ ° d ONLN dÊ^jd )ocessor symbol.    ° d ONLN dˆm ~y ä (v ~-i    ° d ONLN d¯m äy å )        ° d ONLN d˘m çy ± )	directory     H  ° d ONLN dm ±y ≥ )$   ° d ONLN dm ⁄y · ))D  =@ ° d ONLN dm ‚y Ï )eﬁ † ° d ONLN dm Ìy ˛ )nes  k† ° d ONLN dm ˛y )the  …  ° d ONLN dmy )pr ê  ° d ONLN dmy& )
epr   ‡ ° d ONLN dm'yz )ocessor include dir  z` ° d ONLN d(mzyï )Sectory “  ° d ONLN d.mîyñ ).    ° d ONLN d0| ~à ® (Ö ~-rename   ° d ONLN d7| ®à ™ )*        ° d ONLN d8| ´à Ω )intfc       É` ° d ONLN d=| Ωà √ )       É` ° d ONLN d>| √à ’ )impl    ° d ONLN dCà ⁄î ﬂ +S ø¿ ° d ONLN dDà ﬂî ˜ )peciﬁ  ‡ ° d ONLN dJà ˜î )es the   ‘‡ ° d ONLN dQàîI )name of the  j† ° d ONLN d]àJîm )7	p-class i  ˚† ° d ONLN dfàmîÌ )#nterface and the name of the     ° d ONLN d¨¸ ~ ˆ ( ~-ImplementationHeade  ° d ONLN d¿¸ ˆ ¸ )xr    ° d ONLN d¬¸" ) Ge Í¿ ° d ONLN dƒ¸"¥ )nerates implementation header ﬁ  T† ° d ONLN d‰¸µº )ìle   ° d ONLN dË ~ ˆ ( ~-ImplementationSourc  ° d ONLN d¸ ˆ ¸ )xe    ° d ONLN d˛B ) 	Generates  ¡` ° d ONLN dBG ), i )¿ ° d ONLN d	H° )mplementation sour ”Ä ° d ONLN d°≤ )Yce ﬁ ö  ° d ONLN d ≥∫ )le   ° d ONLN d$ ~( Í (% ~-ImplementationGlu  ° d ONLN d6 Í(  )le    ° d ONLN d8(B ),	Generates  ¡` ° d ONLN dAB(G ), i )¿ ° d ONLN dCH(° )mplementation glue   ° d ONLN dW, ~8 Ã (5 ~-InterfaceGlu ° d ONLN dd, Ã8 “ )Ne    ° d ONLN df,8B )J	Generates  ¡` ° d ONLN do,B8G ), i )¿ ° d ONLN dq,H8Å )nterface glue  
ˇˇˇˇˇˇˇˇ 4 î ( ± * 4  ( ˙ * 4– (î * 4˛ ( * < 4 ( * < 4 (( * < 4. (8 * < ˇ≤    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>4  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe ProtocolGen   ˙` )CT  LR )ool  4⁄ ú˙(         (‡ úProtocolGen Reference      
 ,  (‡4-5     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ¯ h ( e ¯	p-class i   ° d ONLN d 	 \ hY )$mplementatio Í¿ ° d ONLN d  \Y hf )=n y  À@ ° d ONLN d  \g hñ )
ou want cr Á‡ ° d ONLN d " \ñ h∑ )/eated fr r  ° d ONLN d * \∏ h— )"om it. Ê` ° d ONLN d 0 \— h¯ )	 These ar  m¿ ° d ONLN d 9 \˘ h  )(e  ∑` ° d ONLN d ; \  h )t  ˘¿ ° d ONLN d < \ h )ype  ° d ONLN d @ h ¯ t0 ( q ¯names, not ﬁ  B  ° d ONLN d M h1 tZ )9	le names.  , 
 Courier   ° d ONLN d W w ú É ¢ ( Ä ú- ° d ONLN d X w ¢ É ® )p    ° d ONLN d Z w ¯ É )VSpeciﬁ ‡ ° d ONLN d a w É> )
es that Pr @ ° d ONLN d k w? É≤ )*otocolGen should print pr    ° d ONLN d Ñ w≤ É¿ )sogr  ‰† ° d ONLN d á w¿ É )ess information.   ° d ONLN d ò Ü ú í ∆ ( è ú-stdout   ° d ONLN d † Ü ¯ ía )\Sends output to standar  'Ä ° d ONLN d ∑ Üb íì )jd output. E  È† ° d ONLN d ¬ Üì í≈ )1xcept in rar   ° d ONLN d Œ Ü∆ í )3e cases, you should  ° d ONLN d ‚ í ¯ û; ( õ ¯always use the    ˆ† ° d ONLN d Ò í; ûe )C-stdout    ˆ† ° d ONLN d ¯ íe ûÑ )* option  _‡ ° d ONLN d ˇ íÖ û‹ )  and use the MPW r ¸  ° d ONLN d í‹ ûÌ )Wedir é¿ ° d ONLN d íÓ û% )ect operator   ° d ONLN d" û ¯ ™ ( ß ¯
(>) to dir  ∏  ° d ONLN d, û ™p )'ect output into a ﬁ  Ω@ ° d ONLN d@ ûp ™Ä )Qle. I  Õ¿ ° d ONLN dE ûÄ ™ø )f you don’t, Pr  h@ ° d ONLN dT û¿ ™ )@otocolGen generates  ° d ONLN dh ™ ¯ ∂ª ( ≥ ¯,its output based on the names of the input ﬁ  •Ä ° d ONLN dï ™ª ∂	 )√les, which may pr    ° d ONLN d¶ ™
 ∂' )Ooduce  ° d ONLN d¨ ∂ ¯ ¬1 ( ø ¯unexpected r  ÛÄ ° d ONLN d∏ ∂1 ¬F )9esult  ,  ° d ONLN dΩ ∂G ¬M )s.   ° d ONLN d¿ ≈ ú — Ã ( Œ ú-package    ° d ONLN d… ≈ ¯ — )\Ensur  v@ ° d ONLN dŒ ≈ —∑ )&es that the implementation glue for a  »  ° d ONLN dÙ ≈∑ —⁄ )•	p-class i  Y  ° d ONLN d˝ ≈€ — )$n a package is   ° d ONLN d — ¯ ›ã ( ⁄ ¯#placed at the start of the package. @ ° d ONLN d/ —å ›ñ )î N ‰  ° d ONLN d1 —ñ › )
ote that such packages can   ° d ONLN dL › ¯ ÈO ( Ê ¯contain exactly one   ‡  ° d ONLN d` ›O Èo )Wp-class. à¿ ° d ONLN dh ›p È! )!+ This is the normal situation. In general,   ° d ONLN dì È ¯ ıC ( Ú ¯you must use the  Q` ° d ONLN d£ ÈD ıF )L     —` ° d ONLN d§ ÈF ıv )-package   —` ° d ONLN d¨ Èv ı’ )0 option, because only  »@ ° d ONLN d¬ È÷ ıˇ )`
p-classes  ° d ONLN dÃ ı ¯ ˛ ( ˛ ¯p Ç  ° d ONLN dÕ ı ˛ )r  G  ° d ONLN dŒ ı )epar ◊‡ ° d ONLN d“ ıt )ed with this option ar ˜¿ ° d ONLN dË ıt )_e r  ` ° d ONLN dÎ ıÄù )egister  UÄ ° d ONLN dÚ ıù  )ed with the Package Manager  °¿ ° d ONLN d ı! )Ç.       	 ° d ONLN d ú ¥ ( úNOTE        
 ° d ONLN d ú'6 *"If you have a package that has mor Ã† ° d ONLN d66'f )öe than one   ‡ ° d ONLN dAg'á )1p-class, ¥Ä ° d ONLN dIá'ÿ )  one and only one  ° d ONLN d[' ú3 ≈ (0 ú	p-class m ¸† ° d ONLN dd' ≈3 ))ust have been pr ˜¿ ° d ONLN dt'3! )Iepar àÄ ° d ONLN dx'"3X )ed using the ÿ@ ° d ONLN dÑ'X3Z )6     X@ ° d ONLN dÖ'[3ã )-package   X@ ° d ONLN dç'ã3’ )0 option. None of   ° d ONLN dû3 ú? æ (< úthe curr  ` ° d ONLN d¶3 ø? )#ent DDKs uses mor  º† ° d ONLN d∑3?D )Ue than one   ˚‡ ° d ONLN d¬3D?d )0p-class, §Ä ° d ONLN d 3e?é )! however 1  ° d ONLN d“3é?∫ )). If a futur M  ° d ONLN dﬁ3∫?⁄ ),e DDK  ° d ONLN d‰? úK ‰ (H údoes, the makeﬁ Æ¿ ° d ONLN dÙ? ‰K‘ )H6le or documentation for that DDK will account for the  ° d ONLN d*K úW ¯ (T úsituation. If you add   ÷  ° d ONLN d@K ¯W' )\p-classes o  ˙‡ ° d ONLN dKK'W√ )/!f your own design, you must make   ° d ONLN dlW úc ˘ (` úcertain only one is pr  d  ° d ONLN dÇW ˘c )]epar Ù¿ ° d ONLN dÜWc4 )	ed using     g  ° d ONLN dèW5ce ))-package   g  ° d ONLN dóWecg )0.  ,  Zapf Dingbats     Á  ° d ONLN dôZlbq )u     
 ° d ONLN dõh út ¢ (q úT †¿ ° d ONLN dúh ¢t Ø )he     ª¿ ° d ONLN düh Øt- )-ImplementationHeader    ª¿ ° d ONLN d¥h-t )~4 option generates an implementation header skeleton  ° d ONLN dËu úÅ £ (~ úfr  ò‡ ° d ONLN dÍu £Å )om an interface declaration. ú  ° d ONLN duÅ  ){   ÓÄ ° d ONLN du Å& )Y  Ø  ° d ONLN du&Å# )7ou must specify the interface and implementation names   ° d ONLN d?Ç úé √ (ã ú	with the    ∞Ä ° d ONLN dHÇ √é Ì )'-rename    ∞Ä ° d ONLN dOÇ Ìé )* option. ô¿ ° d ONLN dWÇé )" F ®‡ ° d ONLN dYÇéJ )or example:    ° d ONLN deô ú•m (¢ ú#ProtocolGen -ImplementationHeader ∂ ° d ONLN däß Æ≥ › +Frog.h ∂  ° d ONLN dîµ Æ¡C *-rename TFrog TBullFrog ∂  ° d ONLN dØ√ ÆœI *-stdout >BullFrog.impl.h ∂ ° d ONLN dÀ— Æ›8 *-i {includes-dir}OS600:    ° d ONLN d„È úı ¡ (Ú úmight cr  îÄ ° d ONLN dÎÈ ¡ı ‹ )%eate a   j  ° d ONLN dÚÈ ›ı ˝ )header   ]  ° d ONLN d˘È ˛ı4 )!skeleton for     Í  ° d ONLN dÈ4ıj )6	TBullFrog    Í  ° d ONLN dÈjı– )6, an implementation of     ò` ° d ONLN d&È—ıÔ )gTFrog    ò` ° d ONLN d+ÈÔıÒ ).  ` ° d ONLN d,ÈÚıÙ )   ° d ONLN d.˚ ú ¨ ( úThe   ;¿ ° d ONLN d1˚ ≠1 ) -ImplementationSource   ;¿ ° d ONLN dG˚1∫ )Ñ option generates skeleton sour  §  ° d ONLN df˚∫% )âce code for the methods  ° d ONLN d~ ú ˝ ( úof an implementation. .@ ° d ONLN dì ˛ )b F =` ° d ONLN dï9 )or example:    ° d ONLN d° ú+m (( ú#ProtocolGen -ImplementationSource ∂ ° d ONLN d∆- Æ9 +BullFrog.impl.h ∂ ° d ONLN dŸ; ÆG+ *-stdout >BullFrog.c ∂  ° d ONLN dI ÆU8 *-i {includes-dir}OS600:    ° d ONLN da úm ¡ (j úmight cr  îÄ ° d ONLN da ¡m  )%eate a sour  Ë¿ ° d ONLN da m9 )/ce code template ƒ@ ° d ONLN d+a:mB )J ﬁ Q  ° d ONLN d.aCmJ )	le   ° d ONLN d0aKmk ), BullFr J¿ ° d ONLN d8akmx ) og.  œ` ° d ONLN d;axmÄ ) T p  ° d ONLN d=aÅm )	he generated template contains   ° d ONLN d\n úzO (w ú&empty method declarations; for example  …Ä ° d ONLN dÇnOzQ )≥:    ° d ONLN dÑÖ úën (é ú#void TBullFrog :: GetEvent ( void ) ° d ONLN d®ì úü ¢ *{  ° d ONLN d™° ú≠ ¢ *}  
ˇˇˇˇˇˇˇˇ 4 ^ F h H 4 « F — H 4 ﬂ F H 4 F? H 4M Ft H 4p Fz H ˇ$    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>4  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The ProtocolGen   ˙` )CT  LR )ool  4⁄ <˙
      
         (‡ <4-6       	 )BProtocolGen Reference      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h ë ( e ~The   , 
 Courier   ª¿ ° d ONLN d  \ ë h Â )-InterfaceGlue   ª¿ ° d ONLN d  \ Â h ˙ )T and     ®‡ ° d ONLN d  \ ˚ hm )-ImplementationGlue    ®‡ ° d ONLN d * \m hª )r options generate  ° d ONLN d < i ~ u È ( r ~assembly-language sour  í  ° d ONLN d R i È uí )k)ce for the necessary glue, suitable for r  ¡@ ° d ONLN d { ií u¡ )©
unning thr ¿ ° d ONLN d Ö i¬ uÎ )0	ough the   ° d ONLN d é v ~ Ç ≈ (  ~ARM6Asm tool. ° d ONLN d ú à ~ î è *Her  `  ° d ONLN d ü à è î – )e’s an example y† ° d ONLN d ≠ à – î “ )A.    ° d ONLN d Ø ü ~ ´  ( ® ~.h.o   ƒ         .h ° d ONLN d √ ª ~ «Õ *8ProtocolGen -InterfaceGlue {depDir}{Default}.h         ∂ ° d ONLN d ˝ … ê ’Œ +5{COptions} -stdout>"{{CPlusScratch}}{Default}.glue.h" ° d ONLN d3 Â ~ ÒÕ ( Ó ~8{product-asm} "{{CPlusScratch}}{Default}.glue.h"       ∂  ° d ONLN dm Û ê ˇÕ +5-o {targDir}{Default}.h.o ;                         ∂ ° d ONLN d§ êò *,Delete -i "{{CPlusScratch}}{Default}.glue.h" ° d ONLN d— ~) (& ~.impl.h.o   ƒ     .impl.h ° d ONLN dÎ+ ~7« *7ProtocolGen -Package -ImplementationGlue              ∂  ° d ONLN d$9 êE« +4{depDir}{Default}.impl.h {COptions}                ∂  ° d ONLN dZG êSí *+-stdout >"{{CPlusScratch}}{Default}.impl.h"  ° d ONLN dÜc ~o« (l ~7{product-asm} "{{CPlusScratch}}{Default}.impl.h"      ∂ ° d ONLN døq ê}« +4-o {targDir}{Default}.impl.h.o ;                   ∂  ° d ONLN dı êãí *+Delete -i "{{CPlusScratch}}{Default}.impl.h  ° d ONLN d íãò (àí" 
ˇˇˇˇˇˇˇˇ 4 ä ( î * ˇ¿    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h5  
         4⁄ ú˙( ,  	Helvetica              (‡ úGenerating a .pkg File       
 ,  (‡5-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w ¨ ( p úT Åv ° d ONLN d  Z ¨ w1 )he Packer T  0» ° d ONLN d  Z/ wK )Éoo ñÙ ° d ONLN d  ZK wR )l    ä* )–5     
         ° d ONLN d  ú' › ($ úIn general, the   \  ° d ONLN d " ﬁ'  )Bsample   °  ° d ONLN d ) ' )"makeﬁ  ⁄† ° d ONLN d /'% )le å† ° d ONLN d 1&'1 )s c  π‡ ° d ONLN d 41'Ã )!ontained in your DDK has Packer r  	@ ° d ONLN d UÕ' )úules built in to it.   ° d ONLN d j( ú4 ¢ (1 úY @Ä ° d ONLN d k( ¢4 )ou shouldn’t need to r $Ä ° d ONLN d Å(4| )bead this section unless you  ª¿ ° d ONLN d ù(|4 )x"want to add an additional package  ° d ONLN d ø5 úA ∞ (> úpart. ° d ONLN d ≈G úS¯ *NPacker is an MPW tool that generates a package, which is contained in a .pkg ﬁ '† ° d ONLN dG˘S (P˘le. ° d ONLN dY úe ‘ (b úWhen you cr -` ° d ONLN d#Y ’eb )9eate a DDK package, you tell Pa  å  ° d ONLN dBYbet )çcker G† ° d ONLN dFYue! )( to mark the package so that when it is  ° d ONLN dnf úr ¥ (o úloade √@ ° d ONLN dsf ¥r Ã )d, the º` ° d ONLN dyf Õr Ÿ ) Pr    ° d ONLN d|f ⁄r" )otocol Registry r  ª¿ ° d ONLN dçf"ro )Hegisters the DDK   èÄ ° d ONLN dûfprê )Np-class. 8  ° d ONLN d¶fërì )!   äÄ ° d ONLN dßfìrô )Y  K  ° d ONLN d®fôræ )ou do th l† ° d ONLN d∞færÕ )%is b ô† ° d ONLN d¥fÕr$ )y giving Packer the  , 
 Courier   ° d ONLN d»s ú “ (| ú	-autoload   ° d ONLN d—s “ Á )6 and     m  ° d ONLN d÷s Ë* )-autoRemove    m  ° d ONLN d·s*U )B
 switches.  
Ü Z°( 4á Z°(  
± Zπ( 4≤ Zπ( p ≥ Z≥.≥ Z≥.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dÌû Z± ¸ (¨ ZGenerating a .pkg File    V˛ (¨ 5    
         ° d ONLN d¬ úŒ ≠ (À úHer `  ° d ONLN d	¬ ≠Œ9 ) e is an example of using Packer:   ° d ONLN d*Ÿ úÂ ¿ (‚ úPacker  ° d ONLN dIŸÂ	 (‚∂ ° d ONLN dLÁ ÆÛ ¥ ( Æ- ° d ONLN dMÁ ¥Û ¿ )o      ° d ONLN dOÁ ¿Û ≈ )p  ° d ONLN dPÁ ≈Û ˜ )ackagename.       Ä ° d ONLN d[Á ˜Û	 )2pkg  ° d ONLN dvÁÛ	 (∂     ° d ONLN dyı Æ ‚ (˛ Æpackagename      ° d ONLN dúı	 (˛∂ ° d ONLN dü Æ ˆ ( Æ-packageid '      ° d ONLN d´ ˆ	 )Hany1      ` ° d ONLN dØ
 )'} ° d ONLN d…	 )˙∂  ° d ONLN dÃ Æ ‰ ( Æ	-version      ° d ONLN d’ ‰ È )61       ° d ONLN dÓ	 (∂ ° d ONLN dÒ Æ+2 (( Æ-copyright "copyright       ° d ONLN d2+í )Ñ1994 MyCompany, Inc.      «Ä ° d ONLN dí+ò )`"  ° d ONLN d4+	 )r∂  ° d ONLN d7- Æ9 (6 Æ-protocol -aif :      ° d ONLN dG-90 )`	objectdir       L¿ ° d ONLN dP-197 )#:      L¿ ° d ONLN dQ-79k )packagename       =@ ° d ONLN d\-l9Ñ )5.bin ° d ONLN dy-9	 )ò∂  ° d ONLN d|; ÆGå (D Æ%-autoLoad -autoRemove -notify 'cdhl'      ° d ONLN d°;åG¿ )ﬁpackagename     ° d ONLN dæS ú_^ (\ ú,This sample only has one part, which is a pr  Ø‡ ° d ONLN dÍS^_ê )¬otocol part. ‚Ä ° d ONLN dˆSê_í )2     ° d ONLN d˜Sì_ö )A  >¿ ° d ONLN d¯Sö_¶ ) pr  Ö‡ ° d ONLN d˚S¶_ )otocol part contains a   ° d ONLN d` úl … (i úp-class (pr C† ° d ONLN d`  l ).otocol class).  
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 5-0  *	T     )able 5-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 FA H 4h Fr H 4€ FÛ H 4U Fl H ˇ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>5  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Packer  ﬁ¶ ).T  0ò )ool  4⁄ <˙
      
         (‡ <5-2       	 )BPacker Reference     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
  
 ^ < x
 4 ^ < x
  
 à < ê
 4 â < ê
 p  ä < ä ä < ä  
ˇ·ˇ‚7Ç        ˇˇ© ˇÆ ° d ONLN d   u < à ñ ( É <Packer Refer  à ° d ONLN d  u ó à ∑ )[ence   V˛ ( É5    
         ° d ONLN d  ô ~ • ≤ ( ¢ ~The options   ‚  ° d ONLN dˇˇ         ( û ≤*  
 ˇ  ° d ONLN d  ô µ • + for the Packer tool ar ∏` ° d ONLN d 4 ô •J )_e as follows:  , 
 Courier   ° d ONLN d B ∞ ~ º ¢ ( π ~Packer  ° d ONLN d H ∞ ¢ º ® )$   ° d ONLN d K æ ê   ñ ( « ê[ ° d ONLN d L æ ñ   ¢ )-p ° d ONLN d N æ ¢   ® )]  ° d ONLN d Q Ã ê ÿ ñ ( ’ ê[ ° d ONLN d R Ã ñ ÿ ® )-o   ° d ONLN d U Ã ® ÿ “ )[-aif]       ° d ONLN d \ Ã “ ÿ € )*ou ` ° d ONLN d ^ Ã ‹ ÿ ¸ )
tputFile      ∑Ä ° d ONLN d f Ã ¸ ÿ ) ]      ° d ONLN d i ⁄ ê Ê « ( „ êpackageName      ° d ONLN d v Ë ê Ù ú *[- ° d ONLN d x Ë ú Ù “ )	packageid  ° d ONLN d Å Ë “ Ù ÿ )6       ° d ONLN d Ç Ë ÿ Ù ﬂ )id      G@ ° d ONLN d Ñ Ë ‡ Ù Ê )]  ° d ONLN d á ˆ ê Ã ( ˇ ê
[-version       ° d ONLN d ë ˆ Ã ‹ )<vers      *‡ ° d ONLN d ï ˆ › „ )]  ° d ONLN d ò ê ® ( ê[-c       ° d ONLN d ú ® · )outputCreator       A  ° d ONLN d © ‚ Ë ):]  ° d ONLN d ¨ ê ÿ ( ê[-copyright       ° d ONLN d ∏ ÿ  )Hstring      ÒÄ ° d ONLN d æ  ˆ )]  ° d ONLN d ¡  ê, ñ () ê<     ° d ONLN d ¬  ñ, ∑ )partspec       ‡ ° d ONLN d    ∏, æ )">    ° d ONLN d Ã8 ~D Ω (A ~The options ar  '  ° d ONLN d ⁄8 æD )@e explained below  á† ° d ONLN d Î8D )O.    ° d ONLN d ÌH ~T ä (Q ~-p    ° d ONLN d H ⁄T ˇ )\Gives pr ˝Ä ° d ONLN d ¯H ˇT )%ogr  «  ° d ONLN d ˚HT/ )ess info ‡ ° d ONLN dH0TS )"rmation  F  ° d ONLN d
HSTh )# to st }` ° d ONLN dHhTÅ )andar  /Ä ° d ONLN dHÇTó )d err  LÄ ° d ONLN dHóT† )or   ° d ONLN dW ~c Ñ (` ~- ° d ONLN dW Ñc ê )o  ° d ONLN d W êc ¿ )[-aif] <     ° d ONLN d(W ¿c Í )0
outputFile      ∑Ä ° d ONLN d2W Íc  )*>    ° d ONLN d4c ⁄o ﬂ (l ⁄S ø¿ ° d ONLN d5c ﬂo ˜ )peciﬁ  ‡ ° d ONLN d;c ˜o9 )es the output ﬁ  l@ ° d ONLN dKc:oD )Cle.    ° d ONLN dPr ñ~ Æ ({ ñ-aif    ° d ONLN dUr ⁄~ª )D.Makes symbols available to the Hammer debugger ⁄` ° d ONLN dÉr∫~º )‡.    ° d ONLN dÖÅ ~ç µ (ä ~packageName    ° d ONLN dëÅ ⁄ç ˜ )\Speciﬁ ‡ ° d ONLN dòÅ ˜çW )es the package name.     ° d ONLN d≠ÅXçã )aThis name i  ç  ° d ONLN d∏ÅãçÛ )3s placed in the package  ° d ONLN d–ç ⁄ô ˙ (ñ ⁄header  s  ° d ONLN d◊ç ˚ô )!and m  ¥  ° d ONLN d‹çôU )ust be unique.   ° d ONLN dÎú ~® ∫ (• ~
-packageid    ° d ONLN dıú ∫® º )<        ° d ONLN dˆú Ω® √ )<         ° d ONLN d˜ú √®   )id      «@ ° d ONLN d˘ú  ® – )>    ° d ONLN d˚ú ⁄® ˜ )Speciﬁ ‡ ° d ONLN dú ˜®Û )9es a secondary ID, which must be exactly four characters   ° d ONLN d;® ⁄¥  (± ⁄long. æ` ° d ONLN d@® ¥ Ú )   >` ° d ONLN dA® Û¥* )This option i  'Ä ° d ONLN dN®+¥U )8
s not curr ¿ ° d ONLN dX®U¥ )*(ently used by the Newton system, but it  ° d ONLN dÄ¥ ⁄¿ ı (Ω ⁄may b Í¿ ° d ONLN dÖ¥ ı¿ )
e used in  † ° d ONLN dè¥ ¿6 )+futur  Å  ° d ONLN dî¥6¿C )e p  Ã‡ ° d ONLN dó¥C¿F )r  ë‡ ° d ONLN dò¥G¿„ )$oducts as a second test for package  ° d ONLN dº¿ ⁄Ã (… ⁄uniqueness.   ° d ONLN d»œ ~€ Æ (ÿ ~-version    ° d ONLN d–œ Æ€ ∞ )0        ° d ONLN d—œ ±€ ∑ )<         ° d ONLN d“œ ∑€ « )vers      ™‡ ° d ONLN d÷œ «€ Õ )>    ° d ONLN dÿœ ⁄€ ˜ )Speciﬁ ‡ ° d ONLN dﬂœ ˜€w )es a package version number  SÄ ° d ONLN d˙œw€y )Ä.  ”Ä ° d ONLN d˚œy€~ ) I ≤  ° d ONLN d˝œ€ú )f you r  ÷† ° d ONLN dœú€® )e-r  π  ° d ONLN dœ®€ )elease your package,   ° d ONLN d€ ⁄Á… (‰ ⁄6you can update the version number to distinguish it fr  ‡† ° d ONLN dR€…Á¯ )Ôom earlier   ° d ONLN d]Á ⁄Û ( ⁄	versions.   ° d ONLN dgˆ ~ ñ (ˇ ~[-c       ° d ONLN dkˆ ñ œ )outputCreator       A  ° d ONLN dxˆ – ÷ ):]    ° d ONLN dz ⁄ ˜ +
Speciﬁ  ‡ ° d ONLN dÅ ˜ )	es the cr  
  ° d ONLN dä{ )%eator for the output ﬁ /  ° d ONLN d°{Ö )_le.    ° d ONLN d• ~ ∫ ( ~
-copyright    ° d ONLN dØ ∫ º )<        ° d ONLN d∞ Ω √ )<         ° d ONLN d± √ € )string      qÄ ° d ONLN d∑ € Á )>    ° d ONLN dª ⁄) ﬂ (& ⁄S ø¿ ° d ONLN dº ﬂ) ˜ )peciﬁ  ‡ ° d ONLN d¬ ˜) );es an optional copyright string that will be placed in the   ° d ONLN d˝) ⁄5R (2 ⁄package header for your pr  Œ¿ ° d ONLN d)R5u )xotection 2  ° d ONLN d)v5x )$.  ° d ONLN d!8 ~D Ñ (A ~<   è@ ° d ONLN d"8 ÑD » )miscpackageflags    ;‡ ° d ONLN d28 …D — )E>  ° d ONLN d5D ⁄P≠ +/Described in the section immediately following. ° d ONLN deS ~_ Ñ (\ ~<   è@ ° d ONLN dfS Ñ_ ß )partSpec    ª† ° d ONLN dnS ß_ Ø )#>  ° d ONLN dqS ⁄_ )3
Described  |  ° d ONLN d{S	_≠ )/%in the section immediately following.  ° d ONLN d°q ~} ó (z ~The <   À  ° d ONLN d¶q ó} ∫ )partSpec    ˜` ° d ONLN dÆq ∫}? )#> option describes the type of   /¿ ° d ONLN dÕq@}V )Üthe p  è@ ° d ONLN d“qV}‘ )art, the name of the output ﬁ  N¿ ° d ONLN dq’}ı )le, and  ° d ONLN d¯~ ~ä ≈ (á ~various options.  ·  ° d ONLN d~ ≈ä   )G I ø† ° d ONLN d
~ Àä@ )t has the following format:   
ñ <¶
 4ñ <•
 p ò Eò ’ò Eò ’  
ˇ·ˇ‚7Ç      ° d ONLN dˇˇ         (ß P*   ,  Times          ° d ONLN dˇˇ         +The example makeﬁ œ  ° d ONLN dˇˇ         )Ales include the      ° d ONLN dˇˇ         )1-longalignpartdata   n  ° d ONLN dˇˇ         )V2 option. This option is no longer needed, because  ° d ONLN dˇˇ         (≥ XGPacker now always aligns part data. It is included in the example makeﬁ ©  ° d ONLN dˇˇ         (≥X#les in case you happen to be using  ° d ONLN dˇˇ         (º Xan older version of Packer  ?Ä ° d ONLN dˇˇ         )\.  
ˇˇˇˇˇˇˇˇ 4 õ ( ÿ * 4 Í ( Ù * 4 (, * 4J (ô * 4™ (¿ * 4¯ (_ * 4s (} * 4• (ø * ˇ ∆    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>5  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe Packer  ﬁ¶ ).T  0ò )ool  4⁄ ú˙(         (‡ úPacker Reference       
 ,  (‡5-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( , 
 Courier       
 ° d ONLN dˇˇ         ( e Æ<     ° d ONLN d   \ ¥ h ÿ )partType      '  ° d ONLN d  \ Ÿ h ﬂ )%>  ° d ONLN d  j Æ v “ ( s Æ[-aif]      ° d ONLN d  x Æ Ñ æ *part '¿ ° d ONLN d  x ø Ñ ƒ )F  ∂‡ ° d ONLN d  x ƒ Ñ Õ )ile       ° d ONLN d  Ü Æ í  ( è Æ[-autoLoad] ° d ONLN d * î Æ † ¸ *[-autoRemove]  ° d ONLN d 9 ¢ Æ Æ ¸ *[-compressed       ° d ONLN d F ¢ ¸ Æ) )N
compressor      ´¿ ° d ONLN d P ¢) Æ/ )-]  ° d ONLN d S ∞ Æ º ‰ ( π Æ	[-notify      ° d ONLN d \ ∞ ‰ º ı )6type      ∑Ä ° d ONLN d ` ∞ ı º ˚ )       ∑Ä ° d ONLN d a ∞ ˚ º
 )info      E` ° d ONLN d e ∞ º )]    ° d ONLN d g √ ú œ € ( Ã úThe options ar  '  ° d ONLN d u √ ‹ œ, )@e explained below  á† ° d ONLN d Ü √+ œ- )O.    ° d ONLN d à ” ú ﬂ ¢ ( ‹ ú<     ° d ONLN d â ” ¢ ﬂ ∆ )partType      '  ° d ONLN d ë ” « ﬂ Õ )%>    ° d ONLN d ì ” ¯ ﬂ )1Speciﬁ ‡ ° d ONLN d ö ” ﬂÜ )es the part type; values ar  
† ° d ONLN d µ ”á ﬂé )re    T@ ° d ONLN d ∑ ”é ﬂƒ )	-protocol    T@ ° d ONLN d ¿ ”ƒ ﬂ… )6,    T@ ° d ONLN d ¬ ”… ﬂÌ )-frame   T@ ° d ONLN d » ”Ì ﬂ˚ )$, or   º` ° d ONLN d Ã ”˚ ﬂ ) -raw    —` ° d ONLN d — ” ﬂ ).    ° d ONLN d ” ‚ ú Ó ¥ ( Î ú-aif    ° d ONLN d ÿ ‚ ¯ ÓŸ )\.Makes symbols available to the Hammer debugger ⁄` ° d ONLN d ‚ÿ Ó⁄ )‡.    ° d ONLN d Ò ú ˝ ° ( ˙ úp ° d ONLN d	 Ò ° ˝ ¨ )art  '¿ ° d ONLN d Ò ≠ ˝ ≤ )F  ∂‡ ° d ONLN d Ò ≤ ˝ ª )ile     ° d ONLN d Ò ¯ ˝ )FSpeciﬁ ‡ ° d ONLN d Ò ˝D )es the sour  SÄ ° d ONLN d# ÒE ˝V )0ce ﬁ   ° d ONLN d( ÒW ˝ß )le of the part data. à  ° d ONLN d< Òß ˝Ø )P T (‡ ° d ONLN d> Ò∞ ˝— )	he entir Œ† ° d ONLN dF Ò— ˝ )!e data fork  ° d ONLN dR ˝ ¯	[ ( ¯becomes the part data.  @ ° d ONLN dh ˝\	d )d F ` ° d ONLN dj ˝d	ë )or parts cr  $‡ ° d ONLN du ˝ë	¬ )-eated with     ° d ONLN dÄ ˝¬	" )1ARM6Link, the entry  ° d ONLN dî	 ¯7 ( ¯point must be   Ä ° d ONLN d¢	8= )@a  Ä ° d ONLN d£	=K )t of }† ° d ONLN dß	Kj )fset zer )  ° d ONLN dØ	kœ ) o in the image and the     ` ° d ONLN d∆	–Ë )e-bin   ` ° d ONLN d 	Ë ) format can  ° d ONLN d÷ ¯! ( ¯be used.    ° d ONLN dﬂ$ ú0 “ (- ú	-autoLoad   ° d ONLN dÈ$ ¯0 )\Speciﬁ ‡ ° d ONLN d$0[ )es auto loading. ˘  ° d ONLN d $[0c )F T ô¿ ° d ONLN d$d0€ )	his option is available to pr  N¿ ° d ONLN d$‹0 )xotocol parts.  æ` ° d ONLN d,$0 )6   ° d ONLN d-0 ¯< (9 ¯W ° d ONLN d.0<√ )
0hen the part is installed, it is automatically r 8Ä ° d ONLN d^0ƒ<· )¬egister  á† ° d ONLN de0·<	 )
ed in the  ° d ONLN do< ¯H (E ¯Pr  N† ° d ONLN dq<HD )
otocol Registry  û† ° d ONLN dÄ<CHE )A.  † ° d ONLN dÅ<FHK ) I ˝  ° d ONLN dÉ<KH% )3f you specify this option, you should also specify     ° d ONLN d∂H ¯T: (Q ¯-autoRemove   ° d ONLN d¡H:T< )B.    ° d ONLN d√W úc ﬁ (` ú-autoRemove   ° d ONLN dœW ¯c )\Speciﬁ ‡ ° d ONLN d÷Wc: )	es auto r  {Ä ° d ONLN dﬂW;c^ )&emoval.  ù@ ° d ONLN dÊW^cf )# T >  ° d ONLN dËWgcﬁ )	his option is available to pr  Û  ° d ONLN dWﬁc )wotocol parts.  b† ° d ONLN dWc )7   ° d ONLN dc ¯o (l ¯W ° d ONLN dcoG )
hen the part is r  Î@ ° d ONLN d%cGo– )Eemoved, it is automatically unr  ÖÄ ° d ONLN dDc—oÓ )äegister  ‘† ° d ONLN dKcÓo )ed fr  R‡ ° d ONLN dPco$ )om the   ° d ONLN dWo ¯{ (x ¯Pr  N† ° d ONLN dYo{D )
otocol Registry  û† ° d ONLN dhoC{E )A.  † ° d ONLN dioF{K ) I ˝  ° d ONLN dkoK{% )3f you specify this option, you should also specify     ° d ONLN dû{ ¯á. (Ñ ¯	-autoLoad   ° d ONLN dß{.á0 )6.    ° d ONLN d©ä úñ ﬁ (ì ú-compressed   ° d ONLN d¥ä ﬁñ ‡ )B        ° d ONLN dµä ·ñ
 )	compresso  H  ° d ONLN dæä
ñ ))r     ° d ONLN d¿ñ ¯¢ ˝ (ü ¯S ø¿ ° d ONLN d¡ñ ˝¢ )peciﬁ  ‡ ° d ONLN d«ñ¢ )es that the part is compr  à` ° d ONLN d‡ñÄ¢¥ )kessed, wher  h` ° d ONLN dÎñ¥¢ª )4e    ≤  ° d ONLN dÌñª¢Ë )
compressor    ›¿ ° d ONLN d˜ñË¢ )- is the name   ° d ONLN d¢ ¯Æ
 (´ ¯of a  I` ° d ONLN d	¢Æ. )	p-class t  4` ° d ONLN d¢/Æ∑ )$hat should be used to decompr    ° d ONLN d/¢∑Æ )àess the part data. ¶` ° d ONLN dA¢Æ
 )K P 0  ° d ONLN dC¢Æ% )	acker  ° d ONLN dIÆ ¯∫b (∑ ¯does not support compr  î‡ ° d ONLN d_Æb∫÷ )jession, and you need to pr    ° d ONLN dyÆ◊∫È )ue-pr ‰† ° d ONLN d}ÆË∫& )ocess the part   ° d ONLN då∫ ¯∆F (√ ¯data with an appr K‡ ° d ONLN dù∫G∆Ö )Oopriate compr  ´` ° d ONLN d™∫Ö∆µ )>essor befor  ∂¿ ° d ONLN dµ∫µ∆ı )0e using Packer @ ° d ONLN d√∫ı∆˜ )@.  ï@ ° d ONLN dƒ∫˜∆¸ ) I s¿ ° d ONLN d∆∫˝∆ )n the  ° d ONLN dÃ∆ ¯“ (œ ¯rar 7† ° d ONLN dœ∆“ú )#e case that you have included a str  ˙@ ° d ONLN dÚ∆ú“ )óeamed frame part, the part   ° d ONLN d“ ¯ﬁY (€ ¯must be marked with     ∫  ° d ONLN d!“Yﬁ› )a-compressed "streamed"   ∫  ° d ONLN d7“›ﬁﬂ )Ñ.    ° d ONLN d9· úÌ ∆ (Í ú-notify   ° d ONLN d@· ∆Ì » )*        ° d ONLN dA· …Ì ⁄ )type    7Ä ° d ONLN dE· ⁄Ì ‹ )     ∑Ä ° d ONLN dF· ‹Ì Î )info    ° d ONLN dK· ¯Ì )Speciﬁ ‡ ° d ONLN dR·Ìπ )'es that the part handler for the given     ` ° d ONLN dy·∫ÌÀ )•type    N‡ ° d ONLN d}·ÀÌ ) should be notiﬁ -† ° d ONLN dé·Ì  )Hed   ° d ONLN dëÌ ¯˘Ñ (ˆ ¯!when this part is installed and r z` ° d ONLN d≤ÌÑ˘™ )åemoved.  ô  ° d ONLN dπÌ™˘≤ )& T 9‡ ° d ONLN dªÌ≥˘¿ )	he     T‡ ° d ONLN dæÌ¿˘— )type    å` ° d ONLN d¬Ì—˘ ) must be four  ° d ONLN d–˘ ¯Q ( ¯bytes in length. The    ˚Ä ° d ONLN dÂ˘Q` )Yinfo    â` ° d ONLN dÈ˘aØ ) parameter speciﬁ  àÄ ° d ONLN d˚˘∞» )Oes an    ° d ONLN d˘… )ASCII string (not  ° d ONLN d ¯< ( ¯necessarily null  J† ° d ONLN d#=C )E-t ‡‡ ° d ONLN d%C" )2erminated) that’s passed to the part handler when  ° d ONLN dW ¯O ( ¯the part is installed.  ©  ° d ONLN dmOT )W I á† ° d ONLN doUÑ )n the futur  ü‡ ° d ONLN dzÑç )/e,     iÄ ° d ONLN d}éù )
info    ˜` ° d ONLN dÅùÙ ) may support a mor [‡ ° d ONLN dìı )Xe ﬂ  π¿ ° d ONLN dó )exible   ° d ONLN dû ¯)Q (& ¯information model ( ¶Ä ° d ONLN d±Q)} )Y
including, §† ° d ONLN dª~)Î )- bits, frames, and so on).   ° d ONLN dÿ, ¯8 ˛ (5 ¯T µ¿ ° d ONLN dŸ, ˝8 )o ensur  O` ° d ONLN d‡,8ã )!e null termination on an     XÄ ° d ONLN d˘,ã8ö )minfo    Ê` ° d ONLN d˝,ö8¢ ) ﬁ s  ° d ONLN d ,£8 )	eld, or to specify any   ° d ONLN d8 ¯D- (A ¯non-standar † ° d ONLN d"8.D_ )6d character  ü  ° d ONLN d-8^Dû )0, the sequence     ¯@ ° d ONLN d<8ûDº )@\$XX     ¯@ ° d ONLN dA8ºD¿ )c  hÄ ° d ONLN dB8¡D )an be used, wher k† ° d ONLN dR8D )Ke    µ@ ° d ONLN dT8D )X  µ@ ° d ONLN dU8D )X    µ@ ° d ONLN dV8D! )   ° d ONLN dWD ¯P ˚ (M ¯r E  ° d ONLN dXD ¸P
 )epr  ’¿ ° d ONLN d[D
PÆ )'esents an 8-bit hex value; for instance    ° d ONLN dÑS ¯_≤ (\ ¯-notify 'null' "hello there\$00 ° d ONLN d£S≤_∏ )∫"  
ˇˇˇˇˇˇˇˇ 4 z F Ñ H 4 ≤ F º H 4 ’ F ˝ H 4§ FÆ H 4 F H 4 F) H 4U F_ H ˇ∏    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>5  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Packer  ﬁ¶ ).T  0ò )ool  4⁄ <˙
      
         (‡ <5-4       	 )BPacker Reference     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h ë ( e ~The   , 
 Courier   ª¿ ° d ONLN d  \ ë h ó )<      ª¿ ° d ONLN d  \ ó h € )miscpackageflags      h` ° d ONLN d  \ ‹ h ‚ )E>    h` ° d ONLN d  \ ‚ hQ ) gives additional options.   ° d ONLN d 1 l ~ x “ ( u ~-copyprotected    ° d ONLN d @ l ⁄ x^ )\Marks the package as copy-pr ∫† ° d ONLN d \ l^ x˜ )Ñ&otected. (This option sets a bit that  ° d ONLN d Ç x ⁄ Ñä ( Å ⁄&suggests the package should be copy-pr  í` ° d ONLN d ® xä Ñˇ )∞otected. It does nothing to  ° d ONLN d ƒ Ñ ⁄ ê Ò ( ç ⁄enfor ©` ° d ONLN d … Ñ Ò ê )	ce this r  ·` ° d ONLN d “ Ñ ê5 )"equest.)   ° d ONLN d € ì ~ ü Ã ( ú ~-dispatchonly   ° d ONLN d È ì ⁄ üu )\!Marks the package for immediate r  V¿ ° d ONLN d
 ìu ü	 )õ#emoval after it has been installed.    ° d ONLN d. ¢ ~ Æ “ ( ´ ~-nocompression    ° d ONLN d= ¢ ⁄ Æ6 )\Keeps the package fr e  ° d ONLN dQ ¢6 Ær )\om being stor  Ä ° d ONLN d^ ¢s Æ® )=ed in compr  "Ä ° d ONLN di ¢® ÆÌ )5essed form in a  ° d ONLN dy Æ ⁄ ∫¶ ( ∑ ⁄0storage device. This option is useful for speed.    ° d ONLN d™ Ω ~ … ú ( ∆ ~-base   ° d ONLN dØ Ω ú … û )        ° d ONLN d∞ Ω ü … … )	<address>     ° d ONLN d∫ Ω ⁄ … ˜ );Speciﬁ ‡ ° d ONLN d¡ Ω ˜ …> )es the base addr ﬂ† ° d ONLN d— Ω> …î )Gess for the package. ° d ONLN dÊ Œ ~ ⁄ Ñ ( ◊ ~P â† ° d ONLN dÁ Œ Ñ ⁄ ü )arts ar  @† ° d ONLN dÓ Œ † ⁄. )!e placed in the package in the or  ç` ° d ONLN d Œ. ⁄r )éder that they ar m  ° d ONLN d Œr ⁄ï )De speciﬁ $¿ ° d ONLN d( Œñ ⁄˙ )$ed. When a package is  ° d ONLN d> € ~ Á ( ‰ ~$installed, it is loaded in the same   ê  ° d ONLN db € Á- )ìspeciﬁ ˛@ ° d ONLN di €- Á: )ed   c† ° d ONLN dl €; ÁD )or û  ° d ONLN dn €D ÁR )	der  ∏¿ ° d ONLN dq €R Áœ ). This is important if parts ar  g¿ ° d ONLN dê €– Á◊ )~e  ° d ONLN dí Ë ~ Ù í ( Ò ~inter 
¿ ° d ONLN dó Ë ì Ù‘ )Gdependent. For example, an application may depend on the fact that a pr  …† ° d ONLN dﬁ Ë‘ Ù ( Ò‘otocol part   ° d ONLN dÍ ı ~   ( ˛ ~was loaded befor  R† ° d ONLN d˙ ı   )Le the application. 0Ä ° d ONLN d ı  )L O å` ° d ONLN d ı S )
n package r  }  ° d ONLN d ıS™ )3emoval, the parts ar 5@ ° d ONLN d- ı´∂ )Xe r  C‡ ° d ONLN d0 ı∂Î )emoved in r  a` ° d ONLN d; ıÎ	 )5everse   ° d ONLN dB ~ á ( ~or  ∫Ä ° d ONLN dD á ï )	der  ’  ° d ONLN dG ï ó ).  ° d ONLN dI ~  Ö ( ~A ∫† ° d ONLN dJ Ö  ‘ ) successful build r  &Ä ° d ONLN d] ’  )Pesults in the cr Ë` ° d ONLN dm J )?eation of a ﬁ  y¿ ° d ONLN d{K å )7le, with the suf ∆† ° d ONLN dãå í )Aﬁ  ”` ° d ONLN dçí ó )x    ¸  ° d ONLN déó Ø ).pkg   ¸  ° d ONLN díØ ‚ ), which is a   ° d ONLN dü! ~- Õ (* ~loadable package. ° d ONLN d±3 ~?9 *+Packages can be loaded either as a data str  r  ° d ONLN d‹39?f )ª
eam or dir A  ° d ONLN dÊ3g?Ö ).ectly fr Õ† ° d ONLN dÓ3Ö?ª )	om memory  ‰@ ° d ONLN d˜3∫?º )5.  d@ ° d ONLN d¯3Ω?≈ ) F s` ° d ONLN d˙3≈? )or example, a  ° d ONLN d@ ~LT (I ~1package could be loaded serially using a data str ÏÄ ° d ONLN d9@TLs )÷eam pr —@ ° d ONLN d?@sLœ )otocol, or it could be   °‡ ° d ONLN dV@–L )]loaded   ° d ONLN d]M ~Y Ñ (V ~d õ¿ ° d ONLN d^M ÑY ä )ir I  ° d ONLN d`M ãY ¢ )ectly  º‡ ° d ONLN dfM ¢Y © )fr ’¿ ° d ONLN dhM ©Y æ )om a ü@ ° d ONLN dlM øY Í ) PCMCIA  e@ ° d ONLN dsM ÍY )+ ROM car ô† ° d ONLN d{MY )*d. ° d ONLN d~_ ~kö (h ~@When a package is installed, the package is scanned and parts ar  ‡ ° d ONLN dæ_õkÁ (hõe dispersed to dif  a† ° d ONLN d–_ÁkÛ )Lfer  D  ° d ONLN d”_Ûk )ent  ° d ONLN d◊l ~x ‘ (u ~parts of the system.  Ñ  ° d ONLN dÎl ‘x ‹ )V T $¿ ° d ONLN dÌl ›x )	Ahe Package Manager keeps track of what was loaded, and can later   ° d ONLN d.y ~Ö π (Ç ~initiate the pr ˝` ° d ONLN d=y πÖ · );
ocess of r µ  ° d ONLN dGy ‚ÖR ))emoving a given package  J` ° d ONLN d^ySÖU )q.  
ˇˇˇˇˇˇˇˇ 4 ^ ( ⁄ * 4ç (ó * ˇ≤    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h6  
         4⁄ ú˙(  
      ,     (‡6-1 ,  	Helvetica     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w ∂ ( p úW ˆÜ ° d ONLN d  Z ¥ w ¯ )riting   ⁄` ° d ONLN d  Z ˘ w\ )E	P-Class I  áF ° d ONLN d  Z] w√ )d	nterfaces    ä* )æ6     
         ° d ONLN d  ú' ¢ ($ úY @Ä ° d ONLN d  ¢' )ou only need to write  q¿ ° d ONLN d 4'& )a	p-class i  ¿ ° d ONLN d =''Ü )$mplementations in or ﬂ  ° d ONLN d QÖ'Ÿ )^der to use Newton  uÄ ° d ONLN d c⁄'Ù )UDDKs o  ° d ONLN d gı' ). This   ° d ONLN d n( ú4˙ (1 úPsection describes how to write your own interfaces, in case you want to do that.  ]‡ ° d ONLN d æ(˚4˝ (1˚  ° d ONLN d ¿: úF (C úIf you make your own  á  ° d ONLN d ’:F$ )e	p-class i    ° d ONLN d ﬁ:%Fc )$nterfaces, ther  U@ ° d ONLN d Ì:cFs )>e ar c‡ ° d ONLN d Ò:sF )%e some additional things you need to   ° d ONLN dG úS (P úthink about in making   â  ° d ONLN d,GS$ )e	p-class i    ° d ONLN d5G%Sò )$mplementations for those   Œ  ° d ONLN dNGòSª )s	p-class i  _  ° d ONLN dWGºS )$nterfaces. Those ar  ≠  ° d ONLN djGS )Re  ° d ONLN dlT ú` “ (] údiscussed in  —† ° d ONLN dxT “`v )6"“Making P-Class Implementations Fr Ä ° d ONLN döTw`á )•om   ¨` ° d ONLN dùTá`ç )Y  l‡ ° d ONLN dûTç`˜ )our Interfaces” on page  w  ° d ONLN d∂T˜` )j6-3  À  ° d ONLN dπT` ).  ° d ONLN dªf úr ø (o ú	P-class i Ä ° d ONLN dƒf ¿r Á )$	nterfaces  ≥@ ° d ONLN dÕf Ár Ú )' ar  ¯@ ° d ONLN d–f Úr{ ) e similar to C++ classes. The gr ’  ° d ONLN df{r£ )â
eatest dif ‘Ä ° d ONLN d˙f£rØ )(fer  ∑  ° d ONLN d˝fØr )ence is that all methods   ° d ONLN ds ú § (| úar  E  ° d ONLN ds • )	3e virtual by default. That is, methods generally ar  (` ° d ONLN dKs )⁄e not implemented in the   ô† ° d ONLN dds )qp-class  ° d ONLN dlÄ úå û (â úi h` ° d ONLN dmÄ üå · )nterface, but ar ‹@ ° d ONLN d}Ä ·å| )B#e implemented in the subclass (the   ‡ ° d ONLN d†Ä}å† )ú	p-class i  §‡ ° d ONLN d©Ä†åÎ )#mplementation).  v@ ° d ONLN dπÄÏåÚ )LY  6¿ ° d ONLN d∫ÄÚå )ou can   ° d ONLN d¡ç úô ‚ (ñ úexplicitly declar ⁄† ° d ONLN d“ç ‚ô )Fe a method   , 
 Courier   f‡ ° d ONLN d›çôR )4
NONVIRTUAL   f‡ ° d ONLN dÁçRô  )<), in which case it is implemented in the   ÿ` ° d ONLN dç ô  )Æp-class  ° d ONLN dö ú¶ û (£ úi h` ° d ONLN dö ü¶U ))nterface and cannot be overridden in the   l  ° d ONLN dBöU¶x )∂	p-class i  ˝  ° d ONLN dKöx¶¿ )#mplementation.   ° d ONLN d[¨ ú∏ ≠ (µ úHer `  ° d ONLN d^¨ ≠∏ Ω )e ar n† ° d ONLN db¨ Ω∏ ˙ )e the main dif M¿ ° d ONLN dp¨ ˙∏ )=fer  0@ ° d ONLN ds¨∏H )ences between  ë` ° d ONLN dÅ¨H∏k )B	p-class i  "` ° d ONLN dä¨l∏‚ )$nterfaces and C++ classes.   9  ° d ONLN d•¨‚∏ )vP-class  ° d ONLN d≠π ú≈ û (¬ úi h` ° d ONLN dÆπ ü≈ … )
nterfaces: ,  Zapf Dingbats     ° d ONLN dπœ ú◊ † (’ ún    
 ° d ONLN dªÃ ®ÿ ≈ )inherit  Ú  ° d ONLN d¬Ã ≈ÿ Â ) only fr …` ° d ONLN d Ã Âÿ ) 	om class     ÂÄ ° d ONLN d”ÃÿC )(	TProtocol      ° d ONLN d›· úÈ † (Á ún    
 ° d ONLN dﬂﬁ ®Í3 )cannot use multiple inheritance      ° d ONLN dˇÛ ú˚ † (˘ ún    
 ° d ONLN d ®¸ Ô )cannot inherit fr  ’‡ ° d ONLN d Ô¸î )G%om classes that have virtual methods       ° d ONLN d8 ú † ( ún    
 ° d ONLN d: ® € )can use the    ,¿ ° d ONLN dF ‹ )4
NONVIRTUAL   Œ` ° d ONLN dP; ); keywor  «¿ ° d ONLN dW;Ç )$d, although ther ﬂ  ° d ONLN dgÇí )Ge ar Ì¿ ° d ONLN dkíù )e r  ¸` ° d ONLN dnù˚ )estrictions on its use,  ° d ONLN dÜ ® ‡ ( ®described in  ` ° d ONLN dì · )9“Non-V ©Ä ° d ONLN dôß )"$irtual Method Declarations” on page  <¿ ° d ONLN dΩ®µ )•6-2      ° d ONLN d¡# ú+ † () ún    
 ° d ONLN d√  ®, Í )cannot use the     ∂  ° d ONLN d“  Í, )Bvirtual    ∂  ° d ONLN dŸ ,8 )* keywor  Ø` ° d ONLN d‡ 8,@ )$d.     ° d ONLN d„5 ú= † (; ún    
 ° d ONLN dÂ2 ®> “ )
default ar 0  ° d ONLN dÔ2 ”> )+gument expr  ±  ° d ONLN d˙2>- )8essions  ·  ° d ONLN d2->E )"must   ªÄ ° d ONLN d2F>˘ )+consist only of a single integer or identiﬁ  ¶‡ ° d ONLN d32˙>˛ )¥e  pÄ ° d ONLN d42ˇ> )r      ° d ONLN d6G úO † (M ún    
 ° d ONLN d8D ®P ¨ )c  @ ° d ONLN d9D ¨P! )annot have inline methods      ° d ONLN dSY úa † (_ ún    
 ° d ONLN dUV ®b Ÿ )
cannot deﬁ Ω  ° d ONLN d`V Ÿb] )1ne operator functions, such as ƒ` ° d ONLN d~V]b_ )Ñ     D` ° d ONLN dV`bú )
operator = D` ° d ONLN dâVúb¢ )<=      ° d ONLN dãk ús † (q ún    
 ° d ONLN dçh ®t ¨ )c  @ ° d ONLN déh ¨tJ )%annot have global or static variables      ° d ONLN d¥} úÖ † (É ún    
 ° d ONLN d∂z ®Ü ˚ )cannot have constr °@ ° d ONLN d»z ˚ÜB )Suctors and destr 0† ° d ONLN dÿzCÜZ )Huctor  RÄ ° d ONLN d›zZÜ^ )s      ° d ONLN dﬂè úó † (ï ún    
 ° d ONLN d·å ®ò ÿ )
must have    ¿ ° d ONLN dÎå Ÿò Î )1New    ¿ ° d ONLN dÓå Îò  ) and     ‡ ° d ONLN dÛåò% )Delete   ‡ ° d ONLN d˘å%ò" )$8 methods if you want implementations to be able to have    ° d ONLN d1ò ®§ ∫ (° ®New   ° d ONLN d4ò ∫§ œ ) and     m  ° d ONLN d9ò –§ Ù )Delete   m  ° d ONLN d?ò Ù§ )$ methods  
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 6-0  *	T     )able 6-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 ^ F' H 4< F¸ H 4" FP H 4| F§ H ˇé    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>6  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~W ßÇ )riting P-Class Interfaces  4⁄ <˙
      
         (‡ <6-2       	 )BP-Class Interface Declarations     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ,  Zapf Dingbats      ° d ONLN d   _ ~ g Ç ( e ~n    
 ° d ONLN d  \ ä h é )s  Ω  ° d ONLN d  \ é h4 )&hould not be instantiated on the stack È† ° d ONLN d ) \4 h6 )¶;  i† ° d ONLN d * \7 hK ) ther  å  ° d ONLN d / \K há )e is a work-ar b  ° d ONLN d = \á h∆ )<ound for this r    ° d ONLN d L \« hı )@estriction,  ° d ONLN d X h ä t ¬ ( q ädiscussed in  Q† ° d ONLN d e h √ tî )9/“Instantiating P-Classes On the Stack” on page   ì† ° d ONLN d î hî t° )—6-3  ° d ONLN d ò y ~ Ö á ( Ç ~M ı@ ° d ONLN d ô y á Ö ¬ )	any of these r H  ° d ONLN d ß y √ Ö ˚ )<estrictions ar –  ° d ONLN d µ y ˚ Ö_ )8e the same as those on   e` ° d ONLN d Ã y` ÖÉ )e	p-class i  ˆ` ° d ONLN d ’ yÉ ÖÏ )#mplementations, and ar † ° d ONLN d Î yÌ ÖÙ )je  ° d ONLN d Ì Ü ~ í › ( è ~discussed in detail in  ‡ ° d ONLN d Ü ﬁ í© )`+“Implementing a P-Class” beginning on page   ¿ ° d ONLN d/ Ü© í∂ )À3-5  e† ° d ONLN d2 Ü∂ í∏ ).       	 ° d ONLN d4 † ~ ´ ñ ( ® ~NOTE        
 ° d ONLN d9 ≠ ~ π *!When you build a package with mor  /@ ° d ONLN dZ ≠  πP )¢e than one   nÄ ° d ONLN de ≠P πp )0p-class,   ° d ONLN dm ≠q π¬ )! one and only one  ° d ONLN d π ~ ≈ ô ( ¬ ~of the  &¿ ° d ONLN dÜ π ö ≈ Ã )p-classes m  ™  ° d ONLN dë π Ã ≈ Ú )2	ust be pr  H‡ ° d ONLN dö π Û ≈ )'epar Ÿ† ° d ONLN dû π ≈> )ed using the   , 
 Courier   ©` ° d ONLN d´ π? ≈o )9-package   ©` ° d ONLN d≥ πo ≈ú )0 option to   ° d ONLN dæ ≈ ~ — á ( Œ ~Pr  N† ° d ONLN d¿ ≈ à — Ë )
otocolGen. When ther   ° d ONLN d‘ ≈ È — )ae is a DDK   ¿† ° d ONLN dﬂ ≈ —: )1p-class, i@ ° d ONLN dÁ ≈; —j )! the one pr  û@ ° d ONLN dÚ ≈j —} )/epar /  ° d ONLN dˆ ≈~ —¶ )	ed using     ° d ONLN dˇ — ~ › Æ ( ⁄ ~-package    ° d ONLN d — Æ › ˇ )0 must be the DDK   E¿ ° d ONLN d —  ›  )Rp-class. Ó` ° d ONLN d  —  ›" )        n` ° d ONLN d" ‘( ‹- )u   
 „ < ˛
 4 ‰ < ˛
  
 <
 4 <
 p  < <  
ˇ·ˇ‚7Ç     ˇˇ© ˇÆ ° d ONLN d% ˚ < z (	 <	P-Class I B2 ° d ONLN d. ˚ { )?nterface Declarations    V˛ (	6    
         ° d ONLN dE ~+ Ö (( ~A ∫† ° d ONLN dF Ö+ á )   :† ° d ONLN dG à+ ´ )	p-class i  À† ° d ONLN dP ´+ã )#5nterface declaration is essentially the same as an or  [  ° d ONLN dÖå+˜ )·dinary class declaration   ° d ONLN dû, ~8 å (5 ~wit ¿ ° d ONLN d°, ç8 © )h the r  uÄ ° d ONLN d®, ©8 “ )
estriction {` ° d ONLN d≤, “8 ÿ ))s  8` ° d ONLN d¥, Ÿ8S )listed in the immediately pr ≠¿ ° d ONLN d–,S8ñ )zeceding section  ~` ° d ONLN dﬂ,ó8≠ )D. Her  ^` ° d ONLN d‰,≠8Ì )e is the syntax:   ° d ONLN dıC ~O Ñ (L ~P ° d ONLN dˆC ÑO ¥ )ROTOCOL  ° d ONLN d˛C ¥O ∫ )0c  ° d ONLN dˇC ∫Oå )#lassname : public TProtocol { ... }  ° d ONLN d"CåOí )“;    ° d ONLN d$V ~b à (_ ~W Û` ° d ONLN d%V áb ‹ )	ithin the class body eÄ ° d ONLN d9V ‹bw )U$, the following declaration forms ar &† ° d ONLN d]Vxbß )úe allowed:       ° d ONLN dil ~t Ç (r ~n    
 ° d ONLN dki äu ‰ )method declarations      ° d ONLN d~ ~Ü Ç (Ñ ~n    
 ° d ONLN dÅ{ äá )non-virtual method declarations      ° d ONLN d°ê ~ò Ç (ñ ~n    
 ° d ONLN d£ç äô ê )ﬁ  å¿ ° d ONLN d•ç êô ÷ )eld declarations     ° d ONLN d∂¢ ~™ Ç (® ~n    
 ° d ONLN d∏ü ä´ ¿ )export-contr 1@ ° d ONLN dƒü ¡´ )7ol declarations  ° d ONLN d‘∞ ~º (π ~"Note that although data members ar  ` ° d ONLN dˆ∞ºm )°e allowed, they ar ì  ° d ONLN d∞mºâ )Ne not r  ´  ° d ONLN d∞âº˜ )ecommended because, if   ° d ONLN d&Ω ~…í (∆ ~9you use data members, you must not change them when you r ä‡ ° d ONLN d_Ωí…˜ (∆íelease new versions of  ° d ONLN dv  ~÷ ﬁ (” ~your p-class interface.  
˚ <
 4¸ <
 p ˝ ~˝
˝ ~˝
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN déÏ ~˚ ˚ *$Method Declarations    €r (˜6      
         ° d ONLN d£ ~ Ñ ( ~t ° d ONLN d§ ÑV )#ype methodname ( [ arg [, arg...] )  ° d ONLN d«V\ )“;    ° d ONLN d… ~  Ö ( ~A G@ ° d ONLN d  Ü  ó )n or ”  ° d ONLN dŒ ó  )dinary method declaration. è@ ° d ONLN dË  )y T 0  ° d ONLN dÍ & )	he     K  ° d ONLN dÌ& > )type   K  ° d ONLN dÒ> N ) is r  5` ° d ONLN dˆN e )equir  L† ° d ONLN d˚e t )ed;    2  ° d ONLN dˇu á )int    2  ° d ONLN dá À ) is not assumed  õ  ° d ONLN dÀ Õ )D.    ° d ONLN d+ ~7 Ñ (4 ~s ° d ONLN d+ Ñ7Ä )*tatic type methodname ( [ arg [, arg...] ) ° d ONLN d>+Ä7Ü )¸;    ° d ONLN d@> ~J Ö (G ~A G@ ° d ONLN dA> ÜJ ó )n or ”  ° d ONLN dE> óJ Ú )dinary static method á` ° d ONLN dY> ÛJ ı )\.   
h <o
 4i <o
 p j ~j
j ~j
  
ˇ·ˇ‚7Ç     ° d ONLN d[[ ~i † (e ~Non-V I¿ ° d ONLN d`[ †i+ )"irtual Method Declarations   ‘@ (e6      
 ° d ONLN d|o ~{û (x ~0NONVIRTUAL type methodname ( [ arg [, arg...] );    ° d ONLN d≠Å ~ç Ö *A  ∫† ° d ONLN dÆÅ Öç „ ) non-virtual method.   æ  ° d ONLN d√Å „ç Í )^A  ¯¿ ° d ONLN dƒÅ Íçï )& non-virtual method behaves like an or _Ä ° d ONLN dÍÅñçÚ )¨dinary C++ method,   ° d ONLN d˝é ~ö Ω (ó ~bypassing the   9  ° d ONLN dé æö ‰ )@	p-class d  ˝Ä ° d ONLN dé ‰ö˛ )&=ispatch mechanism. The method is actually implemented in the   ° d ONLN dQõ ~ß æ (§ ~interface class.  
ˇˇˇˇˇˇˇˇ 4 ^ ( h * 4 { ( Ö * 4 Ø (+ * 4≤ (÷ * 4ê (ö * ˇÍ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>6  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úW ßÇ )riting P-Class Interfaces  4⁄ ú˙(         (‡ ú$Making P-Class Implementations From   ÷` )ùY  † )our Interfaces      
 ,  )‹6-3      (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ” ( e úIf you declar A  ° d ONLN d  \ ‘ hº )8:e one of these, callers will need to be able to link to it °‡ ° d ONLN d G \º h¡ )Ë;  °‡ ° d ONLN d I \¡ h )that is, the method  ° d ONLN d ] i ú u ( r úmust be exported in the ROM ∆@ ° d ONLN d x i u! )É   F@ ° d ONLN d y i" u )4jump table or some other well-known location. Thus,  , 
 Courier   ° d ONLN d ≠ v ú Ç ÿ (  ú
NONVIRTUAL    !† ° d ONLN d ∑ v ÿ Ç# )< can be used in a  ó¿ ° d ONLN d … v# ÇI )K	p-class o  µ‡ ° d ONLN d “ vI ÇY )&nly  ~¿ ° d ONLN d ÷ vZ Ç\ )i  g  ° d ONLN d ◊ v] Çs )f the  ò` ° d ONLN d › vs Çú )	p-class m    ° d ONLN d Ê vù ÇÂ )*akes the method   ¿ ° d ONLN d ı vÂ ÇÏ )H’s œ  ° d ONLN d ˜ vÏ Ç ) addr  KÄ ° d ONLN d ¸ v Ç )ess  ° d ONLN d  É ú è ” ( å úavailable by  G` ° d ONLN d É ‘ è )8using another  Î@ ° d ONLN d É èO )?method that r  I  ° d ONLN d( ÉP èn )=eturns   ›  ° d ONLN d/ Én èØ )the method’s a ` ° d ONLN d= É∞ è¿ )Bddr  ˝‡ ° d ONLN d@ Éø è» )es Ä ° d ONLN dB É… è„ )
s. See   îÄ ° d ONLN dI É„ è! )“Special Glue  ° d ONLN dW ê ú ú ˆ ( ô úCode For Obtaining  ≥@ ° d ONLN dj ê ˆ ú )ZAddr w  ° d ONLN dn ê úç )esses Of Functions” on page  ô@ ° d ONLN dä êç úö )3-7  Ì  ° d ONLN dç êö úú ).   
 ¡ Z »( 4 ¬ Z »( p  √ ú √( √ ú √(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dè ≤ ú ¡	 ( Ω úField Declarations    €r ( Ω 6      
         ° d ONLN d£ “ ú ﬁ ¢ ( € út ° d ONLN d§ “ ¢ ﬁ ¸ )ype fieldname ;  ° d ONLN d¥ ‡ ú Ïå ( È ú(type fieldname [ constant-expression ] ;  ° d ONLN d› Ó ú ˙ò **type ( * fieldname ) ( [arg [, arg ...]] ) ° d ONLN d Óò ˙û )¸;    ° d ONLN d	 ú £ ( úO [‡ ° d ONLN d
 § ß )r   ‡ ° d ONLN d ® Õ )dinary ﬁ ‡ ° d ONLN d Œ )&eld declarations.  ±‡ ° d ONLN d%  )H N Ä¿ ° d ONLN d'!. )ote  @ ° d ONLN d*/H ) that t  ö¿ ° d ONLN d1H[ )he ﬁ ¬Ä ° d ONLN d6[ù )elds must not r  ˆ  ° d ONLN dEù¥ )Bequir  @ ° d ONLN dJµ◊ )e constr l  ° d ONLN dR◊  )"
uctors or  ° d ONLN d\ ú ≤ ( údestr √` ° d ONLN da ≤ Î )uctors to be r ä  ° d ONLN do Ï= ):un on their behalf.  ¿† ° d ONLN dÇ=? )Q    
D ZK( 4E ZK( p F úF(F úF(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dÑ5 úD4 (@ úExport-Control Directives   €r (@ 6      
         ° d ONLN düU úa ¢ (^ ú{ ° d ONLN d†U ¢ah )! private | public | protected } :  ° d ONLN d¡Uhan )∆     ° d ONLN d√h út ¢ (q úT †¿ ° d ONLN dƒh ¢t  )he usual export-contr   † ° d ONLN dŸht )_ol dir «† ° d ONLN dﬂht6 )ectives  Ÿ  ° d ONLN dÊh6t8 ).   
{ Zñ( 4| Zñ(  
¶ ZÆ( 4ß ZÆ( p ® Z®.® Z®.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dÈì Z¶ ñ (° ZMaking  ≥n ° d ONLN dì ñ¶ ‘ )<	P-Class I  u† ° d ONLN d˘ì ’¶] )?mplementations Fr   ° d ONLN d
ì^¶y )âom   KH ° d ONLN dìy¶É )Y  ªä ° d ONLN dìÇ¶‰ )	our Interfaces   V˛ )û6     
         ° d ONLN d∑ ú√% (¿ ú All of the information given in   Ï† ° d ONLN d>∑%√¿ )â!“Implementing a P-Class” on page   ∆  ° d ONLN d_∑¡√Œ )ú3-5    ° d ONLN db∑œ√ˇ ) applies to  ° d ONLN dnƒ ú– ‹ (Õ úimplementing  j¿ ° d ONLN d{ƒ ›–
 )Ap-classes f  m‡ ° d ONLN dÜƒ
– )-r  2‡ ° d ONLN dáƒ–t )om interfaces you’ve cr  ˜† ° d ONLN dûƒt–Ÿ )feated. In addition, ther Ã¿ ° d ONLN d∂ƒŸ–È )ee ar €` ° d ONLN d∫ƒÈ–! )e things you   ° d ONLN d«— ú›i (⁄ ú,may need to do that do not apply when you ar  -  ° d ONLN dÛ—j›À )Œe implementing DDK   û  ° d ONLN d—À›Ù )a
p-classes.  
 Z	( 4 Z	( p  ú( ú(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dÛ ú È (˛ úInstantiating   ÊD ° d ONLN dÛ È6 )MP-Classes O  Í^ ° d ONLN d*Û6z )Mn the Stack    €r )Í6       
         ° d ONLN d7	 ú ¢ ( úY @Ä ° d ONLN d8	 ¢& )ou should avoid instantiating  ,† ° d ONLN dV	'V )Öp-classes o  Q` ° d ONLN da	Vä )/n the stack.   Q@ ° d ONLN dn	äê )4Y  ¿ ° d ONLN do	ê‡ )ou might need to,  •‡ ° d ONLN dÅ	‡ )Phowever  ≤Ä ° d ONLN dà	% )&
, if, for  ° d ONLN dí ú"= ( ú#example, you need an instance befor {‡ ° d ONLN dµ="D )°e    ≈Ä ° d ONLN d∑D"n )malloc     ≈Ä ° d ONLN dæn"  )*is working in the OS   ¥¿ ° d ONLN d”À" )]	start-up   F@ ° d ONLN d‹Ò"' )&sequence. If   ° d ONLN dÈ# ú/ (, úso, the following works:    ° d ONLN d: úF Æ *TMy  ° d ONLN d: ÆF ﬁ )Pclass a ° d ONLN d: ﬁF )0
nInstance; ° d ONLN dH úT Æ (Q úTMy ° d ONLN dH ÆT ÿ )Pclass:  ° d ONLN d"H ÿT§ )*":ClassInfo()->MakeAt(&anInstance);   ° d ONLN dE` úl, (i ú!Note that a stack-based instance  ÁÄ ° d ONLN df`,lg )êyou’ve declar  ≠` ° d ONLN ds`hlû )<ed is bound  )Ä ° d ONLN d`ülÈ )7to the size of the   ° d ONLN dím úy{ (v ú2implementation; you can check this with an assert:  
ˇˇˇˇˇˇˇˇ 4 x F ú H 4ñ Fß H 4∆ F H 4< FT H ˇ‰    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>6  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~W ßÇ )riting P-Class Interfaces  4⁄ <˙
      
         (‡ <6-4       	 )B$Making P-Class Implementations From  ÷` )ùY  † )our Interfaces     (Ô ~Draft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ ~ ht ( e ~)XASSERT(sizeof(anInstance) == (size_t)TMy ° d ONLN d ) \t hû )ˆPclass:  ° d ONLN d 0 \û h‡ )*:SizeOf());   
 é < ï
 4 è < ï
 p  ê ~ ê
 ê ~ ê
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d <  ~ é ( ä ~Low-level Instantiation   €r ( ä6      
         ° d ONLN d U ï ~ ° õ ( û ~The Pr  ä` ° d ONLN d [ ï õ °) )"otocol Registry (which calls like    C‡ ° d ONLN d } ï* °` )è	NewByName    C‡ ° d ONLN d Ü ï` °b )6   √‡ ° d ONLN d á ïb °Ü )depend   ‚  ° d ONLN d é ïÜ ° )$"on) is initialized fairly late in  ° d ONLN d ∞ ¢ ~ Æ
 ( ´ ~the OS boot sequence. However ∂` ° d ONLN d Õ ¢
 ÆE )å, instances of     ° d ONLN d ‹ ¢F Æt )<p-classes c   † ° d ONLN d Á ¢t Æ˜ ).an be made with just the class ›  ° d ONLN d ¢˜ Æ˘ )É   ° d ONLN d Ø ~ ª è ( ∏ ~info    ° d ONLN d
 Ø ê ª µ )rmation  ª` ° d ONLN d Ø µ ª « )%of a   Ñ¿ ° d ONLN d Ø » ª Ë )p-class. -` ° d ONLN d Ø È ª  )! (See  T@ ° d ONLN d% Ø  ª{ )“Class TClassInfo” on page   ¿ ° d ONLN d@ Ø| ªâ )|8-5  V† ° d ONLN dC Øâ ªé ).) ° d ONLN dF ¡ ~ Õ ˚ (   ~First, obtain a pointer to the  ®  ° d ONLN de ¡ ˚ ÕG )}class information  ∂  ° d ONLN dv ¡G Õ] )L. Her  ñ  ° d ONLN d{ ¡] Õa )e  _† ° d ONLN d| ¡b Õd )’  &‡ ° d ONLN d} ¡e Õì )
s one way:   ° d ONLN dà ÿ ~ ‰2 ( · ~TClassInfo * myClassInfo = TMy  ° d ONLN d¶ ÿ2 ‰\ )¥Pclass:  ° d ONLN d≠ ÿ\ ‰™ )*:ClassInfo();    ° d ONLN dª Î ~ ˜Z ( Ù ~1Next, allocate some memory for the instance. The  Ä ° d ONLN dÏ Î[ ˜ß )›class information  &Ä ° d ONLN d˝ Îß ˜≥ )L pr  m† ° d ONLN d  Î≥ ˜˛ )ovides a method  ° d ONLN d ¯ ~ ï ( ~that r    ° d ONLN d ¯ ñi ).eturns the amount of memory the instance uses:   ° d ONLN dE < N ( <TMy ° d ONLN dH N ~ )Pclass * ° d ONLN dP ~  )0 myInstance := (TMy  ° d ONLN dc  )rPclass*  ° d ONLN dj‘ )*)malloc(myClassInfo->SizeOf());    ° d ONLN dä" ~. ò (+ ~Next,   Ä ° d ONLN dê" ô. ≥ )make   ∞@ ° d ONLN dï" ≥.z )-an instance in the memory you just allocated:    ° d ONLN d√9 ~E> (B ~ myClassInfo->MakeAt(myInstance);    ° d ONLN d‰L ~X *XAt this point you should call whatever initialization methods you normally call when an  ° d ONLN d<Y ~e ‚ *instance is made. (The     2¿ ° d ONLN dSY „e )eMakeAt   2¿ ° d ONLN dYYe∑ )$( method does not automatically call the  ¬¿ ° d ONLN dÅY∑e◊ )∞p-class’ ≤† ° d ONLN dâYÿeﬁ )!s    o† ° d ONLN dãYﬂeÒ )New    o† ° d ONLN déYÒeÛ )   ° d ONLN dèf ~r` (o ~4method, for instance, but you can do that yourself.)   
ó <û
 4ò <û
 p ô ~ô
ô ~ô
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dƒà ~ó/ *$Registration and Instantiation   €r (ì6      
         ° d ONLN d‰£ ~Ø ö (¨ ~When  l` ° d ONLN dÈ£ õØ¨ ):you build a DDK package you tell Packer to mark the DDK pr &¿ ° d ONLN d#£≠Øˇ (¨≠otocol part so that   ° d ONLN d7∞ ~º º (π ~the p-class is r  ` ° d ONLN dG∞ ºº Ÿ )>egister  ?Ä ° d ONLN dN∞ ⁄º )ed in the Pr 
† ° d ONLN dZ∞º— )3,otocol Registry when the package is loaded.  H  ° d ONLN dÜ∞—º◊ )ƒY  † ° d ONLN dá∞◊º )
ou can do  ° d ONLN dëΩ ~…ï (∆ ~Bthat with any p-class that is a package part, as most p-classes ar  9` ° d ONLN d”Ωñ…ù (∆ñe.  ° d ONLN d÷œ ~€ ß (ÿ ~However † ° d ONLN d›œ ß€ — )), if you ar  † ° d ONLN dËœ —€ )*e implementing   N  ° d ONLN d˜œ€F )H	your own   Í@ ° d ONLN d œF€å )-p-classes that ar  4† ° d ONLN dœç€ )Ge not package parts you’ll   ° d ONLN d,‹ ~ËY (Â ~2generally want to add p-classes to the system’s Pr  †‡ ° d ONLN d^‹YËõ )€otocol Registry  ‡ ° d ONLN dm‹öËü )A.  ° d ONLN dpÓ ~˙ (˜ ~ For example, suppose you have a   É  ° d ONLN dêÓ˙9 )ñ	p-class c  ú  ° d ONLN dôÓ9˙Q )%alled    “  ° d ONLN düÓQ˙W )T  “  ° d ONLN d†ÓW˙i )MyC  “  ° d ONLN d£Ói˙• )
ardHandler   ¿ ° d ONLN d≠Ó•˙™ )<.  Á  ° d ONLN dØÓ©˙Ø )Y  ß† ° d ONLN d∞ÓØ˙Û )ou will need to  ° d ONLN d¿˚ ~ Å ( ~r E  ° d ONLN d¡˚ Ç ° )egister    A¿ ° d ONLN d…˚ ¢ ® ) T  A¿ ° d ONLN d ˚ ® ∫ )MyC  A¿ ° d ONLN dÕ˚ ∫ ˆ )
ardHandler   A¿ ° d ONLN d◊˚ ˆ )< at r  b¿ ° d ONLN d‹˚ )un ;@ ° d ONLN dﬁ˚ )-  è  ° d ONLN dﬂ˚@ )
time in or K¿ ° d ONLN dÈ˚AÒ )+*der to be able to make instances of it by  ° d ONLN d ~ ® ( ~	name via    }† ° d ONLN d © )+TCardHandler::New    í† ° d ONLN d-¨ )e!. How you do this depends on wher  _¿ ° d ONLN dN≠Î )üe the code for     ° d ONLN d] ~! Ñ ( ~T ° d ONLN d^ Ñ! ñ )MyC  ° d ONLN da ñ! “ )
ardHandler   ° d ONLN dk “! ı )< came fr ¶¿ ° d ONLN ds ı! )#om @ ° d ONLN du! ).  p@ ° d ONLN dv! )   ë‡ ° d ONLN dw!÷ ).At some point in the system start-up sequence  l‡ ° d ONLN d•◊!‹ )œy  ¸  ° d ONLN d¶‹!È )ou   ° d ONLN d©" ~. ∏ (+ ~simply write:   ° d ONLN d∑9 ~E ∫ *
#include " ° d ONLN d¡9 ∫E Ã )<MyC  ° d ONLN dƒ9 ÃE )ardHandler.h"  ° d ONLN d“G ~S ¢ (P ~// ...  ° d ONLN dŸU ~a Ñ *T  ° d ONLN d⁄U Ña ñ )MyC  ° d ONLN d›U ñan )$ardHandler::ClassInfo()->Register(); ° d ONLN dc ~o‘ (l ~9// later...here are two ways of making instances by name: ° d ONLN d<q ~}t *)TCardHandler * ch1 = TCardHandler::New("T  ° d ONLN deqt}Ü )ˆMyC  ° d ONLN dhqÜ}‘ )ardHandler");  ° d ONLN dv ~ãÚ (à ~>TCardHandler * ch2 = (TCardHandler*)NewByName("TCardHandler",   ° d ONLN dµç ~ô ä *"T ° d ONLN d∑ç äô ú )MyC  ° d ONLN d∫ç úô Í )ardHandler");    ° d ONLN d»• ~± Ï (Æ ~Notice that you cast the r  ‡ ° d ONLN d‚• Ì± )o	esult of     ¿ ° d ONLN dÎ•±F )#	NewByName    ¿ ° d ONLN dÙ•F±u )6 to the corr —` ° d ONLN d •u±ö )/	ect type.  
ˇˇˇˇˇˇˇˇ 4 ^ ( h * 4 § ( ª * 4 ⁄ ( ‰ * 4 ( * 4[ (e * 4• ( * 4 (! * 4; (E * 4W (a * 4s (} * 4è (± * ˇ
    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>6  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úW ßÇ )riting P-Class Interfaces  4⁄ ú˙(         (‡ ú$Making P-Class Implementations From   ÷` )ùY  † )our Interfaces      
 ,  )‹6-5      (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(  
 k Z r( 4 l Z r( p  m ú m( m ú m(  
ˇ·ˇ‚7Ç      ˇˇ‹. ˇ◊ ° d ONLN d   \ ú k ⁄ ( g ú
Modifying   ‚, ° d ONLN d 
 \ ⁄ k )>	P-Classes    €r ( g 6      
         ° d ONLN d  w ú É ( Ä úIf you make changes to the  ®‡ ° d ONLN d 0 w É8 )y	p-class i  9‡ ° d ONLN d 9 w9 Éµ )$nterface, you will have to pr  s¿ ° d ONLN d V wµ É% )|opagate the changes into   ° d ONLN d o Ñ ú êD ( ç ú$implementation declarations and sour  ﬁÄ ° d ONLN d ì ÑD êU )®ce ﬁ •  ° d ONLN d ò ÑV ê )+les as you would with any other C++ class,   ° d ONLN d √ ë ú ù ¿ ( ö úand you ¯‡ ° d ONLN d   ë ¿ ù ¬ )$’  ¿  ° d ONLN d À ë √ ùW )#ll also need to generate the glue ﬁ  ¿ ° d ONLN d Ô ëX ùc )ïles  ˜¿ ° d ONLN d Ú ëc ù} ) again ¿† ° d ONLN d ¯ ë~ ùÉ ).  ì  ° d ONLN d ˙ ëÉ ùâ )Y  SÄ ° d ONLN d ˚ ëâ ù† )ou pr  @ ° d ONLN d  ë° ù“ )
obably don ˆ  ° d ONLN d
 ë“ ù‘ )1’  Ω` ° d ONLN d ë’ ù )t want to r  g` ° d ONLN d ë ù ).e-r  cÄ ° d ONLN d ë ù )un   ° d ONLN d û ú ™ • ( ß úPr  N† ° d ONLN d û ¶ ™ô )
3otocolGen to generate implementation framework sour  ı  ° d ONLN dQ ûô ™⁄ )Ûce unless you'r    ° d ONLN d` û€ ™ )Be willing to   ° d ONLN dm ´ ú ∑ ≠ ( ¥ úmer ‚† ° d ONLN dp ´ ≠ ∑g )*ge all of your implementation code again.  {` ° d ONLN dö ´h ∑ÿ )ªChapter 8, “P-Class Refer  ïÄ ° d ONLN d≥ ´ÿ ∑Û )pence,” Í` ° d ONLN dπ ´Û ∑  ) describes   ° d ONLN dƒ ∏ ú ƒ Ø ( ¡ úwha ®` ° d ONLN d« ∏ Ø ƒl )+t you need to do if you’ve shipped code alr    ° d ONLN dÚ ∏m ƒÇ )æeady p¿ ° d ONLN dˆ ∏Å ƒ$ )', and want old p-classes to still work.  ° d ONLN d   ú ÷Ø ( ” ú=One very important point is that you should not change the or |@ ° d ONLN d[  Ø ÷ ( ”Øder of methods in the   ° d ONLN dq ◊ ú „ Î ( ‡ úinterface. Do not r G  ° d ONLN dÑ ◊ Ï „" )PBemove methods, and if you add new methods, add them to the end of  ° d ONLN d∆ ‰ ú  ‡ ( Ì úthe method list.  
ˇˇˇˇˇˇˇˇ 4 ^ F É H 4 ∫ F  H ˇ¯    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>6  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~W ßÇ )riting P-Class Interfaces  4⁄ <˙
      
         (‡ <6-6       	 )B$Making P-Class Implementations From  ÷` )ùY  † )our Interfaces     (Ô ~Draft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇ>    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h7  
         4⁄ ú˙( ,  	Helvetica              (‡ úUsing the Name Server      
 ,  (‡7-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú wc ( p úThe Name Server   ä* ( p7    
         ° d ONLN d  ú' ¢ ($ úY @Ä ° d ONLN d  ¢'/ )ou can use the Name Server to r  1¿ ° d ONLN d 2/'  )ç;egister information so that it is available to other parts   ° d ONLN d m( ú4 Ê (1 úof the system thr h† ° d ONLN d ~( Ê4” )J5ough a name. Note that this is not necessary for DDK   @ ° d ONLN d ≥(‘4 )Ó
p-classes— ;Ä ° d ONLN d Ω(4 )1th O@ ° d ONLN d ø(4 )	es U‡ ° d ONLN d ¡(4 )	e  ° d ONLN d √5 úA § (> úar  E  ° d ONLN d ≈5 •A ∞ )	e r  S† ° d ONLN d »5 ∞A Õ )egister  ¢¿ ° d ONLN d œ5 ÕA )ed with the Pr @ ° d ONLN d ›5Aã )?otocol Registry when they ar Á‡ ° d ONLN d ˘5äA )~e loaded by the Package Manager  ª  ° d ONLN d5A  )î.  ° d ONLN dG úS Í (P úThe information r º  ° d ONLN d+G ÍS )Negister  @ ° d ONLN d2GSz )ed must be in the form of  ‡ ° d ONLN dLGzSí )rtwo 3  õ¿ ° d ONLN dQGíS∫ )	2-bit wor  ≥Ä ° d ONLN dZG∫S¿ )(d  œ@ ° d ONLN d[G¿Sƒ )s  @ ° d ONLN d\G≈S¸ ). It is identiﬁ  ©  ° d ONLN dlG¸S )7ed by a  ° d ONLN dtT ú`- (] ú"pair of strings. The information r  ZÄ ° d ONLN dñT-`J )ëegister  ©† ° d ONLN dùTJ` )+ed is normally a Newton OS kernel object ID  ¿ ° d ONLN d»T` )≈   p¿ ° d ONLN d…T`' )plus   ° d ONLN dŒa úm ø (j úa speciﬁ  n  ° d ONLN d◊a ¿m )$cation of some kind, t êÄ ° d ONLN dÌamg )_hough you can r  —` ° d ONLN d¸agmô )Hegister any  Æ† ° d ONLN daömµ )3two w  îÄ ° d ONLN da∂mø )or œ  ° d ONLN daøm≈ )	d  Í¿ ° d ONLN da≈m… )s  '¿ ° d ONLN da mÌ )	 of data.   
t Zè( 4u Zè(  
ü Zß( 4† Zß( p ° Z°.° Z°.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN då Zü (ö ZUsing the Name Server   V˛ (ö 7    
         ° d ONLN d3∞ úº ¢ (π úT µ¿ ° d ONLN d4∞ °º )o use the Name Server  §  ° d ONLN dI∞º$ )c, you cr e  ° d ONLN dQ∞%º@ )!eate a   :† ° d ONLN dX∞Aº )name server o  z‡ ° d ONLN de∞º˛ )>bject and call its methods. Cr «  ° d ONLN dÉ∞˛º# )	eating a   ° d ONLN dåΩ ú…v (∆ ú1name server object involves a fair amount of over å† ° d ONLN dΩΩv…◊ )⁄head, because several  d  ° d ONLN d”Ωÿ…ﬂ )bO  @  ° d ONLN d‘Ω‡…& )S kernel objects   ° d ONLN dÂ  ú÷ ˝ (” úneed to be initialized.   ﬁ‡ ° d ONLN d˝  ˝÷ )aY  ü` ° d ONLN d˛ ÷C )ou should ther MÄ ° d ONLN d D÷U )Aefor •Ä ° d ONLN d U÷d )e cr $` ° d ONLN d e÷y )eate   z  ° d ONLN d y÷◊ )name server objects a  —‡ ° d ONLN d. ◊÷Ì )^s infr aÄ ° d ONLN d4 Ó÷" )equently as  ° d ONLN d@◊ ú„ ¬ (‡ ú	possible. ° d ONLN dJÈ úı ≠ *Her  `  ° d ONLN dMÈ ≠ı Û )e is an example: , 
 Courier   ° d ONLN d^  Z ¢ (	 ZTUNameServer  ° d ONLN dk  ¢ Í )H NameServer; ° d ONLN dx Z x ( ZULong ° d ONLN dÄ ê ¥ )6word1; ° d ONLN dá Z( x (% ZULong ° d ONLN dè ê( ¥ )6word2; ° d ONLN dò8 ZD (A ZINameServer.RegisterName("Peanut Butter", "Food Spread", 0x1234, 0x5678)); ° d ONLN d„F lR r +. ° d ONLN dÊT l` r *.  ° d ONLN dÍb ln r *.  ° d ONLN dÏp Z|å (y Z3NameServer.Lookup("Peanut Butter", "Food Spread", & ° d ONLN dpå|∞ (yåword1,  ° d ONLN d%p∞|º )$ & ° d ONLN d'pº|‡ )word2) ° d ONLN d-p‡|Ï )$); ° d ONLN d1~ lä ~ (á l/*  ° d ONLN d4~ ~ä ® )word1 n  ° d ONLN d;~ ®ä& )*ow equals 0x1234 and   ° d ONLN dP~&äP )~word2 e  ° d ONLN dW~Pä™ )*quals 0x5678 */  ° d ONLN dhå lò r (ï l. ° d ONLN dkö l¶ r *.   
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 7-0  *	T     )able 7-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4* F4 H 4I Fm H 4≤ F÷ H 4 F( H 4r Fä H ˇÏ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Name Server 4⁄ <˙
      
         (‡ <7-2       	 )BName Server Reference      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ N h T ( e N. ° d ONLN d  j < vû ( s <;NameServer.UnRegisterName("Peanut Butter", "Food Spread"));  
 É < û
 4 Ñ < û
  
 Æ < ∂
 4 Ø < ∂
 p  ∞ < ∞ ∞ < ∞  
ˇ·ˇ‚7Ç     ˇˇ© ˇÆ ° d ONLN d ? õ < Æ ƒ *6Name Server Refer  ˆ ° d ONLN d P õ ƒ Æ ‰ )àence   V˛ ( ©7    
         ° d ONLN d V ø ~ À è ( » ~Her `  ° d ONLN d Y ø è À )e is the Name Server class deﬁ <  ° d ONLN d x ø À1 )Ünition:    ° d ONLN d Ä „ < Ô ® ( Ï <class TUNameServer  ° d ONLN d ì Ò < ˝ B *{  ° d ONLN d ñ ˇ N x +public: ° d ONLN d ü N ® *TUNameServer();  ° d ONLN d ∞ N' ê *NewtonErr R  ° d ONLN d ª ê'å )B*egisterName(char* name, char* type, ULong  ° d ONLN d Âå'∞ )¸word1, ° d ONLN d Î∞'⁄ )$ ULong   ° d ONLN d Ú⁄'˛ )*word2) ° d ONLN d ¯˛' )$;  ° d ONLN d ˚) N5 ê (2 NNewtonErr U ° d ONLN d) ê5t )B&nRegisterName(char* name, char* type); ° d ONLN d.7 NC ê (@ NNewtonErr W ° d ONLN d97 êC§ )B.aitForRegister(char* name, char* type, ULong*  ° d ONLN dg7§C» (@§word1,  ° d ONLN dxE Q ˆ (N U ° d ONLN dyE ˆQ )Long*  ° d ONLN dEQ> )$word2) ° d ONLN dÖE>QD )$;  ° d ONLN dàS N_ ê (\ NNewtonErr W ° d ONLN dìS ê_Ü )B)aitForUnregister(char* name, char* type);  ° d ONLN dæa Nm ê (j NNewtonErr L ° d ONLN d…a êmn )B%ookup(char* name, char* type, ULong*   ° d ONLN dÓanmí )ﬁword1, ° d ONLN dÙaím¬ )$ ULong*  ° d ONLN d¸a¬mÊ )0word2) ° d ONLN daÊmÏ )$;  ° d ONLN d} `â
 (Ü `G// The following four methods are available in ROM versions 2.0 & later ° d ONLN dOã NóÚ (î NFNewtonErr ResourceClaim(char* name, char* type, TObjectId ownerPortId,  ° d ONLN düô ﬁ•å +êTObjectId applicationNameId); ° d ONLN dæß N≥z (∞ N2NewtonErr ResourceUnclaim(char* name, char* type);  ° d ONLN dÚµ N¡í *6NewtonErr ResourcePassiveClaim(char* name, char* type, ° d ONLN d1√ Ãœ +~4TObjectId ownerPortId, TObjectId applicationNameId);  ° d ONLN dg— N›§ (⁄ N9NewtonErr ResourcePassiveUnclaim(char* name, char* type); ° d ONLN d¢Ì N˘ ~ *private: ° d ONLN d¨˚ N x *TUPort   ° d ONLN dµ˚ x ÿ )*fNameServerPort; ° d ONLN d«	 N “ ( NTUSharedMem* fMsgName;  ° d ONLN dﬂ N# “ *TUSharedMem* fMsgType; ° d ONLN dˆ% <1 H (. <};   
{ <Ç
 4| <Ç
 p } ~}
} ~}
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d˘l ~{ ´ +BILookup    €r (w7      
         ° d ONLN dÇ ~é ¿ (ã ~NewtonErr L ° d ONLN dÇ ¿é ‰ )BookUp( ° d ONLN dÇ Íé )*char*      ° d ONLN dÇé# )$name      *@ ° d ONLN d"Ç$é0 ),  ° d ONLN d+è Íõ (ò Íchar*       ° d ONLN d1èõ )$type      ∑Ä ° d ONLN d5èõ+ ),  
ˇˇˇˇˇˇˇˇ 4 (Î * 4Ñ (õ * ˇÍ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe Name Server 4⁄ ú˙(         (‡ úName Server Reference      
 ,  (‡7-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( , 
 Courier       
 ° d ONLN d   \ h, ( eULong       ° d ONLN d  \, hE )$word1         ° d ONLN d  \F hL ),    ° d ONLN d  \L hR )   ° d ONLN d  i u, ( rULong       ° d ONLN d  i, uE )$word2         ° d ONLN d  iF uL ))    ° d ONLN d   iL uR );    ° d ONLN d " { ú á Ë ( Ñ úThis call will sear 4@ ° d ONLN d 5 { È á
 )Mch the r @ ° d ONLN d = {
 áö )!!egistry for an item matching the   .Ä ° d ONLN d ^ {ö á∞ )êspeci  è‡ ° d ONLN d c {∞ á∂ )ﬁ  ú† ° d ONLN d e {∂ á√ )ed       ° d ONLN d h {ƒ áŸ )name    ¨@ ° d ONLN d l {Ÿ áÓ ) and     ô` ° d ONLN d q {Ô á  )type    –‡ ° d ONLN d u {  á ) ﬁ ]† ° d ONLN d x {	 á  )	elds.  ° d ONLN d ~ à ú î Ø ( ë úThe   ª¿ ° d ONLN d Ç à Ø î » )other  Å@ ° d ONLN d à à … î )two parameters,    ﬁ  ° d ONLN d ò à î, )Jword1     j  ° d ONLN d ù à- î4 ) a Í  ° d ONLN d ü à4 îB )nd     W@ ° d ONLN d ¢ àC î\ )word2     „@ ° d ONLN d ß à\ î^ ),  c@ ° d ONLN d ® à_ îÖ )
 will be r 	† ° d ONLN d ≤ àÜ î´ )'eturned. ° d ONLN d ª ö ú ¶ – ( £ úParameters:   ° d ONLN d « ¨ ú ∏ ± *name    ° d ONLN d Ã ¨ ¯ ∏ ˇ )\A  ∫† ° d ONLN d Õ ¨ ˇ ∏\ ) string that is unique   õ¿ ° d ONLN d ‰ ¨] ∏k )^in t ‡ ° d ONLN d Ë ¨l ∏∑ )he system-wide r Ÿ† ° d ONLN d ¯ ¨∑ ∏’ )Kegistry     ° d ONLN d ˇ ¨’ ∏◊ ).    ° d ONLN d æ ú   ≠ ( « útype     ° d ONLN d æ ¯   ˇ )\A  ∫† ° d ONLN d æ ˇ  \ ) string that is unique   õ¿ ° d ONLN d æ]  k )^in t ‡ ° d ONLN d" æl  ∑ )he system-wide r Ÿ† ° d ONLN d2 æ∑  ’ )Kegistry     ° d ONLN d9 æ’  ◊ ).    ° d ONLN d; – ú ‹ µ ( Ÿ úword1    ° d ONLN dA – ¯ ‹ )\One wor  ` ° d ONLN dH – ‹H )'
d of data.   ° d ONLN dS ‚ ú Ó µ ( Î úword2    ° d ONLN dY ‚ ¯ Ó )\One wor  ` ° d ONLN d` ‚ ÓH )'
d of data.  
  Z'( 4! Z'( p " ú"(" ú"(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dk ú  Û ( úRegisterName    €r ( 7      
         ° d ONLN dy' ú3 ﬁ (0 úNewtonErr R ° d ONLN dÑ' ﬁ3& )BegisterName( ° d ONLN dò',3P )Nchar*      ° d ONLN dû'P3e )$name      *@ ° d ONLN d¢'f3r ),  ° d ONLN d≠4,@2 (=,c ° d ONLN dÆ42@P )har*       ° d ONLN d≥4P@a )type      ∑Ä ° d ONLN d∑4a@m ),  ° d ONLN d¬A,MP (J,ULong       ° d ONLN d»APMi )$word1         ° d ONLN dÕAjMp ),    ° d ONLN dŒApMv )   ° d ONLN dÿN,ZP (W,ULong       ° d ONLN dﬁNPZi )$word2         ° d ONLN d„NjZp ))    ° d ONLN d‰NpZv );    ° d ONLN dÊ` úl Û (i úThis call is used to r  $@ ° d ONLN d¸` Ùl¨ )X(egister information with the Name Server öÄ ° d ONLN d$`´l≠ )∑.  ° d ONLN d&r ú~ – ({ úParameters:   ° d ONLN d2Ñ úê ± *name    ° d ONLN d7Ñ ¯ê ˇ )\A  ∫† ° d ONLN d8Ñ ˇê\ ) string that is unique   õ¿ ° d ONLN dOÑ]êk )^in t ‡ ° d ONLN dSÑlê∑ )he system-wide r Ÿ† ° d ONLN dcÑ∑ê’ )Kegistry     ° d ONLN djÑ’ê◊ ).    ° d ONLN dlñ ú¢ ≠ (ü útype     ° d ONLN dqñ ¯¢ ˇ )\A  ∫† ° d ONLN drñ ˇ¢\ ) string that is unique   õ¿ ° d ONLN dâñ]¢k )^in t ‡ ° d ONLN dçñl¢∑ )he system-wide r Ÿ† ° d ONLN dùñ∑¢’ )Kegistry     ° d ONLN d§ñ’¢◊ ).    ° d ONLN d¶® ú¥ µ (± úword1    ° d ONLN d¨® ¯¥ )\One wor  ` ° d ONLN d≥®¥H )'
d of data.   ° d ONLN dæ∫ ú∆ µ (√ úword2    ° d ONLN dƒ∫ ¯∆ )\One wor  ` ° d ONLN dÀ∫∆H )'
d of data.  
¯ Zˇ( 4˘ Zˇ( p ˙ ú˙(˙ ú˙(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d÷È ú¯ (Ù úUnRegisterName    €r (Ù 7      
         ° d ONLN dÊˇ ú ﬁ ( úNewtonErr U ° d ONLN dÒˇ ﬁ2 )BnRegisterName( ° d ONLN dˇ>b )`char*      ° d ONLN dˇbw )$name      *@ ° d ONLN dˇxÑ ),  ° d ONLN d>b (>char*       ° d ONLN d$bs )$type      ∑Ä ° d ONLN d(s ));   ° d ONLN d+ ú* « (' úThis call r ùÄ ° d ONLN d6 «*L )+emoves the item that matches     8  ° d ONLN dSM*b )Üname    ‚@ ° d ONLN dWb*w ) and     œ` ° d ONLN d\x*â )type    ‡ ° d ONLN d`ä*ì ) fr  ü¿ ° d ONLN dcì*∏ )	om the r ã† ° d ONLN dk∏*÷ )%egistry  ≤  ° d ONLN dr’*◊ ).  ° d ONLN dt0 ú< – (9 úParameters:   ° d ONLN dÄB úN ± *name    ° d ONLN dÖB ¯N ˇ )\A  ∫† ° d ONLN dÜB ˇN\ ) string that is unique   õ¿ ° d ONLN dùB]Nk )^in t ‡ ° d ONLN d°BlN∑ )he system-wide r Ÿ† ° d ONLN d±B∑N’ )Kegistry     ° d ONLN d∏B’N◊ ).    ° d ONLN d∫T ú` ≠ (] útype     ° d ONLN døT ¯` ˇ )\A  ∫† ° d ONLN d¿T ˇ`\ ) string that is unique   õ¿ ° d ONLN d◊T]`k )^in t ‡ ° d ONLN d€Tl`∑ )he system-wide r Ÿ† ° d ONLN dÎT∑`’ )Kegistry     ° d ONLN dÚT’`◊ ).   
í Zô( 4ì Zô( p î úî(î úî(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dÙÉ úí © (é úW Œ ° d ONLN dıÉ ©í ˛ )aitForRegister   €r (é 7      
         ° d ONLN dô ú• ﬁ (¢ úNewtonErr W ° d ONLN dô ﬁ•8 )BaitForRegister(  ° d ONLN d(ô>•b )`char*      ° d ONLN d.ôb•w )$name      *@ ° d ONLN d2ôx•Ñ ),  ° d ONLN d>¶>≤b (Ø>char*       ° d ONLN dD¶b≤s )$type      ∑Ä ° d ONLN dH¶s≤ ),  
ˇˇˇˇˇˇˇˇ 4 ^ F î H 4 Æ F ˚ H 4) FZ H 4Ü F” H 4 F H 4D F` H 4õ F≤ H ˇÓ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Name Server 4⁄ <˙
      
         (‡ <7-4       	 )BName Server Reference      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \  hD ( e ULong       ° d ONLN d  \D h] )$word1         ° d ONLN d  \^ hd ),    ° d ONLN d  \d hj )   ° d ONLN d  i  uD ( r ULong       ° d ONLN d  iD u] )$word2         ° d ONLN d " i^ ud ))    ° d ONLN d # id uj );    ° d ONLN d % { ~ á · ( Ñ ~This call is the same as  r‡ ° d ONLN d = { ‚ á ‰ )d     Ú‡ ° d ONLN d > { ‰ á Í )L  Ú‡ ° d ONLN d ? { Í á )ookup    Ú‡ ° d ONLN d D { á6 ) but does r  †‡ ° d ONLN d O {7 áv )/eturn until the  A  ° d ONLN d ^ {w áy )@     ¡  ° d ONLN d _ {y á~ )n  P  ° d ONLN d ` { áè )ame     k@ ° d ONLN d c {è á◊ ) is found in the r *` ° d ONLN d u {ÿ áˆ )Iegistry  P‡ ° d ONLN d | {ı á˙ ).  ° d ONLN d ~ à ~ î ≈ ( ë ~The parameters    	¿ ° d ONLN d ç à ∆ î ﬂ )Hword1     ï¿ ° d ONLN d í à ﬂ î Ê ) a ¿ ° d ONLN d î à Á î ı )nd     Ç‡ ° d ONLN d ó à ı î )word2     ‡ ° d ONLN d ú à î ) a é‡ ° d ONLN d û à î )r  S‡ ° d ONLN d ü à î% )e r  bÄ ° d ONLN d ¢ à% îJ )eturned. ° d ONLN d ´ ö ~ ¶ ≤ ( £ ~Parameters:   ° d ONLN d ∑ ¨ ~ ∏ ì *name    ° d ONLN d º ¨ ⁄ ∏ · )\A  ∫† ° d ONLN d Ω ¨ · ∏> ) string that is unique   õ¿ ° d ONLN d ‘ ¨? ∏M )^in t ‡ ° d ONLN d ÿ ¨N ∏ô )he system-wide r Ÿ† ° d ONLN d Ë ¨ô ∏∑ )Kegistry     ° d ONLN d Ô ¨∑ ∏π ).    ° d ONLN d Ò æ ~   è ( « ~type     ° d ONLN d ˆ æ ⁄   · )\A  ∫† ° d ONLN d ˜ æ ·  > ) string that is unique   õ¿ ° d ONLN d æ?  M )^in t ‡ ° d ONLN d æN  ô )he system-wide r Ÿ† ° d ONLN d" æô  ∑ )Kegistry     ° d ONLN d) æ∑  π ).    ° d ONLN d+ – ~ ‹ ó ( Ÿ ~word1    ° d ONLN d1 – ⁄ ‹  )\One wor  ` ° d ONLN d8 – ‹* )'
d of data.   ° d ONLN dC ‚ ~ Ó ó ( Î ~word2    ° d ONLN dI ‚ ⁄ Ó  )\One wor  ` ° d ONLN dP ‚ Ó* )'
d of data.  
 <
 4 <
 p  ~
 ~
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d[ ~ ã ( ~W Œ ° d ONLN d\ ã Ú )aitForUnRegister   €r (7      
         ° d ONLN dn ~& ¿ (# ~NewtonErr W ° d ONLN dy ¿&& )BaitForUnRegister(  ° d ONLN dî2&V )rchar*      ° d ONLN döV&k )$name      *@ ° d ONLN dûl&x ),  ° d ONLN d´'23V (02char*       ° d ONLN d±'V3g )$type      ∑Ä ° d ONLN dµ'g3 ), );   ° d ONLN d∫9 ~E Õ (B ~This call will not r  6‡ ° d ONLN dŒ9 ŒEB )Peturn until the item speciﬁ  Ä ° d ONLN dÍ9CE] )ued by    	† ° d ONLN d9^Es )name    ≥‡ ° d ONLN dÙ9sEà ) and     °  ° d ONLN d˘9âEö )type    ÿÄ ° d ONLN d˝9öE™ ) is r  ¬‡ ° d ONLN d9™E◊ )	emoved fr  ˙Ä ° d ONLN d9◊E¯ )-om the   ° d ONLN dF ~R Å (O ~r E  ° d ONLN dF ÇR ∆ )egistry with an    +¿ ° d ONLN d#F «R )EUnRegisterName   +¿ ° d ONLN d1FR/ )T call. ° d ONLN d8X ~d ≤ (a ~Parameters:   ° d ONLN dDj ~v ì *name    ° d ONLN dIj ⁄v · )\A  ∫† ° d ONLN dJj ·v> ) string that is unique   õ¿ ° d ONLN daj?vM )^in t ‡ ° d ONLN dejNvô )he system-wide r Ÿ† ° d ONLN dujôv∑ )Kegistry     ° d ONLN d|j∑vπ ).    ° d ONLN d~| ~à è (Ö ~type     ° d ONLN dÉ| ⁄à · )\A  ∫† ° d ONLN dÑ| ·à> ) string that is unique   õ¿ ° d ONLN dõ|?àM )^in t ‡ ° d ONLN dü|Nàô )he system-wide r Ÿ† ° d ONLN dØ|ôà∑ )Kegistry     ° d ONLN d∂|∑àπ ).   
≠ <¥
 4Æ <¥
 p Ø ~Ø
Ø ~Ø
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d∏û ~≠ € (© ~ResourceClaim   €r (©7      
         ° d ONLN d«¥ ~¿ (Ω ~NewtonErr ResourceClaim(  ° d ONLN dÁ¥¿2 )êchar*      ° d ONLN dÌ¥2¿G )$name      *@ ° d ONLN dÒ¥H¿T ),  ° d ONLN d¸¡Õ2 ( char*       ° d ONLN d¡2ÕC )$type      ∑Ä ° d ONLN d¡CÕI ),  ° d ONLN dŒ⁄J (◊
TObjectId       ° d ONLN dŒJ⁄} )<ownerPortId       ñ  ° d ONLN d%Œ}⁄É )3,  ° d ONLN d/€ÁJ (‰
TObjectId       ° d ONLN d9€JÁñ )<applicationNameId       Q† ° d ONLN dJ€óÁ£ )M);   ° d ONLN dMÌ ~˘ Ö (ˆ ~A ∫† ° d ONLN dNÌ Ö˘ ¬ ) task calls the    $Ä ° d ONLN d^Ì √˘ )>ResourceClaim    $Ä ° d ONLN dkÌ˘ª )N& method to make an active claim on a r »‡ ° d ONLN dëÌª˘” )™esour    ° d ONLN dñÌ‘˘ )ce that has  ° d ONLN d¢˙ ~ á ( ~pr  G  ° d ONLN d§˙ à À )
eviously been r  Å¿ ° d ONLN d≥˙ À Ë )Cegister  –‡ ° d ONLN d∫˙ ËR )ed with the name server  Ù  ° d ONLN d—˙R≠ )j. The system softwar ˝¿ ° d ONLN dÂ˙≠∏ )[e r  ` ° d ONLN dË˙π	 )esponds to this as   ° d ONLN d˚ ~ ° ( ~follows:  ,  Zapf Dingbats     ° d ONLN d ~% Ç *n     
 ° d ONLN d ä& ß )if the r ^† ° d ONLN d ß& ø )esour  ¶‡ ° d ONLN d ø&ç )0ce is in use by another task, the system softwar 5  ° d ONLN dCé&⁄ )œe calls that task’s    ° d ONLN dW& ä2 ÿ (/ äResArbRelease   ° d ONLN dd& ÿ2Q )N method, to notify it that a r   ° d ONLN dÇ&R2± )zequest for use of the r  }` ° d ONLN dô&±2… )_esour  ≈† ° d ONLN dû&…2˝ )ce has been  ° d ONLN d™2 ä> • (; ämade.     ° d ONLN d∞G ~O Ç (M ~n    
 ° d ONLN d≤D äP £ )if the     ô† ° d ONLN dπD £P Ò )ResArbRelease    ô† ° d ONLN d∆D ÒP	 )N call r  ü† ° d ONLN dÕD	PA )eturns an err  ` ° d ONLN d⁄DBP| )9or code, the r ‹  ° d ONLN dËD{Pì )9esour  $@ ° d ONLN dÌDîP¯ )ce is not available and    ° d ONLN dP ä\ ÿ (Y äResourceClaim   ° d ONLN dP ÿ\ ﬁ )N r ≈  ° d ONLN dP ﬁ\ )eturns an err  +¿ ° d ONLN d!P\  )9or ÷Ä ° d ONLN d#P\$ ).      ° d ONLN d&e ~m Ç (k ~n    
 ° d ONLN d(b än £ )if the     ô† ° d ONLN d/b £n Ò )ResArbRelease    ô† ° d ONLN d<b Òn	 )N call r  ü† ° d ONLN dCb	n' )eturns     3¿ ° d ONLN dJb(nF )noErr    v` ° d ONLN dObEn^ ), the r  ò¿ ° d ONLN dVb^nv )esour  ·  ° d ONLN d[bvn∏ )ce is available.     ‡ ° d ONLN dlb∏n )BResourceClaim    ‡ ° d ONLN dybn )N   ° d ONLN dzn äz ç (w är E  ° d ONLN d{n éz ¨ )eturns     Ÿ  ° d ONLN dÇn ¨z   )noErr    Ÿ  ° d ONLN dán  zÄ )+ to indicate that the caller now owns the r  ó  ° d ONLN d≤nÅzô )∑esour  ﬂ@ ° d ONLN d∑nôz§ )ce.  
ˇˇˇˇˇˇˇˇ 4 ^ ( î * 4 Æ ( Ó * 4 (3 * 4l (z * ˇÄ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe Name Server 4⁄ ú˙(         (‡ úName Server Reference      
 ,  (‡7-5     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(  	 ° d ONLN d   \ ú g ¥ ( d úNOTE        
 ° d ONLN d  i ú u ˝ *Any task can use the r (  ° d ONLN d  i ˛ u )besour  p@ ° d ONLN d   i u” ).ce arbitration facilities built into the Name  ° d ONLN d N u ú Å ‰ ( ~ úServer; however Î  ° d ONLN d ] u „ Å Î )G, r  ∞  ° d ONLN d ` u Ï Å )	esour  ¯` ° d ONLN d e u Å] )ce arbitration is curr ‡ ° d ONLN d { u^ Å≤ )Zently used only by   ° d ONLN d é Å ú ç ( ä úcommunications tools.   í† ° d ONLN d § Å ç )fY  S  ° d ONLN d • Å ç+ )ou can r ÷` ° d ONLN d ≠ Å+ ç] )#ead about r  «` ° d ONLN d ∏ Å] çu )2esour  † ° d ONLN d Ω Åv çæ )ce arbitration in    ° d ONLN d œ ç ú ô ( ñ úNewton Communications Tools    m` ° d ONLN d Í ç ô )Ä.  ,  Zapf Dingbats     Ì` ° d ONLN d Ï ê# ò( )u     
 ° d ONLN d Ó û ú ™ ( ß úThe name and type of the r  †‡ ° d ONLN d û ™+ )wesour  È  ° d ONLN d û+ ™ÿ )&ce must match the name and type of a r ∫† ° d ONLN d3 ûŸ ™Ò )Æesour  ‡ ° d ONLN d8 ûÚ ™ )
ce object  ° d ONLN dB ´ ú ∑ ß ( ¥ úalr -` ° d ONLN dE ´ ® ∑ √ )eady r Ê‡ ° d ONLN dK ´ √ ∑ ‡ )egister  6  ° d ONLN dR ´ · ∑O )ed with the Name Server  ŸÄ ° d ONLN di ´N ∑È )m$. Otherwise, this method fails and r Z‡ ° d ONLN dç ´Í ∑ )úeturns the   , 
 Courier   ° d ONLN dò ∏ ú ƒ ( ¡ úkError_Not_Registered   ° d ONLN d≠ ∏ ƒ) )~ err Å@ ° d ONLN d± ∏) ƒ2 )or ,  ° d ONLN d≥ ∏2 ƒ4 )	.  ° d ONLN dµ   ú ÷ – ( ” úParameters:   ° d ONLN d¡ ‹ ú Ë ± *name    ° d ONLN d∆ ‹ ¯ Ë ˇ )\A  ∫† ° d ONLN d« ‹ ˇ Ë∑ )+ string that is unique in the system-wide r  Ÿ† ° d ONLN dÚ ‹∑ Ë’ )∏egistry     ° d ONLN d˘ ‹’ Ë◊ ).    ° d ONLN d˚ Ó ú ˙ ≠ ( ˜ útype     ° d ONLN d  Ó ¯ ˙ ˇ )\A  ∫† ° d ONLN d Ó ˇ ˙∑ )+ string that is unique in the system-wide r  Ÿ† ° d ONLN d, Ó∑ ˙’ )∏egistry     ° d ONLN d3 Ó’ ˙◊ ).    ° d ONLN d5  ú œ (	 úownerPortId    ° d ONLN dA  ¯Â )\6The object ID of the port for the communications tool.   ° d ONLN dx ú „ ( úapplicationNameI  Q† ° d ONLN dà ‰ È )Hd     ° d ONLN dä ¯ )The shar è  ° d ONLN díÄ )&ed memory ID of the r  ‰‡ ° d ONLN dßÄò )besour  -  ° d ONLN d¨ô¡ )ce owner É¿ ° d ONLN d¥¿¬ )'.   
C ZJ( 4D ZJ( p E úE(E úE(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d∂4 úC (? úResourceUnclaim   €r (? 7      
         ° d ONLN d«J úV8 (S úNewtonErr ResourceUnclaim(  ° d ONLN dÍJ>Vb )¢char*      ° d ONLN dJbVw )$name      *@ ° d ONLN dÙJxVÑ ),  ° d ONLN d W>cb (`>char*       ° d ONLN dWbcs )$type      ∑Ä ° d ONLN d
WscÖ ) );    ° d ONLN di úu& (r ú Unclaims the active claim of a r  ˆ@ ° d ONLN d.i&u> )äesour  >Ä ° d ONLN d3i?u )3ce, making it available for use by other tasks. If   ° d ONLN dfv úÇN ( ú)another task has a passive claim on the r Ü` ° d ONLN dèvNÇf )≤esour  Œ† ° d ONLN dîvfÇ© )ce, the system r î  ° d ONLN d§v™Ç )Desponds to this call by  ° d ONLN dºÉ úè º (å úcalling     â‡ ° d ONLN dƒÉ ºèF ) ResArbClaimNotification    â‡ ° d ONLN d€ÉFè€ )ä" method of the passive claim task.      	 ° d ONLN d˛ù ú® ¥ (• úNOTE        
 ° d ONLN d™ ú∂ ˝ *Any task can use the r (  ° d ONLN d™ ˛∂ )besour  p@ ° d ONLN d™∂” ).ce arbitration facilities built into the Name  ° d ONLN dL∂ ú¬ ‰ (ø úServer; however Î  ° d ONLN d[∂ „¬ Î )G, r  ∞  ° d ONLN d^∂ Ï¬ )	esour  ¯` ° d ONLN dc∂¬] )ce arbitration is curr ‡ ° d ONLN dy∂^¬≤ )Zently used only by   ° d ONLN då¬ úŒ (À úcommunications tools.   í† ° d ONLN d¢¬Œ )fY  S  ° d ONLN d£¬Œ+ )ou can r ÷` ° d ONLN d´¬+Œ] )#ead about r  «` ° d ONLN d∂¬]Œu )2esour  † ° d ONLN dª¬vŒæ )ce arbitration in    ° d ONLN dÕŒ ú⁄ (◊ úNewton Communications Tools    m` ° d ONLN dËŒ⁄ )Ä.      Ì` ° d ONLN dÍ—#Ÿ( )u     
 ° d ONLN dÏﬂ úÎ (Ë úThe name and type of the r  †‡ ° d ONLN dﬂÎ+ )wesour  È  ° d ONLN dﬂ+Îÿ )&ce must match the name and type of a r ∫† ° d ONLN d1ﬂŸÎÒ )Æesour  ‡ ° d ONLN d6ﬂÚÎ )
ce object  ° d ONLN d@Ï ú¯ ß (ı úalr -` ° d ONLN dCÏ ®¯ √ )eady r Ê‡ ° d ONLN dIÏ √¯ ‡ )egister  6  ° d ONLN dPÏ ·¯O )ed with the Name Server  ŸÄ ° d ONLN dgÏN¯È )m$. Otherwise, this method fails and r Z‡ ° d ONLN dãÏÍ¯ )úeturns the     ° d ONLN dñ˘ ú ( úkError_Not_Registered   ° d ONLN d´˘) )~ err Å@ ° d ONLN dØ˘)2 )or ,  ° d ONLN d±˘24 )	.  ° d ONLN d≥ ú – ( úParameters:   ° d ONLN dø ú) ± *name    ° d ONLN dƒ ¯) ˇ )\A  ∫† ° d ONLN d≈ ˇ)∑ )+ string that is unique in the system-wide r  Ÿ† ° d ONLN d∑)’ )∏egistry     ° d ONLN d˜’)◊ ).    ° d ONLN d˘/ ú; ≠ (8 útype     ° d ONLN d˛/ ¯; ˇ )\A  ∫† ° d ONLN dˇ/ ˇ;∑ )+ string that is unique in the system-wide r  Ÿ† ° d ONLN d*/∑;’ )∏egistry     ° d ONLN d1/’;◊ ).   
` Zg( 4a Zg( p b úb(b úb(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d3Q ú`) (\ úResourcePassiveClaim    €r (\ 7      
         ° d ONLN dIg ús, (p úNewtonErr ResourceClaim(  ° d ONLN dig,sP )êchar*      ° d ONLN dogPse )$name      *@ ° d ONLN dsgfsr ),  ° d ONLN d~t,ÄP (},char*       ° d ONLN dÑtPÄa )$type      ∑Ä ° d ONLN dàtaÄg ),  ° d ONLN díÅ,çh (ä,
TObjectId       ° d ONLN dúÅhçõ )<ownerPortId       ñ  ° d ONLN dßÅõç° )3,  ° d ONLN d±é,öh (ó,
TObjectId       ° d ONLN dªéhö¥ )<applicationNameId       Q† ° d ONLN dÃéµö¡ )M);   ° d ONLN dœ† ú¨ £ (© úA ∫† ° d ONLN d–† £¨ ‡ ) task calls the    $Ä ° d ONLN d‡† ·¨/ )>ResourceClaim    $Ä ° d ONLN dÌ†/¨⁄ )N& method to make a passive claim on a r ¡  ° d ONLN d†⁄¨Ú )´esour  	@ ° d ONLN d†Û¨$ )ce that has  ° d ONLN d$≠ úπ • (∂ úpr  G  ° d ONLN d&≠ ¶π È )
eviously been r  Å¿ ° d ONLN d5≠ Èπ )Cegister  –‡ ° d ONLN d<≠πp )ed with the name server  Ù  ° d ONLN dS≠pπÀ )j. The system softwar ˝¿ ° d ONLN dg≠Àπ÷ )[e r  ` ° d ONLN dj≠◊π )esponds to this  
ˇˇˇˇˇˇˇˇ 4 ^ Fπ H ˇ⁄    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Name Server 4⁄ <˙
      
         (‡ <7-6       	 )BName Server Reference      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h Õ ( e ~call by calling the   , 
 Courier   ?  ° d ONLN d  \ Œ h )PResArbRelease    ?  ° d ONLN d ! \ hô )N method of the task that curr  º  ° d ONLN d > \ô h‡ )}ently owns the r   ° d ONLN d N \· h˘ )Hesour  V` ° d ONLN d S \˘ h )ce.  ° d ONLN d W i ~ u √ ( r ~If that method r    ° d ONLN d g i ƒ u ‚ )Feturns     §@ ° d ONLN d n i ‚ u  )noErr    Ê‡ ° d ONLN d s i ˇ uW ), the system softwar   ° d ONLN d á iX u“ )Ye will subsequently call the     ° d ONLN d § v ~ Ç (  ~ResArbClaimNotification   ° d ONLN d ª v Ç¢ )ä% of the task that called this method.  ° d ONLN d · à ~ îK ( ë ~/Note that only one task can passively claim a r k` ° d ONLN d àK îc )Õesour  ≥† ° d ONLN d àc îé )ce. If the r B@ ° d ONLN d! àè îΩ ),
equested r Ä ° d ONLN d+ àΩ î’ ).esour  g¿ ° d ONLN d0 à’ îÚ )ce has   ° d ONLN d7 ï ~ ° â ( û ~alr -` ° d ONLN d: ï ä ° )eady been claimed passively  8† ° d ONLN dU ï °G )}, this method r  y` ° d ONLN dd ïG ° )@eturns an err  ‡  ° d ONLN dq ï °à )8or ä‡ ° d ONLN ds ïà °ä )	.       	 ° d ONLN du Ø ~ ∫ ñ ( ∑ ~NOTE        
 ° d ONLN dz º ~ » ﬂ *Any task can use the r (  ° d ONLN dê º ‡ » ¯ )besour  p@ ° d ONLN dï º ¯ »µ ).ce arbitration facilities built into the Name  ° d ONLN d√ » ~ ‘ ∆ ( — ~Server; however Î  ° d ONLN d“ » ≈ ‘ Õ )G, r  ∞  ° d ONLN d’ » Œ ‘ Ê )	esour  ¯` ° d ONLN d⁄ » Ê ‘? )ce arbitration is curr ‡ ° d ONLN d »@ ‘î )Zently used only by   ° d ONLN d ‘ ~ ‡ ‰ ( › ~communications tools.   í† ° d ONLN d ‘ ‰ ‡ Í )fY  S  ° d ONLN d ‘ Í ‡ )ou can r ÷` ° d ONLN d" ‘ ‡? )#ead about r  «` ° d ONLN d- ‘? ‡W )2esour  † ° d ONLN d2 ‘X ‡† )ce arbitration in    ° d ONLN dD ‡ ~ Ï ˝ ( È ~Newton Communications Tools    m` ° d ONLN d_ ‡ ˛ Ï  )Ä.  ,  Zapf Dingbats     Ì` ° d ONLN da „ Î
 )u     
 ° d ONLN dc Ò ~ ˝ ı ( ˙ ~The name and type of the r  †‡ ° d ONLN d} Ò ı ˝ )wesour  È  ° d ONLN dÇ Ò ˝∫ )&ce must match the name and type of a r ∫† ° d ONLN d® Òª ˝” )Æesour  ‡ ° d ONLN d≠ Ò‘ ˝¸ )
ce object  ° d ONLN d∑ ˛ ~
 â ( ~alr -` ° d ONLN d∫ ˛ ä
 • )eady r Ê‡ ° d ONLN d¿ ˛ •
 ¬ )egister  6  ° d ONLN d« ˛ √
1 )ed with the Name Server  ŸÄ ° d ONLN dﬁ ˛0
À )m$. Otherwise, this method fails and r Z‡ ° d ONLN d ˛Ã
˙ )úeturns the     ° d ONLN d ~ ¸ ( ~kError_Not_Registered   ° d ONLN d" ¸ )~ err Å@ ° d ONLN d& )or ,  ° d ONLN d( )	.       	 ° d ONLN d*% ~0 ñ (- ~NOTE        
 ° d ONLN d/2 ~> Ö *A  ∫† ° d ONLN d02 Ö> ‰ ) successful call to the    ºÄ ° d ONLN dH2 ‰>2 )_ResourceClaim    ºÄ ° d ONLN dU22>∞ )N method does not mean that   ° d ONLN dp> ~J. (G ~'your task has become the owner of the r   ° d ONLN dó>/JG )±esour  [` ° d ONLN dú>GJU )ce.  g† ° d ONLN d†>UJ[ )Y  (  ° d ONLN d°>[Jæ )ou must wait for your    ° d ONLN d∑J ~V (S ~ResArbClaimNotification   ° d ONLN dŒJVz )ä method to be called befor Q¿ ° d ONLN dËJ{V≠ )se using the  ° d ONLN dÙV ~b Å (_ ~r E  ° d ONLN dıV Çb ö )esour  ç@ ° d ONLN d˙V öb • )ce.      G  ° d ONLN d˛Y ´a ∞ )u     
 ° d ONLN d g ~s ≤ (p ~Parameters:   ° d ONLN dy ~Ö ì *name    ° d ONLN dy ⁄Ö · )\A  ∫† ° d ONLN dy ·Öô )+ string that is unique in the system-wide r  Ÿ† ° d ONLN d=yôÖ∑ )∏egistry     ° d ONLN dDy∑Öπ ).    ° d ONLN dFã ~ó è (î ~type     ° d ONLN dKã ⁄ó · )\A  ∫† ° d ONLN dLã ·óô )+ string that is unique in the system-wide r  Ÿ† ° d ONLN dwãôó∑ )∏egistry     ° d ONLN d~ã∑óπ ).    ° d ONLN dÄù ~© ± (¶ ~ownerPortId    ° d ONLN dåù ⁄©« )\6The object ID of the port for the communications tool.   ° d ONLN d√Ø ~ª   (∏ ~applicationNameId    ° d ONLN d’Ø ⁄ª  )\The shar è  ° d ONLN d›Ø ªb )&ed memory ID of the r  ‰‡ ° d ONLN dÚØbªz )besour  -  ° d ONLN d˜Ø{ª£ )ce owner É¿ ° d ONLN dˇØ¢ª§ )'.   
‡ <Á
 4· <Á
 p ‚ ~‚
‚ ~‚
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d— ~‡ (‹ ~ResourcePassiveUnclaim    €r (‹7      
         ° d ONLN dÁ ~ÛD ( ~!NewtonErr ResourcePassiveUnclaim( ° d ONLN dEÁDÛh )∆char*      ° d ONLN dKÁhÛ} )$name      *@ ° d ONLN dOÁ~Ûä ),  ° d ONLN d]ÙD h (˝Dchar*       ° d ONLN dcÙh y )$type      ∑Ä ° d ONLN dgÙy Ö ));   ° d ONLN dj ~ ( ~Releases a passive claim on a r ‚Ä ° d ONLN dâ )Üesour  *¿ ° d ONLN dé )6ce. This makes it possible for another task to become  ° d ONLN dƒ ~  ( ~the passive owner of the r  w† ° d ONLN dﬁ  )resour  ø‡ ° d ONLN d„π ))ce. Only one task can passively claim a r  %  ° d ONLN d∫“ )≤esour  m@ ° d ONLN d“˚ )
ce at any  ° d ONLN d  ~, î () ~time.      	 ° d ONLN d!: ~E ñ *NOTE       
 ° d ONLN d&G ~S ﬂ *Any task can use the r (  ° d ONLN d<G ‡S ¯ )besour  p@ ° d ONLN dAG ¯Sµ ).ce arbitration facilities built into the Name  ° d ONLN doS ~_ ∆ (\ ~Server; however Î  ° d ONLN d~S ≈_ Õ )G, r  ∞  ° d ONLN dÅS Œ_ Ê )	esour  ¯` ° d ONLN dÜS Ê_? )ce arbitration is curr ‡ ° d ONLN dúS@_î )Zently used only by   ° d ONLN dØ_ ~k ‰ (h ~communications tools.   í† ° d ONLN d≈_ ‰k Í )fY  S  ° d ONLN d∆_ Ík )ou can r ÷` ° d ONLN dŒ_k? )#ead about r  «` ° d ONLN dŸ_?kW )2esour  † ° d ONLN dﬁ_Xk† )ce arbitration in    ° d ONLN dk ~w ˝ (t ~Newton Communications Tools    m` ° d ONLN dk ˛w  )Ä.      Ì` ° d ONLN dnv
 )u     
 ° d ONLN d| ~à ı (Ö ~The name and type of the r  †‡ ° d ONLN d)| ıà )wesour  È  ° d ONLN d.|à∫ )&ce must match the name and type of a r ∫† ° d ONLN dT|ªà” )Æesour  ‡ ° d ONLN dY|‘à¸ )
ce object  ° d ONLN dcâ ~ï â (í ~alr -` ° d ONLN dfâ äï • )eady r Ê‡ ° d ONLN dlâ •ï ¬ )egister  6  ° d ONLN dsâ √ï1 )ed with the Name Server  ŸÄ ° d ONLN däâ0ïÀ )m$. Otherwise, this method fails and r Z‡ ° d ONLN dÆâÃï˙ )úeturns the     ° d ONLN dπñ ~¢ ¸ (ü ~kError_Not_Registered   ° d ONLN dŒñ ¸¢ )~ err Å@ ° d ONLN d“ñ¢ )or ,  ° d ONLN d‘ñ¢ )	.  
ˇˇˇˇˇˇˇˇ 4 ^ (¢ * ˇ†    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úThe Name Server 4⁄ ú˙(         (‡ úName Server Reference      
 ,  (‡7-7     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h – ( e úParameters:   ° d ONLN d  n ú z ± *name    ° d ONLN d  n ¯ z ˇ )\A  ∫† ° d ONLN d  n ˇ z∑ )+ string that is unique in the system-wide r  Ÿ† ° d ONLN d = n∑ z’ )∏egistry     ° d ONLN d D n’ z◊ ).    ° d ONLN d F Ä ú å ≠ ( â útype     ° d ONLN d K Ä ¯ å ˇ )\A  ∫† ° d ONLN d L Ä ˇ å∑ )+ string that is unique in the system-wide r  Ÿ† ° d ONLN d w Ä∑ å’ )∏egistry     ° d ONLN d ~ Ä’ å◊ ).  
ˇˇˇˇˇˇˇˇ 4 ^ F û H ˇ≤    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>7  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~The Name Server 4⁄ <˙
      
         (‡ <7-8       	 )BName Server Reference      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇÓ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h8  
         4⁄ ú˙( ,  	Helvetica              (‡ ú%Why P-Classes Instead of C++ Classes?      
 ,  (‡8-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w ˜ ( p úP-Class   ûP ° d ONLN d  Z ˜ w3 )[Refer  ˇ. ° d ONLN d  Z3 wf )<ence   ä* )Ë8     
         ° d ONLN d  ú' ˛ ($ úThis chapter describes  ,  Zapf Dingbats     ° d ONLN d +1 ú9 † *n     
 ° d ONLN d -. ®:& )Rwhy DDKs use p-classes instead of C++ classes, and why you might want to use them  ° d ONLN d : ®F „ *for your code      ° d ONLN d çO úW † (U ún    
 ° d ONLN d èL ®X µ )the  ]` ° d ONLN d íL ∂X  ) full syntax for a   Õ† ° d ONLN d •L X# )J	p-class i  ^† ° d ONLN d ÆL$X{ )$mplementation deﬁ  {‡ ° d ONLN d ¿L{Xï )Wnition     ° d ONLN d «a úi † (g ún , 
 Courier    
 ° d ONLN d …^ ®j ‰ )
TClassInfo   ° d ONLN d ”^ ‰j ˘ )<, the  ›` ° d ONLN d Ÿ^ ˘j+ )meta data c  ã¿ ° d ONLN d ‰^,jN )3	lass for   ™  ° d ONLN d Ì^Njz )"p-classes.     Ÿ` ° d ONLN d ¯^zj´ ),
Meta Data     ’  ° d ONLN d^¨j# )2is data about a class rather   ° d ONLN dj ®vπ (s ®?than about the information contained in an instance of a class.     ° d ONLN d_ úá † (Ö ún    
 ° d ONLN da| ®à ﬁ )	TProtocol    ° d ONLN dj| ﬁà )6	, the par  §Ä ° d ONLN ds|à8 )$ent class for  êÄ ° d ONLN dÅ|9à\ )7	p-class i  !Ä ° d ONLN dä|]àÑ )$	nterfaces      ° d ONLN dîë úô † (ó ún    
 ° d ONLN dñé ®ö Ê )miscellaneous  ÿ† ° d ONLN d£é Êö Ï )> r 7@ ° d ONLN d•é Ìö )	un-time r  q  ° d ONLN dÆéö6 ))outines   
† Zª( 4° Zª(  
À Z”( 4Ã Z”( p Õ ZÕ.Õ ZÕ.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN d∑∏ ZÀ Å (∆ ZWhy   Ωh ° d ONLN dª∏ ÅÀ Œ )'P-Classes I  *æ ° d ONLN d∆∏ œÀt )Nnstead of C++ Classes?   V˛ (∆ 8    
         ° d ONLN dﬁ‹ úË (Â úOWhen you use C++ classes in ROM, you cannot change your classes without having  ° d ONLN d-È úı — *your users r Ä¿ ° d ONLN d9È —ıZ )5ecompile. That may make it dif ∫  ° d ONLN dWÈZı` )âﬁ  ∆‡ ° d ONLN dYÈ`ıÑ )	cult to ﬁ  -† ° d ONLN dcÈÖı§ )%x bugs.  ° d ONLN dk˚ ú# ( úFor example, suppose you wer  'Ä ° d ONLN dá˚$ƒ )à#e working without p-classes, and im  s  ° d ONLN d™˚ƒ	 )†agine you have   ° d ONLN dπ ú ¨ ( údeﬁ r  ° d ONLN dΩ ≠ ˘ )ned a class hierar ∂Ä ° d ONLN dœ ˘π )L/chy like this in version 1.0 of your interface:    ° d ONLN dˇñ ú¢ “ (ü ú	class X { ° d ONLN d	§ ú∞ ∆ *public:  ° d ONLN d≤ Ææ +virtual void f();  
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 8-0  *	T     )able 8-0 ° d dPro    † Ç ˇˇˇˇˇˇ  
 ÙÜè 	         1 ıÜè ° ∂   Ä        	ˇˇˇˇˇˇˇˇ 8 ° ∂         " ı   † õ ° ñ             † ò ° d dPro     $             
 ¸ÇÅ     . ˇ    n õ n õ G ° d ONLN dˇˇ         ($ ˇ
class X {  † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         *
public: † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         *
	  † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         )$virtual void f(); † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         (B ˇ	 † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         )$virtual void g(); † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         (L ˇ}; † ô † ò ° d dPro     $            G *
  † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         *
class Y : public X {  † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         *
public: † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         *
	  † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         )$virtual void h(); † ô † ò ° d dPro     $            G ° d ONLN dˇˇ         (~ ˇ} † ô † ó † ú † É  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 ^ F y H 40 FÃ H 4˝ Fæ H ˇ∞    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~P-Class Reference 4⁄ <˙
      
         (‡ <8-2       	 )B%Why P-Classes Instead of C++ Classes?      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ ê h ˆ ( e êvirtual void g(); ° d ONLN d  j ~ v ä ( s ~};  ° d ONLN d  Ü ~ í ˆ *class Y : public X { ° d ONLN d * î ~ † ® *public:  ° d ONLN d 3 ¢ ê Æ ˆ +virtual void h(); ° d ONLN d E ∞ ~ º Ñ ( π ~}   ° d ONLN d G » ~ ‘ Ÿ *The C++ compiler cr  o` ° d ONLN d Z » Ÿ ‘^ )[!eates a dispatch table like this:  ° d ONLN d ß( ~4 (1 ~!This is not how dispatch tables r )@ ° d ONLN d »(4 )è>eally appear; this table is just for purposes of illustration. ° d ONLN d: ~F˘ (C ~WSuppose that for version 2.0, you need to add a new virtual method for class X, so the  ° d ONLN d^G ~S ˙ *class declarations become ar KÄ ° d ONLN dzG ˚S' )}e like this:   ° d ONLN dá^ ~j ¥ (g ~	class X { ° d ONLN dël ~x ® *public:  ° d ONLN döz êÜ ˆ +virtual void f(); ° d ONLN d≠à êî ˆ *virtual void g();  ° d ONLN d¿ñ ê¢ò *,virtual void g2(); // This is the new method ° d ONLN dÌ§ ~∞ ä (≠ ~};  ° d ONLN d¿ ~Ã ˆ *class Y : public X { ° d ONLN dŒ ~⁄ ® *public:  ° d ONLN d‹ êË ˆ +virtual void h(); ° d ONLN d Í ~ˆ Ñ (Û ~}   ° d ONLN d" ~ ∂ *This would r 4@ ° d ONLN d. ∑4 )9esult in a dispatch table for r  Í¿ ° d ONLN dM4Ö )}elease 2.0 like this:  ° d ONLN dór ~~ » ({ ~Notice that wher  ∂  ° d ONLN dßr »~ ÿ )Je of õÄ ° d ONLN d´r ÿ~  )fset 8 in r  7  ° d ONLN d∂r~B ))elease 1.0 addr  5‡ ° d ONLN d≈rB~\ )Aessed    ﬁ‡ ° d ONLN dÀr\~t )Y::h   ﬁ‡ ° d ONLN dœrt~¨ ), it now addr  §  ° d ONLN d‹r≠~≈ )9esses    n@ ° d ONLN d‚r∆~‰ )X::g2    n@ ° d ONLN dÁr‰~ˇ ). That   ° d ONLN dÓ ~ã (à ~ means that users would have to r  U` ° d ONLN dãò )ì ecompile their code to use 2.0.  ° d ONLN d/ë ~ù Ñ (ö ~Y @Ä ° d ONLN d0ë Ñù â )o  ∂  ° d ONLN d1ë âù Ø )	ur users   Ì  ° d ONLN d:ë Øù ı )&would have to r    ° d ONLN dIë ˆù¯ )G;ecompile because C++ does a lot of static binding of items   ° d ONLN dÑû ~™ « (ß ~such as vtable of Ä¿ ° d ONLN dïû «™ )Ifsets. In addition,  ú  ° d ONLN d©û™h )Owith C++ classes y   ° d ONLN dªûi™ú )Sou have a ﬁ  W† ° d ONLN d«ûú™‚ )3xed inheritance       	 ° d ONLN d | · ~ Ï ñ ( È ~Class ° d ONLN d Ç · Ê Ï )hMethod ° d ONLN d â ·N Ïg )hOffset       
 ° d ONLN d ë  ~ ¸ Ñ ( ˘ ~X ° d ONLN d ì  Ê ¸ È )hf  ° d ONLN d ï N ¸S )h0  ° d ONLN d ò  ~ Ñ (	 ~X ° d ONLN d ö  Ê Î )hg  ° d ONLN d ú NS )h4  ° d ONLN d ü ~ Ñ ( ~Y ° d ONLN d ° Ê Î )hh  ° d ONLN d £NS )h8       	 ° d ONLN dc ~& ñ (# ~Class ° d ONLN di Ê& )hMethod ° d ONLN dpN&g )hOffset       
 ° d ONLN dx* ~6 Ñ (3 ~X ° d ONLN dz* Ê6 È )hf  ° d ONLN d|*N6S )h0  ° d ONLN d: ~F Ñ (C ~X ° d ONLN dÅ: ÊF Î )hg  ° d ONLN dÉ:NFS )h4  ° d ONLN dÜJ ~V Ñ (S ~X ° d ONLN dàJ ÊV  )hg2 ° d ONLN dãJNVS )h8  ° d ONLN déZ ~f Ñ (c ~Y ° d ONLN dêZ Êf Î )hh  ° d ONLN díZNfX )h12 
ˇˇˇˇˇˇˇˇ 4 ^ (™ * 4 „ ( Ï * < < 4 Ú ( ¸ * < < 4 ( * < < 4 ( * < < 4 (& * < < 4, (6 * < < 4< (F * < < 4L (V * < < 4\ (f * < < ˇ≤    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úP-Class Reference 4⁄ ú˙(         (‡ úP-Class Implementation Deﬁ  ÅP )rnition      
 ,  (‡8-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ∂ ( e úhierar  ª  ° d ONLN d  \ ∂ h · )	chy and ﬁ  Ö† ° d ONLN d  \ ‚ h+ ),xed object sizes.  è¿ ° d ONLN d " \+ h1 )IT  ∞Ä ° d ONLN d # \1 h? )her  Ä ° d ONLN d & \@ hQ )efor hÄ ° d ONLN d * \Q hé )e, you must fr ±@ ° d ONLN d 8 \é h )=eeze the classes involved when   ° d ONLN d W i ú u ‚ ( r úyou ship your ﬁ ¿ ° d ONLN d g i „ u )Grst version if:  ,  Zapf Dingbats     ° d ONLN d w  ú á † ( Ö ún    
 ° d ONLN d y | ® à Æ )Y  @Ä ° d ONLN d z | Æ ày )0ou ship a class interface with virtual functions     ° d ONLN d ´ ë ú ô † ( ó ún    
 ° d ONLN d ≠ é ® ö Æ )Y  @Ä ° d ONLN d Æ é Æ ö ≈ )ou ex  /` ° d ONLN d ≥ é ∆ ö ‹ )pose   -† ° d ONLN d ∏ é › ö )data members     ° d ONLN d ≈ £ ú ´ † ( © ún    
 ° d ONLN d « † ® ¨ Æ )Y  @Ä ° d ONLN d » † Æ ¨ ≈ )ou ex  /` ° d ONLN d Õ † ∆ ¨à ).pose the size of objects by allowing users to  ¬† ° d ONLN d ˚ †à ¨™ )¬derive f ∆¿ ° d ONLN d †™ ¨≠ )"r  ã¿ ° d ONLN d †Æ ¨ )om your classes or     ° d ONLN d † ¨ )Uto   ° d ONLN d ¨ ® ∏ Æ ( µ ®d õ¿ ° d ONLN d ¨ Æ ∏ √ )eclar  É  ° d ONLN d  ¨ √ ∏( )e stack-based instances  ° d ONLN d8 Ω ú …ú ( ∆ ú:If you made a mistake and need to add a virtual function,   *@ ° d ONLN dr Ωù …◊ ( ∆ùdata member  Ä ° d ONLN d} Ω◊ …Ÿ ):,  ÄÄ ° d ONLN d~ ΩŸ … ) or extra base   ° d ONLN dç   ú ÷ Á ( ” úclass, your users   é` ° d ONLN dü   Á ÷ )Kwould h  ∑Ä ° d ONLN d¶   ÷- )%ave to r §@ ° d ONLN dÆ  - ÷W )!	ecompile.  ° d ONLN d∏ ‹ ú Ë À ( Â úP-classes g ≈‡ ° d ONLN d√ ‹ À Ë ﬁ )/et ar  ‡ ° d ONLN d» ‹ ﬂ Ë )ound this pr Ä‡ ° d ONLN d‘ ‹ ËD )6
oblem by r ﬂ¿ ° d ONLN dﬁ ‹D Ë¯ )/*estricting what can be seen of a class deﬁ ,† ° d ONLN d	 ‹˘ Ë& )µnition. By   ° d ONLN d È ú ı Õ ( Ú údoing this,   @ ° d ONLN d  È Œ ı ˝ )2p-classes g  Q† ° d ONLN d+ È ˝ ı# )/uarantee Ú` ° d ONLN d3 È# ıe )& several things.     ° d ONLN dD ˇ ú † ( ún    
 ° d ONLN dF ¸ ®π )@Clients never see the size of an object, so that implementors ar ¿ ° d ONLN dÜ ¸∫» (∫e fr  ~@ ° d ONLN dä ¸» )ee to add or r .  ° d ONLN dò ¸# );emove  ° d ONLN dû ® È ( ®data members.     ° d ONLN d¨ ú% † (# ún    
 ° d ONLN dÆ ®& Ò )Clients never dir  H¿ ° d ONLN dø Ú& )JCectly see vtable indices, so that implementors can add methods, as   ° d ONLN d& ®2§ (/ ®9long as they keep the old methods intact. “Intact” means:       ° d ONLN d<8 ®A ≠ *n        
 ° d ONLN d>5 ¥A/ )The names must not change        ° d ONLN dXG ®P ≠ (M ®n       
 ° d ONLN dZD ¥P – )The or ˆ@ ° d ONLN d`D –P≥ )3der of the methods in the interface must not change        ° d ONLN dîV ®_ ≠ (\ ®n       
 ° d ONLN dñS ¥_ œ )If ther  T¿ ° d ONLN dùS œ_ ﬂ )e ar c` ° d ONLN d°S ﬂ_ ˘ )e any  çÄ ° d ONLN dßS ˘_7 )data members ^  ° d ONLN d≥S8_‡ )?' in the interface, they must not change        ° d ONLN d€e ®n ≠ (k ®n       
 ° d ONLN d›b ¥n ∫ )Y  @Ä ° d ONLN dﬁb ∫nÆ )7ou can add methods to the end of the “1.0” method list.  ° d ONLN ds ú “ (| úIn addition,  ¡` ° d ONLN d#s “ )6p-classes h  B  ° d ONLN d.s )0ave  1‡ ° d ONLN d2sB )
meta data, p  ° d ONLN d<sB¬ ). which has these advantages:     ° d ONLN dYâ úë † (è ún    
 ° d ONLN d[Ü ®í È )It solves the pr ç  ° d ONLN dkÜ Èíå )A%oblem of old code calling a new class      ° d ONLN dëõ ú£ † (° ún    
 ° d ONLN dìò ®§ π )It al  â@ ° d ONLN dòò π§Ç ).lows detection of new code calling old classes     ° d ONLN d«≠ úµ † (≥ ún    
 ° d ONLN d…™ ®∂2 )!It allows the object system to cr  ~‡ ° d ONLN dÍ™2∂& )ä:eate a new instance of a p-class given only the p-class’s  ° d ONLN d$∂ ®¬ ¿ (ø ®name      ° d ONLN d)À ú” † (— ún    
 ° d ONLN d+» ®‘6 )Clients or the Newton OS can cr  R‡ ° d ONLN dJ»6‘% )é6eate new instances by capabilities of implementations  ° d ONLN dÄ‘ ®‡t (› ®/so that the system can, for example, handle a r |† ° d ONLN dØ‘t‡Ê )Ãequest for “an instance of   , 
 Courier   J† ° d ONLN d ‘Á‡ )s	TFaxModem    J† ° d ONLN d”‘‡" )6,  ° d ONLN d’‡ ®Ï2 (È ® any brand, that can go 19,200.”   ° d ONLN dˆÒ ú˝ Ì (˙ úP-class meta data i V† ° d ONLN d	Ò Ó˝T )Rs implemented in class     '@ ° d ONLN d ÒU˝ë )g
TClassInfo   '@ ° d ONLN d*Òë˝¶ )<; see  wÄ ° d ONLN d0Ò¶˝	 )“Class TClassInfo” on  ° d ONLN dF˛ ú
 ≥ ( úpage  Z‡ ° d ONLN dK˛ ¥
 ¡ )8-5  Æ¿ ° d ONLN dN˛ ¡
	 ) for information.   
 Z,( 4 Z,(  
< ZD( 4= ZD( p > Z>.> Z>.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN da) Z< ò (7 Z	P-Class I B2 ° d ONLN dj) ô<* )?mplementation Deﬁ  cˆ ° d ONLN d|)*<T )ënition   V˛ )ˆ8     
         ° d ONLN dÑM úY £ (V úA ∫† ° d ONLN dÖM £Y • )   :† ° d ONLN dÜM ¶Y … )	p-class i  À† ° d ONLN dèM …Y{ )#(mplementation is simply a subclass of a  ˆ‡ ° d ONLN d∑M{Yû )≤	p-class i  á‡ ° d ONLN d¿MüY« )$
nterface.  á@ ° d ONLN d M«Y  )(An implementation  ° d ONLN d‹Z úf › (c útakes the form:   ° d ONLN dÏq ú}> *#include "ProtoInterface.h"  ° d ONLN d úãå *(PROTOCOL implName: public ProtoInterface ° d ONLN d2ç Æô∞ ++[ PROTOCOLVERSION ( number [ . number ] ) ] ° d ONLN d^õ úß ¢ (§ ú{ ° d ONLN d`© úµ ∆ *public:  
ˇˇˇˇˇˇˇˇ 4 ^ F h H 4 ê F ı H 4
 F H 4U F_ H 4u F H 4ö F¬ H 4Û F˝ H 4, FY H ˇ˙    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~P-Class Reference 4⁄ <˙
      
         (‡ <8-4       	 )BP-Class Implementation Deﬁ ÅP )rnition     (Ô ~Draft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ ê hÄ ( e ê(PROTOCOL_IMPL_HEADER_MACRO ( implName );  ° d ONLN d , x ê Ñí *+[ static void * OperatorNew ( [ void ] ); ]  ° d ONLN d Y î ê †å **[ static void OperatorDelete ( void * ); ] ° d ONLN d Ö ∞ ê ºû *-[ CAPABILITIES ( capability-list ... )  ... ]  ° d ONLN d ¥ Ã ê ÿD *<<<redeclared New(), if any>>> ° d ONLN d ‘ ⁄ ê Ê  *<<<redeclared methods>>> ° d ONLN d Ó ˆ ê ‰ *<<<additional  ° d ONLN d ¸ ˆ ‰, )Tdata members ° d ONLN d ˆ,» )H and methods, as needed>>> ° d ONLN d# ~ ä ( ~};    ° d ONLN d& ~( æ *The statement    xÄ ° d ONLN d4 ø([ )APROTOCOL_IMPL_HEADER_MACRO   xÄ ° d ONLN dN[( )ú&, with the implementation name as its  ° d ONLN dt) ~5 ù (2 ~only ar É` ° d ONLN d{) ù5 )gument, should appear ﬁ  '` ° d ONLN dì)5A )prst; it declar G  ° d ONLN d°)A5f )4es some  ù‡ ° d ONLN d©)f5n )%m  q‡ ° d ONLN d™)o5Õ )	ethods that assist the   ° d ONLN d¡6 ~B (? ~#implementation glue. If you used Pr   ° d ONLN d‰6B• )†otocolGen to generate the sour O‡ ° d ONLN d6•B )áce code skeleton, this   ° d ONLN dC ~O ˆ (L ~statement is added for you. ° d ONLN d5U ~a ∫ *The methods    ª` ° d ONLN dAU ∫a ¸ )<OperatorNew    ª` ° d ONLN dLU ¸a )B and     ®Ä ° d ONLN dQUaf )OperatorDelete   ®Ä ° d ONLN d_Ufaq )T ar  ÌÄ ° d ONLN dbUqa  )e similar to the C++     æ† ° d ONLN dwUÀa› )Znew    æ† ° d ONLN dzU›aÚ ) and     ° d ONLN db ~n ¢ (k ~delete    ° d ONLN dÖb ¢n◊ )$G operators. If you need to allocate instances of your implementation in  Í† ° d ONLN dÃb◊nŸ (k◊  j† ° d ONLN dÕb⁄nﬂ )a  j† ° d ONLN dŒbﬂn· )   ° d ONLN dœo ~{ ¡ (x ~particular heap   ° d ONLN dﬁo ¬{ … )D o Ä ° d ONLN d‡o  { – )r  w  ° d ONLN d‚o –{ Û )need to  Ø` ° d ONLN dÍo Û{≥ )#-perform special initialization, simply declar  L¿ ° d ONLN do¥{˝ )¡e these methods  ° d ONLN d'| ~àP (Ö ~/and write the code. The methods must be static. ° d ONLN dWé ~ö  *Any methods of the form    ﬁ  ° d ONLN doé öJ )rNew(char*, ...)    ﬁ  ° d ONLN d~éJöU )Z ar  #  ° d ONLN dÅéVöa )e r  1¿ ° d ONLN dÑéaöÄ )edeclar  ˛` ° d ONLN dãéÄö )ed in the implementation with  ° d ONLN d©õ ~ß é (§ ~the     ›` ° d ONLN d≠õ éß ¨ )char*    ›` ° d ONLN d≤õ ¨ß ∑ ) ar  "` ° d ONLN dµõ ∏ß ‡ )gument r Ø  ° d ONLN dΩõ ‡ß^ )(emoved. When the method r    ° d ONLN d÷õ_ßò )eceives contr  ˆ` ° d ONLN d„õóß˙ )8ol, the object has been  ° d ONLN d˚® ~¥ ˜ (± ~allocated but not initialized ª† ° d ONLN d® ˜¥ ¸ )y.  é  ° d ONLN d® ¸¥ )Y  NÄ ° d ONLN d®¥B )ou should use    Ë  ° d ONLN d)®B¥T )@New    Ë  ° d ONLN d,®T¥„ )$ to set up a null object state, and    ° d ONLN dPµ ~¡ ¢ (æ ~Delete    ° d ONLN dVµ ¢¡ ‹ )$ should be pr  ßÄ ° d ONLN dcµ ‹¡ Ô ):epar 8@ ° d ONLN dgµ ¡l )ed to deal with an object wh ¿@ ° d ONLN dÉµl¡t )|er N‡ ° d ONLN dÖµu¡ )	e i  Ä‡ ° d ONLN dàµ¡„ )
nitialization has failed.   
Ê <Ì
 4Á <Ì
 p Ë ~Ë
Ë ~Ë
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d¢◊ ~Ê ƒ (‚ ~Capabilities    €r (‚8      
         ° d ONLN d∞Ì ~˘ ë (ˆ ~The     ª¿ ° d ONLN d¥Ì ë˘ Ÿ )CAPABILITIES   ª¿ ° d ONLN d¿Ì Ÿ˘ )H statement in a  ≤@ ° d ONLN d–Ì˘? )C	p-class i  C@ ° d ONLN dŸÌ@˘Û )$&mplementation declaration adds valued  ° d ONLN dˇ˙ ~ ( ~#attributes to the implementation’s  ‰Ä ° d ONLN d"˙d )òclass information. rÄ ° d ONLN d4˙eú )O The keywor  ß† ° d ONLN d?˙úÌ )7d is followed by a   ° d ONLN dR ~ ˇ ( ~capability list enclosed in par a  ° d ONLN dq ˇ )Åenthes Ä ° d ONLN dw% )es   ° d ONLN dy%Ÿ )	); no semicolon should follow the closing   ° d ONLN d¢ ~  å ( ~par G  ° d ONLN d• ç  ≥ )	enthesis.    ° d ONLN dØ& ~2 ∆ (/ ~CAPABILITIES    ° d ONLN dª& ∆2 “ )H pr  «  ° d ONLN dæ& “2 )Eovide extra information about the implementation. This makes it easy   ° d ONLN d3 ~? õ (< ~to sear ÉÄ ° d ONLN d
3 õ? ∏ )ch the   ¢Ä ° d ONLN d3 ∏? ¡ )Pr q  ° d ONLN d3 ¬? )
otocol Registry  ‹‡ ° d ONLN d"3?ë )B" and instantiate an instance of a  j` ° d ONLN dD3í?∏ )é	p-class b  ö† ° d ONLN dM3∏?È )&y what the   ° d ONLN dX@ ~L £ (I ~	p-class c ò‡ ° d ONLN da@ £L+ )%an do, rather than by what the     ° d ONLN dÄ@,LO )â	p-class i  ì  ° d ONLN dâ@OLv )#s named. ° d ONLN díR ~^ ë ([ ~The     ª¿ ° d ONLN dñR ë^ Ÿ )CAPABILITIES   ª¿ ° d ONLN d¢R Ÿ^ )H list is a set of    C† ° d ONLN d¥R^_ )><key, value>   C† ° d ONLN d¿R_^ì )H pairs, wher î¿ ° d ONLN dÃRì^„ )4e the value part is  ° d ONLN d‡_ ~k  (h ~&optional. Each pair is enclosed in par  =‡ ° d ONLN d_!k= )£enthes Û@ ° d ONLN d_=kF )es ˘‡ ° d ONLN d_Fk¿ )	; if the value is missing, the   t‡ ° d ONLN d-_¡kœ ){par  <  ° d ONLN d0_–k˝ )
entheses a x  ° d ONLN d:_˝k  )-r  =  ° d ONLN d;_k )e  ° d ONLN d=l ~x Ò (u ~optional. The following ar  Å‡ ° d ONLN dWl Òxó )s'e examples of valid capability entries:    ° d ONLN dÉ ~è ‰ (å ~("modem", "9600") ° d ONLN díÉ ‰è§ )f // key = "modem", value = "9600" ° d ONLN d≥ë ~ù Æ (ö ~("flsh")  ° d ONLN dæë ¥ùJ )6// key = "flsh", no value  ° d ONLN dÿü ~´ ¢ (® ~"sram"  ° d ONLN d·ü ¥´J )6// key = "sram", no value  
ˇˇˇˇˇˇˇˇ 4 ¯ ( * 4+ (5 * 4d ({ * 4™ (¡ * 4Ô ( * 45 (L * 4a (k * ˇ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úP-Class Reference 4⁄ ú˙(         (‡ úClass   VÄ )
TClassInfo      
 ,  (‡8-5     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h £ ( e úA ∫† ° d ONLN d  \ £ h • )   :† ° d ONLN d  \ ¶ h À )	p-class c  SÄ ° d ONLN d  \ À hö )%.an have any number of capability declarations: , 
 Courier   ° d ONLN d : s ú å ( | ú(CAPABILITIES( ("modem", "9600") "flsh" )  ° d ONLN d c Å ú ç  *CAPABILITIES( "sram" ) ° d ONLN d z è ú õ" *ACAPABILITIES( ("copyright" "apple") ("version" "1.01") "public" )   
 ¡ Z »( 4 ¬ Z »( p  √ ú √( √ ú √(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d º ≤ ú ¡ • *%V  ÌŒ ° d ONLN d Ω ≤ § ¡ )ersion Numbers   €r ( Ω 8      
         ° d ONLN d Õ » ú ‘ Ø ( — úThe     ª¿ ° d ONLN d — » Ø ‘	 )PROTOCOLVERSION    ª¿ ° d ONLN d ‡ »	 ‘ )Z; statement can be used to specify a version number for the   ° d ONLN d ’ ú ·- ( ﬁ ú implementation. It appears befor  ëÄ ° d ONLN d; ’- ·Z )ë
e the open K  ° d ONLN dE ’[ ·a ). c ;` ° d ONLN dG ’b · )'urly brace of the implementation's body  ¯  ° d ONLN dn ’ · )Ø.  ° d ONLN dp ‚ ú Ó ∏ ( Î úThe ar  Ä¿ ° d ONLN dv ‚ ∏ Ó )guments to the keywor  î  ° d ONLN dã ‚ Ó/ )fd ar Ù¿ ° d ONLN dè ‚/ Ó )5e a single number or two numbers separated by a dot.   ° d ONLN dƒ Ô ú ˚ “ ( ¯ úFor example q† ° d ONLN dœ Ô ” ˚ ’ )7:    ° d ONLN d— út ( ú$PROTOCOL TIntelModem : public TModem  ° d ONLN d˜ Æ & +PROTOCOLVERSION(2.1)  ° d ONLN d" ú. ¢ (+ ú{ ° d ONLN d0 Æ<P +body of the implementation… ° d ONLN d+> úJ ¢ (G ú}   ° d ONLN d-V úb £ *V  ú` ° d ONLN d.V ¢b ˚ )ersion numbers, as r Ù@ ° d ONLN dBV ˚b- )Yeturned by     «Ä ° d ONLN dMV.b¶ )3TClasssInfo::Version   «Ä ° d ONLN daV¶b≥ )x, ar åÄ ° d ONLN deV¥b÷ )e a long Ä ° d ONLN dmV◊bŸ )#   îÄ ° d ONLN dnVŸbÍ )wor  &  ° d ONLN dqVÎb' )d of the form: ° d ONLN dÄ• ú±5 (Æ ú"The high and low bytes of the long  <‡ ° d ONLN d¢•6±8 )ö   º‡ ° d ONLN d£•8±I )wor  N` ° d ONLN d¶•J±[ )d ar Ø  ° d ONLN d™•[±f )e r  Ω¿ ° d ONLN d≠•f±∞ )eserved for futur  1¿ ° d ONLN dæ•±±Ê )Ke use and ar ;@ ° d ONLN d •Ê±ˇ )5e curr ≥‡ ° d ONLN d–•ˇ± )ently  ° d ONLN d÷≤ úæ © (ª úzer † ° d ONLN dŸ≤ ™æ ± )o.  
≈ Z‡( 4∆ Z‡(  
 Z¯( 4Ò Z¯( p Ú ZÚ.Ú ZÚ.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN d›› Z — (Î ZClass TClassInfo    V˛ (Î 8    
         ° d ONLN dÔ ú Ø (
 úThe     ª¿ ° d ONLN dÛ Ø Î )
TClassInfo   ª¿ ° d ONLN d˝ Î Ì )<   ;¿ ° d ONLN d˛ Ó )class  é` ° d ONLN d )pr UÄ ° d ONLN d. )
ovides   ¸  ° d ONLN d._ )meta data f  é  ° d ONLN d`’ )2or an implementation of a  §` ° d ONLN d2’  )u
p-class. N ‡ ° d ONLN d<$ ),	ote that   ° d ONLN dE ú › ( úall methods of    ¿ ° d ONLN dT ﬁ )B
TClassInfo   ¿ ° d ONLN d^% )< ar  ^¿ ° d ONLN da%, )e    ®` ° d ONLN dc,J )const    ®` ° d ONLN dhJq )	 because     w† ° d ONLN dqrx )(T  w† ° d ONLN drxÆ )	ClassInfo    w† ° d ONLN d{ÆŸ )6 objects ar  I¿ ° d ONLN dÜ⁄ ),e designed to  ° d ONLN dî ú' ü ($ úr E  ° d ONLN dï †' ﬂ )eside in ROM.  ° d ONLN d£- ú9 ≠ (6 úHer `  ° d ONLN d¶- ≠9 ﬂ )e is the deﬁ ûÄ ° d ONLN d≥- ﬂ9. )2nition of the class:   ° d ONLN d»D úP ¸ (M úclass TClassInfo  ° d ONLN dŸR ú^ Ã *{public: ° d ONLN d„` Ælû +(const char * ImplementationName() const;  ° d ONLN dn ÆzÜ *$const char * InterfaceName()  const; ° d ONLN d3| Æàh *const char * Signature() const;  ° d ONLN dTä Æñ, *size_t Size() const;   ° d ONLN dkò Æ§J *void MakeAt(void *) const; ° d ONLN dá¶ Æ≤b *unsigned long Version() const; ° d ONLN dß¥ Æ¿2 *long Register() const; ° d dPro    † Ç ˇˇˇˇˇˇ  
e Øõ— 	         1v ∞õ ˘ ° ∂   Ä        	ˇˇˇˇˇˇˇˇ 8 ° ∂         "f ∞   ˇˇˇˇˇˇ 	         1v ¯õA ° ∂   Ä           	ˇˇˇˇˇˇˇˇ 8 ° ∂         #   ˇˇˇˇˇˇ 	         1v@õâ ° ∂   Ä           	ˇˇˇˇˇˇˇˇ 8 ° ∂         #   ˇˇˇˇˇˇ 	         1vàõ— ° ∂   Ä           	ˇˇˇˇˇˇˇˇ 8 ° ∂         #   † õ ° ñ             † ò ° d dPro     $             
~Öã—  	 . ˇ    6" 6" Ê∆ ° d ONLN dˇˇ         (áñreserved  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
~ Øã ˚ Ê∆ ° d ONLN dˇˇ         (á æreserved  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
~ ıãC ÷ ° d ONLN dˇˇ         )Qmajor  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
~=ãã ÷ ° d ONLN dˇˇ         )Hminor  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
e Ør æ G ° d ONLN dˇˇ         (n ±31  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
e≈r– G ° d ONLN dˇˇ         (n»0 † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
e}rà G ° d ONLN dˇˇ         (nÄ8 † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
e5rE G ° d ONLN dˇˇ         (n816  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
e Ìr ˝ G ° d ONLN dˇˇ         (n 24  † ô † ó † ú † É  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 ^ F h H 4 ◊ F · H 4 Ò F ˚ H 4X F± H 4 F H ˇà    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~P-Class Reference 4⁄ <˙
      
         (‡ <8-6       	 )BClass  VÄ )
TClassInfo     (Ô ~Draft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ ê h  ( e êlong DeRegister() const;  ° d ONLN d  j ê v& *TProtocol * New()  const;  ° d ONLN d 5 x ê ÑP * void Destroy(TProtocol *) const; ° d ONLN d W Ü ê í™ */const char * GetCapability(const char *) const;  ° d ONLN d à î ê †z *'const char * GetCapability(long) const;  ° d ONLN d ∞ ¢ ~ Æ ä ( ´ ~};   
 ‘ < €
 4 ’ < €
 p  ÷ ~ ÷
 ÷ ~ ÷
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d ≥ ≈ ~ ‘x *%$ImplementationName and InterfaceName   €r ( –8      
         ° d ONLN d Ÿ € ~ Á¬ ( ‰ ~6const char * TClassInfo :: ImplementationName() const;  ° d ONLN d Ë ~ Ù§ *1const char * TClassInfo :: InterfaceName() const;    ° d ONLN dB ˙ ~ ¶ *	Returns t  Ä ° d ONLN dK ˙ ßh ))+he interface or implementation name of the   w  ° d ONLN dv ˙hã )¡	p-class i    ° d ONLN d ˙å“ )$mplementation.  
+ <2
 4, <2
 p - ~-
- ~-
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dé ~+ á (' ~V ÌŒ ° d ONLN dè Ü+ ´ )ersion   €r ('8      
         ° d ONLN dó2 ~>Ü (; ~,unsigned long TClassInfo :: Version() const;    ° d ONLN dƒD ~P ¶ *	Returns t  Ä ° d ONLN dÕD ßPL ))#he implementation’ s version number  9  ° d ONLN dDLPù )•. This number is a   f@ ° d ONLN dDùPƒ )Qlong wor 6  ° d ONLN dD≈P” )(d o  G` ° d ONLN dD”P )f the form:  ° d ONLN dê ~ú Ö (ô ~A ∫† ° d ONLN dê Öú – ) version is speciﬁ ú‡ ° d ONLN d.ê —ú ı )L	ed for a   æ@ ° d ONLN d7ê ıú )$	p-class i  O@ ° d ONLN d@êúÜ )$mplementation with the     ™‡ ° d ONLN dWêÜú‡ )mPROTOCOLVERSION    ™‡ ° d ONLN dfê‡ú‚ )Z   ° d ONLN dgù ~© ü (¶ ~keywor  ˘` ° d ONLN dmù ü© ª )!d. See   h  ° d ONLN dtù º© » )“V ÑÄ ° d ONLN dvù «©; )ersion Numbers” on page  ˘† ° d ONLN déù;©H )t8-5  MÄ ° d ONLN dëùI©z ) for details.   
Œ <’
 4œ <’
 p – ~–
– ~–
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN düø ~Œ ∏ (  ~	Signature   €r ( 8      
         ° d ONLN d™’ ~·å (ﬁ ~-const char * TClassInfo :: Signature() const;   ° d ONLN dÿÁ ~Û ® *	Returns a  ¬  ° d ONLN d·Á ®Û ™ )*   B  ° d ONLN d‚Á ´Û Ø )s    ° d ONLN d„Á ØÛ œ )ignatur  ÷Ä ° d ONLN dÍÁ œÛ ” ) e  †  ° d ONLN dÎÁ ‘Û ‹ ) d ;‡ ° d ONLN dÌÁ ›Ûx )	"escribing the implementation. Curr §‡ ° d ONLN dÁxÛÛ )õently this is the same as the  ° d ONLN d-Ù ~  ¡ (˝ ~interface name.  
% <,
 4& <,
 p ' ~'
' ~'
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d= ~% ò *$Size   €r (!8      
         ° d ONLN dC, ~8J (5 ~"size_t TClassInfo :: Size() const;    ° d ONLN df> ~J ¶ *	Returns t  Ä ° d ONLN do> ßJ ))Qhe size of an instance of the implementation. This can be used to allocate space   ° d ONLN d¿K ~W ÿ (T ~for an instance befor ±` ° d ONLN d’K ÿW ˇ )Z
e calling    ‡ ° d ONLN dﬂK W$ )(MakeAt   ‡ ° d ONLN dÂK$W& )$.   
| <É
 4} <É
 p ~ ~~
~ ~~
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dÁm ~| ¨ (x ~MakeAt    €r (x8      
         ° d ONLN dÔÉ ~èn (å ~(void TClassInfo :: MakeAt(void *) const;    ° d ONLN dï ~° ñ *Make N  ° d ONLN dï ó° õ )s  ã  ° d ONLN dï õ° Ì ) an instance of the  «Ä ° d ONLN d1ï Ì° )R	p-class a  p  ° d ONLN d:ï°E )&t the speciﬁ ˛  ° d ONLN dGïE°g )2ed addr  _‡ ° d ONLN dNïh°w )#ess. ° d dPro    † Ç ˇˇˇˇˇˇ  
R àà™ 	         1c âà “ ° ∂   Ä        	ˇˇˇˇˇˇˇˇ 8 ° ∂         "S â   ˇˇˇˇˇˇ 	         1c —à ° ∂   Ä           	ˇˇˇˇˇˇˇˇ 8 ° ∂         #   ˇˇˇˇˇˇ 	         1càb ° ∂   Ä           	ˇˇˇˇˇˇˇˇ 8 ° ∂         #   ˇˇˇˇˇˇ 	         1caà™ ° ∂   Ä           	ˇˇˇˇˇˇˇˇ 8 ° ∂         #   † õ ° ñ             † ò ° d dPro     $             
k^x™    	 . ˇ    6" 6" Ê∆ ° d ONLN dˇˇ         (toreserved  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
k àx ‘ Ê∆ ° d ONLN dˇˇ         (t óreserved  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
k Œx ÷ ° d ONLN dˇˇ         )Qmajor  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
kxd ÷ ° d ONLN dˇˇ         )Hminor  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
R à_ ó G ° d ONLN dˇˇ         ([ ä31  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
Rû_© G ° d ONLN dˇˇ         ([°0 † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
RV_a G ° d ONLN dˇˇ         ([Y8 † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
R_ G ° d ONLN dˇˇ         ([16  † ô † ó † ú † õ ° ñ             † ò ° d dPro     $             
R ∆_ ÷ G ° d ONLN dˇˇ         ([ …24  † ô † ó † ú † É  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 ¸ ( * 4F (ú * 4È (Û * 4@ (J * 4ó (° * ˇT    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úP-Class Reference 4⁄ ú˙(         (‡ úClass   VÄ )
TClassInfo      
 ,  (‡8-7     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(  
 k Z r( 4 l Z r( p  m ú m( m ú m(  
ˇ·ˇ‚7Ç      ˇˇ‹. ˇ◊ ° d ONLN d   \ ú k Œ ( g úRegister    €r ( g 8 , 
 Courier      
         ° d ONLN d 
 r ú ~t ( { ú$long TClassInfo :: Register() const;    ° d ONLN d / Ñ ú ê ¿ *Register ™¿ ° d ONLN d 7 Ñ ¿ ê ƒ )$s  Á¿ ° d ONLN d 8 Ñ ƒ ê ÷ ) the   ≈  ° d ONLN d = Ñ ◊ ê ˙ )	p-class i  V  ° d ONLN d F Ñ ˚ ê≠ )$(n the system-wide database of available  Õ  ° d ONLN d n Ñ≠ êÎ )≤p-class (the Pr  ıÄ ° d ONLN d } ÑÎ ê )>otocol   ° d ONLN d Ñ ë ú ù ∆ ( ö ú
Registry).  D  ° d ONLN d é ë « ù' )+R This allows other parts of the system, such as other tasks, to make instances by  ° d ONLN d ‡ û ú ™ ∂ ( ß úname.  
 œ Z ÷( 4 – Z ÷( p  — ú —( — ú —(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d Ê ¿ ú œ ‡ *$
DeRegister   €r ( À 8      
         ° d ONLN d Ú ÷ ú ‚Ä ( ﬂ ú&long TClassInfo :: DeRegister() const;    ° d ONLN d Ë ú Ù   *	Removes t  ∞` ° d ONLN d" Ë   Ù ◊ ).he   À` ° d ONLN d% Ë ◊ Ù ˛ )
p-class fr å‡ ° d ONLN d/ Ë ˇ Ù* )(	om the Pr  Ç` ° d ONLN d8 Ë* Ùl )+otocol Registry  “` ° d ONLN dG Ëk Ùm )A.  R` ° d ONLN dH Ën Ù˝ )# Existing instances of the class ar    ° d ONLN dk Ë˛ Ù )êe not  ° d ONLN dq ı ú ≤ ( ˛ údestr ©¿ ° d ONLN dv ı ≤' )oyed or otherwise tracked.  
& Z-( 4' Z-( p ( ú((( ú((  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dë ú& ∑ (" úNew   €r (" 8      
         ° d ONLN dñ- ú9Ä (6 ú&TProtocol * TClassInfo :: New() const;    ° d ONLN dΩ? úK ¥ *Make N  ° d ONLN d¡? µK ¿ )s a    ° d ONLN dƒ? ¡K ) new instance of the Ë  ° d ONLN dÿ?K> )W
 p-class i ˘  ° d ONLN d‚?>K¨ )&mplementation. The curr    ° d ONLN d˘?≠KΩ )oent  l` ° d ONLN d˝?ΩK¿ )t  Æ¿ ° d ONLN d˛?¿KÊ )ask heap ò  ° d ONLN d?ÁK )' (that is, the   ° d ONLN dL úX Ÿ (U úheap used by    ›` ° d ONLN d"L ŸX ˝ )=malloc   ›` ° d ONLN d(L ˝X )$) i  ô† ° d ONLN d+LX™ )	's used to do the allocation unless the   0† ° d ONLN dRL´X— )•	p-class h  ™† ° d ONLN d[L—X )&as implemented     ° d ONLN djY úe ﬁ (b úOperatorNew   ï  ° d ONLN duY ›e ﬂ )A.   
ä Zë( 4ã Zë( p å úå(å úå(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dw{ úä À (Ü úDestroy   €r (Ü 8      
         ° d ONLN dÄë úù∞ (ö ú.void TClassInfo :: Destroy(TProtocol *) const;    ° d ONLN dØ£ úØ ≥ *Destr  K@ ° d ONLN d¥£ ¥Ø ø )oy O‡ ° d ONLN d∂£ øØ √ )s  å‡ ° d ONLN d∑£ √Ø ¸ ) an instance.  ¢† ° d ONLN d≈£ ¸Ø )9The    ﬁ` ° d ONLN d…£Ø )f  ﬁ` ° d ONLN d £Ø' )ree    ﬁ` ° d ONLN dÕ£'Ø) )   ^` ° d ONLN dŒ£*ØT )
function i ’  ° d ONLN dÿ£TØ )*)s used to do the deallocation unless the   Q` ° d ONLN d£Ø$ )∞p-class  ° d ONLN d	∞ úº ° (π úh Q` ° d ONLN d
∞ ¢º Î )as implemented     ï† ° d ONLN d∞ Îº? )IOperatorDelete   ï† ° d ONLN d'∞?ºA )T.   
· ZË( 4‚ ZË( p „ ú„(„ ú„(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d)“ ú· Ò (› úGetCapabiltity    €r (› 8      
         ° d ONLN d9Ë úÙÊ (Ò ú7const char * TClassInfo :: GetCapabiltity(const char *      ° d ONLN dpËÊÙÛ (ÒÊcap        ° d ONLN dsËÙÙ$ )) const;   ° d ONLN d|˙ ú Ã ( ú
Parameter:    ° d ONLN dá ú © *cap     ° d ONLN dã ¯ ˇ )\A  ∫† ° d ONLN då ˇ- ) capability  £Ä ° d ONLN dó,. )-.  ° d ONLN dô ú*w (' ú3Returns information about a p-class’s capabilities. ° d ONLN dÕ0 ú< ü *I  ﬁÄ ° d ONLN dŒ0 ü< µ )f the  ¿ ° d ONLN d‘0 ∂<
 )class information h  o  ° d ONLN dÁ0
<B )Tas the speciﬁ  ˜† ° d ONLN dı0B<z )8ed capability  ≈‡ ° d ONLN d0z<∫ )8, this method r  † ° d ONLN d0ª<ﬁ )Aeturns a ö¿ ° d ONLN d0ﬁ< )# pointer to the  ° d ONLN d)= úI « (F ú
capability  † ° d ONLN d3= »I œ ),’s ‡ ° d ONLN d5= œI È ) value Ë@ ° d ONLN d;= ÈI Ó ).  ° d ONLN d>O ú[ ü (X úI ﬁÄ ° d ONLN d?O ü[c ).f the capability does not have a value, a non-   ¬@ ° d ONLN dmOd[v )≈NIL    c‡ ° d ONLN dpOv[¸ )  pointer to an empty string is r ≥† ° d ONLN dêO¸[ )Üeturned  p  ° d ONLN dóO[! )#.  ° d ONLN dôa úm ü (j úI ﬁÄ ° d ONLN döa üm µ )f the  ¿ ° d ONLN d†a ∂m
 )class information d  πÄ ° d ONLN d≥a
m )Toes not have the capability  F` ° d ONLN dŒamø )u, this method r  á  ° d ONLN d›aøm› )@eturns     @ ° d ONLN d‰aﬁm )NIL    @ ° d ONLN dÁamÚ ).    ° d ONLN dÈÄ úå∂ (â ú/const char * TClassInfo :: GetCapabiltity(long      ° d ONLN dÄ∂å√ (â∂cap        ° d ONLN dÄƒåÙ )) const;   ° d ONLN d$í úû Ã (õ ú
Parameter:    ° d ONLN d/§ ú∞ © *cap     ° d ONLN d3§ ¯∞ ˇ )\A  ∫† ° d ONLN d4§ ˇ∞- ) capability  £Ä ° d ONLN d?§,∞D )-, expr \‡ ° d ONLN dE§E∞Ö )essed as a four  ÿ` ° d ONLN dT§Ö∞€ )@-character constant. 
ˇˇˇˇˇˇˇˇ 4 Ü F ù H 4 Í F Ù H 4A FX H 4• Fº H 4  Fm H ˇ     d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~P-Class Reference 4⁄ <˙
      
         (‡ <8-8       	 )BClass  VÄ )	TProtocol      (Ô ~Draft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h ó ( e ~This r  ‹Ä ° d ONLN d  \ ó h& )"eturns a pointer to the capability û¿ ° d ONLN d ( \& h› )è+. The capability lookup is performed as if     ù@ ° d ONLN d S \ﬁ hÎ )∏cap     ` ° d ONLN d V \Ï hˇ ) wer Ö  ° d ONLN d Z \ˇ h )e  ° d ONLN d \ i ~ u[ ( r ~5a four character string. In general, this means that    [  ° d ONLN d ë i\ ui )ﬁcap     ›  ° d ONLN d î ii uÁ ) must consist of exactly four  ° d ONLN d ≤ v ~ Ç ˙ (  ~printing characters (such as  , 
 Courier   ∞Ä ° d ONLN d œ v ˙ Ç )|fish   ∞Ä ° d ONLN d ” v Ç@ )), since thr ç¿ ° d ONLN d ﬂ v@ Ç˛ ).,ee-byte values and less will have a leading  ° d ONLN d É ~ è ∆ ( å ~null, which won ôÄ ° d ONLN d É ∆ è Ã )H’t £  ° d ONLN d É Ã è ) match anything. ° d ONLN d- ï ~ ° ó ( û ~If the  ¿ ° d ONLN d4 ï ò ° Ï )class information h  o  ° d ONLN dG ï Ï °$ )Tas the speciﬁ  ˜† ° d ONLN dU ï$ °\ )8ed capability  ≈‡ ° d ONLN db ï\ °ˇ )8), a pointer to the capability's value is   ° d ONLN dã ¢ ~ Æ Å ( ´ ~r E  ° d ONLN då ¢ Ç Æq )8eturned. If the capability does not have a value, a non-   C¿ ° d ONLN dƒ ¢r ÆÑ )NIL    Â` ° d ONLN d« ¢É Æ ) pointer to an empty string is   ° d ONLN dÊ Ø ~ ª Å ( ∏ ~r E  ° d ONLN dÁ Ø Ç ª √ )eturned. If the  ë@ ° d ONLN d˜ Ø √ ª )Aclass information d  ;  ° d ONLN d
 Ø ªç )Uoes not have the capability  «‡ ° d ONLN d% Øå ªÃ )t, this method r  † ° d ONLN d4 ØÕ ªÎ )Aeturns     ú¿ ° d ONLN d; ØÎ ª˝ )NIL    ú¿ ° d ONLN d> Ø˝ ªˇ ).   
 ¬ < ›
 4 √ < ›
  
 Ì < ı
 4 Ó < ı
 p  Ô < Ô Ô < Ô  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dA ⁄ < Ì Ä ( Ë <	Class TPr ≥" ° d ONLN dJ ⁄ Ä Ì ´ )Dotocol   V˛ ( Ë8    
         ° d ONLN dR ˛ ~
 ® ( ~
The class     ` ° d ONLN d\ ˛ ©
 ﬂ )+	TProtocol    ` ° d ONLN de ˛ ﬂ
E )6 is the base class for all   ~¿ ° d ONLN dÄ ˛E
n )f
p-classes. .  ° d ONLN dä ˛o
Ñ )* It pr ñ  ° d ONLN dê ˛Ñ
£ )ovides   <Ä ° d ONLN dó ˛§
´ ) a  ºÄ ° d ONLN dô ˛´
Õ )method ˇ  ° d ONLN dü ˛Õ
“ )" f ”  ° d ONLN d° ˛”
ﬁ )or   ° d ONLN d§ ~ Æ ( ~obtaining t ÑÄ ° d ONLN dØ Æ ª )0he   üÄ ° d ONLN d≤ ª € )p-class’ è` ° d ONLN d∫ ‹ )!s class info "  ° d ONLN d∆/ )0rmation  Z` ° d ONLN dÕ/1 )#.    ° d ONLN dœ" ~. ÿ (+ ~class TProtocol ° d ONLN dﬂ0 ~< Ñ *{  ° d ONLN d·> ~J ® *public:  ° d ONLN dÍL êX  +TClassInfo * ClassInfo()  ° d ONLN dL X& )ê;  ° d ONLN dZ ~f Ñ (c ~} ° d ONLN dZ Ñf ä );   
å <ì
 4ç <ì
 p é ~é
é ~é
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d} ~å ∑ (à ~	ClassInfo   €r (à8      
         ° d ONLN dì ~üb (ú ~&TClassInfo * TProtocol :: ClassInfo();    ° d ONLN d9• ~± ¶ *	Returns t  Ä ° d ONLN dB• ß± ¥ ))he   Ä ° d ONLN dE• ¥± )class information f  ` ° d ONLN dX•±" )Ror the   F‡ ° d ONLN d_•"±V )p-class (see   ì† ° d ONLN dl•V±— )4“Class TClassInfo” on page   B  ° d ONLN dá•“±ﬂ )|8-5  ñ  ° d ONLN dä•ﬂ±‰ )).  
∏ <”
 4π <”
  
„ <Î
 4‰ <Î
 p Â <ÂÂ <Â  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dé– <„ K (ﬁ <M =" ° d ONLN dè– L„ ¢ )iscellaneous   V˛ (ﬁ8    
         ° d ONLN dùÙ ~  æ (˝ ~The following   Î@ ° d ONLN d´Ù æ  ¡ )@f  ?  ° d ONLN d¨Ù ¬  Û )unctions ar  {Ä ° d ONLN d∑Ù Û  )1e declar »  ° d ONLN døÙ 6 )"ed in th {  ° d ONLN d«Ù7 D )"e ﬁ  —` ° d ONLN dÀÙD T )le P   ° d ONLN dœÙU X )r  “  ° d ONLN d–ÙX Ç )
otocols.h.  
% <,
 4& <,
 p ' ~'
' ~'
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d€ ~% Œ (! ~	NewByName   €r (!8      
         ° d ONLN dÊ, ~8 (5 ~TProtocol * NewByName(  ° d ONLN d,8\ )êconst char *       ° d ONLN d,\8~ )N	interface       Ä ° d ONLN d,8ã )#,  ° d ONLN d%9E\ (Bconst char *      ° d ONLN d29\Eõ )Nimplementation      “  ° d ONLN d@9õEß )?);   ° d ONLN dCK ~W ≤ (T ~Parameters:   ° d ONLN dO] ~i † *	interface     ° d ONLN dY] ⁄i · )\A  ∫† ° d ONLN dZ] ·i+ ) string naming a   c¿ ° d ONLN dk],iO )K	p-class i  Ù¿ ° d ONLN dt]Oit )#	nterface.    ° d ONLN d~o ~{ Ω (x ~implementation     ° d ONLN dço ⁄{ · )\A  ∫† ° d ONLN déo ·{+ ) string naming a   c¿ ° d ONLN düo,{O )K	p-class i  Ù¿ ° d ONLN d®oO{ï )#mplementation. ° d ONLN d∑Å ~ç â (ä ~At  â† ° d ONLN dπÅ âç ª )tempts to ﬁ  Ø¿ ° d ONLN d≈Å ªç Ÿ )2nd the   z@ ° d ONLN dÃÅ ⁄ç ˝ )	p-class i  @ ° d ONLN d’Å ˛çD )$mplementation  6` ° d ONLN d„ÅDçn )F
with the i O@ ° d ONLN dÌÅnç )*nterface and implementation  ° d ONLN d	é ~ö É (ó ~n Q` ° d ONLN d
é Ñö € )amed in the strings. ô¿ ° d ONLN dé €ö › )W   ¿ ° d ONLN dé ﬁö )
The value    4‡ ° d ONLN d)éö ).N  4‡ ° d ONLN d*éö )IL   ÷Ä ° d ONLN d,éöT ) is a wild car t† ° d ONLN d:éUöõ )8d. (Passing two    ø† ° d ONLN dJéõö≠ )FNIL    ø† ° d ONLN dMé≠ö€ )
s has unpr ™† ° d ONLN dWé€ö ).
edictable  ° d ONLN daõ ~ß Å (§ ~r E  ° d ONLN dbõ Çß £ )	esults).   ∞  ° d ONLN dkõ £ßﬂ )!FAn instance of the implementation with the highest version number is r ÑÄ ° d ONLN d±õﬂß (§ﬂ	eturned.  ° d ONLN d∫® ~¥ ô (± ~If ther T¿ ° d ONLN d¡® ô¥/ )!e is no matching implementation,     ø  ° d ONLN d‚®/¥A )ñNIL    `† ° d ONLN dÂ®A¥Q ) is r  K  ° d ONLN dÍ®Q¥s )eturned  Ä ° d ONLN dÒ®t¥v )#.  
ˇˇˇˇˇˇˇˇ 4 Ö ( ° * 4 ± ( ª * 4  ( * 4N (f * 4ß (  * 4_ (ö * 4™ (¥ * ˇñ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úP-Class Reference 4⁄ ú˙(         (‡ úMiscellaneous      
 ,  (‡8-9     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ” ( e úThe instance     ° d ONLN d  \ ‘ h € )8’s ` ° d ONLN d  \ € h › )   , 
 Courier   Ñ` ° d ONLN d  \ › h )	New(void)    Ñ` ° d ONLN d  \ hw )6 method is called befor  Ú` ° d ONLN d / \w h√ )de the instance is r  »  ° d ONLN d B \√ hË )Leturned.   ° d ONLN d K { ú á  ( Ñ úTProtocol * NewByName(  ° d ONLN d i {, áz )êconst char *       ° d ONLN d v {z áú )N	interface       Ä ° d ONLN d  {ù á£ )#,  ° d ONLN d â à, îz ( ë,const char *      ° d ONLN d ñ àz îπ )Nimplementation      “  ° d ONLN d § àπ îø )?,  ° d ONLN d Æ ï, °P ( û,ULong       ° d ONLN d ¥ ïP °m )$version       ÒÄ ° d ONLN d º ïm °s )   ÒÄ ° d ONLN d æ ïs ° ));   ° d ONLN d ¡ ß ú ≥ ± ( ∞ úThis  Ä ° d ONLN d ∆ ß ≤ ≥ Ÿ )method i ¬Ä ° d ONLN d Œ ß Ÿ ≥B )'s the same as the above    >‡ ° d ONLN d Ê ßC ≥y )j	NewByName    >‡ ° d ONLN d Ô ßy ≥Æ )6, except that  Ö† ° d ONLN d ¸ ßÆ ≥∞ )5     † ° d ONLN d ˝ ß± ≥∂ )v  † ° d ONLN d ˛ ß∂ ≥Œ )ersion    w  ° d ONLN d ßŒ ≥Ï ) speciﬁ  e@ ° d ONLN d ßÌ ≥ )es an exact  ° d ONLN d ¥ ú ¿ ¬ ( Ω ú	p-class v Œ‡ ° d ONLN d! ¥ ¬ ¿ )&ersion to instantiate.   ° d ONLN d8 ” ú ﬂ  ( ‹ úTProtocol * NewByName(  ° d ONLN dV ”, ﬂz )êconst char *       ° d ONLN dc ”z ﬂú )N	interface       Ä ° d ONLN dl ”ù ﬂ£ )#,  ° d ONLN dv ‡, Ïz ( È,const char *      ° d ONLN dÉ ‡z Ïπ )Nimplementation      “  ° d ONLN dë ‡π Ïø )?,  ° d ONLN dõ Ì, ˘z ( ˆ,const char *      ° d ONLN d® Ìz ˘° )N
capability      Ω  ° d ONLN d¥ Ì° ˘≠ )');   ° d ONLN d∑ ˇ ú Á ( úThis method is si §‡ ° d ONLN d» ˇ Á" )Kmilar to the ﬁ ^@ ° d ONLN d◊ ˇ#0 )<rst    P@ ° d ONLN d€ ˇ1g )	NewByName    P@ ° d ONLN d‰ ˇgØ )6, except that the  t` ° d ONLN dˆ ˇØÿ )H	p-class m  Ò  ° d ONLN dˇ ˇÿ ))ust have the   ° d ONLN d ú ∏ ( úspeciﬁ  Ó  ° d ONLN d ∏  )ed capability  º` ° d ONLN d    )8. Th ÆÄ ° d ONLN d$3 )e capability |¿ ° d ONLN d04; )3’s Å  ° d ONLN d2;r ) value doesn I† ° d ONLN d>sÑ )8’t m ß@ ° d ONLN dBÑò )atter  *‡ ° d ONLN dGòö ).  ™‡ ° d ONLN dHöﬁ ) The instance cr `@ ° d ONLN dXﬂ" )Eeated is that of   ° d ONLN di ú%9 (" ú"the implementation with the speciﬁ  èÄ ° d ONLN då9% )ù-ed capability with the highest version number  è  ° d ONLN dπ% )À.   
J ZQ( 4K ZQ( p L úL(L úL(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dª; úJ	 (F úClassInfoByName   €r (F 8      
         ° d ONLN dÃQ ú]J (Z úTClassInfo * ClassInfoByName( ° d ONLN dÛQP]û )¥const char *       ° d ONLN d Qû]¿ )N	interface       Ä ° d ONLN d	Q¡]Õ )#,  ° d ONLN d^Pjû (gPconst char *      ° d ONLN d#^ûj› )Nimplementation      “  ° d ONLN d1^›jÈ )?,  ° d ONLN d>kPwt (tPULong       ° d ONLN dDktwë )$version       ÒÄ ° d ONLN dKkëw© ) = 0 ÒÄ ° d ONLN dRk©wµ ));   ° d ONLN dU} úâ — (Ü úReturns the   Ä ° d ONLN da} “â# )6class information f  ` ° d ONLN dt}$âï )Ror an implementation (or     ä` ° d ONLN dç}ïâß )qNIL    ä` ° d ONLN dê}ßâ ), if no match is found). If    ° d ONLN d¨ä úñ π (ì úversion    ÒÄ ° d ONLN d≥ä πñ „ )
 is nonzer Ω¿ ° d ONLN dΩä ‰ñ≈ )+3o, only the implementation with that exact version   ˇ` ° d ONLN dä≈ñÍ )·number   o¿ ° d ONLN d˜äÎñ¯ )&is r ⁄  ° d ONLN d˚ä¯ñ )	eturned.   ° d ONLN dó ú£ • († úIf    ≤` ° d ONLN dó •£ ¬ )	version     #‡ ° d ONLN dó √£ ‹ ) is zer  ◊‡ ° d ONLN dó ‹£™ ).o, the implementation with the highest version †¿ ° d ONLN dCó´£≠ )œ    ¿ ° d ONLN dDóÆ£÷ )number i yÄ ° d ONLN dLó÷£‡ )(s r  ˚Ä ° d ONLN dOó‡£ )
eturned.  
» Zœ( 4… Zœ( p   ú (  ú (  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dXπ ú»" (ƒ úAllocInstanceByName   €r (ƒ 8      
         ° d ONLN dmœ ú€V (ÿ úTProtocol * AllocInstanceByName ° d ONLN déœV€\ )∫(  ° d ONLN dòœb€∞ )const char *       ° d ONLN d•œ∞€“ )N	interface       Ä ° d ONLN dÆœ”€ﬂ )#,  ° d ONLN dº‹bË∞ (Âbconst char *      ° d ONLN d…‹∞ËÔ )Nimplementation      “  ° d ONLN dÿ‹ÔË˚ )?);   ° d ONLN d€Ó ú˙ ˛ (˜ úThis is similar to the ﬁ  õ† ° d ONLN dÙÓ ˛˙ )brst    ç† ° d ONLN d¯Ó˙B )	NewByName    ç† ° d ONLN dÓB˙f )6 method  P@ ° d ONLN dÓg˙i )%,  –@ ° d ONLN d	Ói˙“ ) except that the instance  ∏¿ ° d ONLN d"Ó”˙⁄ )j’s Ω  ° d ONLN d$Ó⁄˙‹ )     =  ° d ONLN d%Ó›˙ )	New(void)    =  ° d ONLN d.Ó˙ )6   ° d ONLN d/˚ ú ¯ ( úmethod is not called.  
, Z3( 4- Z3( p . ú.(. ú.(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dE ú, Ï *$FreeInstance   €r (( 8      
         ° d ONLN dS3 ú?P (< úvoid FreeInstance(TProtocol*);    ° d ONLN drE úQ • *Fr ‘  ° d ONLN dtE •Q ¸ )	ees an instance of a   Ä ° d ONLN dâE ˝Q )Xp-class. ¨  ° d ONLN dëEQW )  The instance  ¨@ ° d ONLN dûEWQ^ ):’s ∞Ä ° d ONLN d†E^Q` )     0Ä ° d ONLN d°EaQ£ )Delete(void    0Ä ° d ONLN d¨E£Q& )B ) method is not called. This is  ° d ONLN dÃR ú^ ([ úa fairly low-level operation  ^‡ ° d ONLN dËR^ )x.  1@ ° d ONLN dÍR^ )Y  Ò¿ ° d ONLN dÎR^P )
ou shouldn N‡ ° d ONLN dıRQ^W )3’t XÄ ° d ONLN d˜RW^û ) have to use this  òÄ ° d ONLN dRû^” )G method. Us  _` ° d ONLN dR‘^€ )6e    ©  ° d ONLN dR€^ˇ )Delete   ©  ° d ONLN dRˇ^ )$   ° d ONLN d_ úk Á (h úmethods instead.  
ˇˇˇˇˇˇˇˇ 4 ^ F z H 4 © F “ H 4 F H 4 F£ H 4 F˙ H 4G F^ H ˇÆ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>8  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~P-Class Reference 4⁄ <˙
      
         (‡ <8-10        	 )BMiscellaneous      *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇ†    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino       	  3, .     Ã +ú#CHAPTER   ÿ  )h9  
         4⁄ ú˙( ,  	Helvetica              (‡ úMacros for  U– )-Throwing Exceptions       
 ,  (‡9-1     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w+ ( p ú
Debug Macr  , ° d ONLN d 
 Z+ wD )èos   ä* )9     
         ° d ONLN d  ú' µ ($ úThe ﬁ »Ä ° d ONLN d  µ' Û )le DebugMacr I¿ ° d ONLN d ! Ù'y )?osExternal.h, which you can ﬁ  v‡ ° d ONLN d ?y'• )Önd in the    ° d ONLN d J( ú4 ¡ (1 úDDK_Pr  @ ° d ONLN d P( ¬4é )&,oducts:IncludesForDDKs:UtilityClasses folder ñ¿ ° d ONLN d |(ç4È )À, contains some macr ‡` ° d ONLN d ê(È4 )\os you can   ° d ONLN d õ5 úAo (> ú.use in debugging your code and in handling err    ° d ONLN d …5pAÄ )‘ors. ° d ONLN d ŒG úS µ (P úThe ﬁ »Ä ° d ONLN d ‘G µSp ),le is divided into two parts.  The parts deﬁ J` ° d ONLN dGqSæ )ºne the same macr &† ° d ONLN dGæS )Mos; you use the  , 
 Courier   ° d ONLN d!T ú` Ã (] úforDebug    ° d ONLN d)T Ã` ÿ )0 pr  «  ° d ONLN d,T ÿ` Í )e-pr ´¿ ° d ONLN d0T Í`õ )&ocessor switch to determine which macr Ä ° d ONLN dVTú`± )≤os ar    ° d ONLN d[T±`¸ )e used in your pr  v` ° d ONLN dlT¸` )Kogram. ,  Zapf Dingbats     ° d ONLN dsj úr † (p ún    
 ° d ONLN dug ®s )Normal Debugging Gear    ° d ONLN dägsO )n.  These macr  €¿ ° d ONLN dógOsd )9os ar  ”@ ° d ONLN dúgds≤ )e for when you ar  Ì  ° d ONLN d≠g≤s )Ne debugging your code.     ° d ONLN dƒ| úÑ † (Ç ún    
 ° d ONLN d∆y ®Ö )No Debugging Gear  a  ° d ONLN d◊yÖ: )Y.  These macr  ,¿ ° d ONLN d‰y;ÖP ):os ar  $@ ° d ONLN dÈyPÖû )e for when you ar  >  ° d ONLN d˙yûÖ´ )Ne ﬁ  î` ° d ONLN d˛y´Ö )nished debugging your  ° d ONLN dÖ ®ë% (é ®code.  In general, these macr ∑  ° d ONLN d1Ö%ë )}3os do nothing.  Thus, you do not have to actually r  RÄ ° d ONLN ddÖë$ )ﬂemove  ° d ONLN djë ®ù (ö ®your debugging macr b‡ ° d ONLN d}ëù )`os.  ° d ONLN dÅ¢ úÆ … (´ ú	When the    …¿ ° d ONLN dä¢ …Æ ˘ )-forDebug   …¿ ° d ONLN dí¢ ˘Æ )0 pr  ‡ ° d ONLN dï¢Æ )e-pr ıÄ ° d ONLN dô¢Æm )ocessor switch is pr Û‡ ° d ONLN d≠¢mÆ£ )Vesent, the pr  ¸` ° d ONLN d∫¢£Æµ )6e-pr ·  ° d ONLN dæ¢µÆ# )ocessor uses the Normal  ° d ONLN d÷Ø úª ¯ (∏ úDebugging Gear deﬁ  L@ ° d ONLN dÈØ ˘ª )]nitions.  
¬ Z›( 4√ Z›(  
Ì Zı( 4Ó Zı( p Ô ZÔ.Ô ZÔ.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dÛ⁄ ZÌ  (Ë ZMacr  ≠X ° d ONLN d˜⁄ Ì ≈ )%
os for Thr •< ° d ONLN d⁄ ≈ÌE )Fowing Exceptions   V˛ (Ë 9    
         ° d ONLN d˛ ú
 ∞ ( úTher   ¿ ° d ONLN d˛ ±
 ¡ )e ar ` ° d ONLN d˛ ¡
 Ú )
e two macr Ò  ° d ONLN d%˛ Ò
 )0os that  ar  >¿ ° d ONLN d0˛
L ),e not contr  P  ° d ONLN d;˛L
Ç )/olled by the     Ô‡ ° d ONLN dH˛Ç
≤ )6forDebug   Ô‡ ° d ONLN dP˛≤
 )0 switch and can be used  ° d ONLN dh ú  ( úby your code to thr ‡ ° d ONLN d{ l )Tow exceptions conditionally  @ ° d ONLN dñln )|.   
< ZC( 4= ZC( p > ú>(> ú>(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dò- ú< ‹ (8 úTHROWIF   €r (8 9      
         ° d ONLN d°C úO Ã (L úTHROWIF(      ° d ONLN d©C ÃO „ )0result      ’  ° d ONLN dØC „O Ô ),      ’  ° d ONLN d±C ÔO )	exception       »¿ ° d ONLN d∫CO )&)    ° d ONLN dºU úa € (^ úIf the value of     8Ä ° d ONLN dÃU ‹a Û )@result    ç† ° d ONLN d“U ÛaC ) is not 0, this macr ~† ° d ONLN dÊUCaq )Po calls the    œÄ ° d ONLN dÚUqaè ).Throw    œÄ ° d ONLN d˜Uèa& )% function.   Thus, you can use it to   ° d ONLN db ún Ô (k útest whether an err †  ° d ONLN d/b Ôn* )Sor code was r  ¨@ ° d ONLN d<b*n∑ );eturned by some other function.       	 ° d ONLN d\á úí » (è úListing 9-1    ° d ONLN dhá ‡í Ú )DThe    Å  ° d ONLN dlá Úí )THROWIF    Å  ° d ONLN dtáí5 )( Macro    
 ° d ONLN d{ö ú¶h (£ ú"#define THROWIF(result, exception)  ° d ONLN dü® Æ¥ ¿ +do   
 ^  Ç Z 4 ` & } U      	 ( f &
Figure 9-0  *	T     )able 9-0 ( x &Listing 9-0  
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4 ^ F¥ H ˇ˙    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Debug Macros  4⁄ <˙
      
         (‡ <9-2       	 )BMacros for Branching     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ ê h ( e ê{ if ((result) != 0)  ° d ONLN d  j ¢ ví +(Throw((exception), (void*) (result)); }   ° d ONLN d B x ê Ñ ∆ ( Å ê	while (0)  
 ™ < ±
 4 ´ < ±
 p  ¨ ~ ¨
 ¨ ~ ¨
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d L õ ~ ™ « ( ¶ ~THROWNIL    €r ( ¶9      
         ° d ONLN d V ± ~ Ω ¥ ( ∫ ~	THROWNIL(     ° d ONLN d _ ± ¥ Ω ≈ )6expr      G@ ° d ONLN d c ± ∆ Ω “ ),      G@ ° d ONLN d e ± “ Ω ˜ )	exception       :‡ ° d ONLN d n ± ¯ Ω )&,      :‡ ° d ONLN d p ± Ω )result      ê  ° d ONLN d v ± Ω' ))    ° d ONLN d y √ ~ œ á ( Ã ~If    ≤` ° d ONLN d | √ á œ ò )	expr    y† ° d ONLN d Ä √ ô œ ) is equal to 0,  This macr …‡ ° d ONLN d ö √ œ6 )jo  this macr ¿ ° d ONLN d ¶ √7 œe )4o calls the    R† ° d ONLN d ≤ √e œÉ ).Throw    R† ° d ONLN d ∑ √É œ‹ ) function, passing it    –† ° d ONLN d Õ √‹ œ )Y	exception     ƒ@ ° d ONLN d ÷ √ œ )&   ° d ONLN d ◊ – ~ ‹ ë ( Ÿ ~and     Ì  ° d ONLN d € – ë ‹ ® )result    B@ ° d ONLN d · – © ‹ ∞ ).         	 ° d ONLN d Â ı ~  ™ ( ˝ ~Listing 9-2    ° d ONLN d Ò ı ¬  ‘ )DThe    Å  ° d ONLN d ı ı ‘  ¸ )THROWIF    Å  ° d ONLN d ˝ ı ¸  )( macro    
 ° d ONLN d ~Ä ( ~+#define THROWNIL(expr, exception, result) \ ° d ONLN d1 ê" ® +do \  ° d ONLN d7$ ê0 * { if ((expr) == 0) \  ° d ONLN dO2 ¢>ò +)Throw((exception), (void*) (result)); } \ ° d ONLN dz@ êL ∆ (I ê	while (0)  
Y <t
 4Z <t
  
Ñ <å
 4Ö <å
 p Ü <ÜÜ <Ü  
ˇ·ˇ‚7Ç     ˇˇ© ˇÆ ° d ONLN dÖq <Ñ a ( <Macr  ≠X ° d ONLN dâq aÑ ◊ )%os for Branching   V˛ (9    
         ° d ONLN dõï ~° ∞ (û ~
These macr  À† ° d ONLN d•ï ∞°£ )2:os test a value.  If the value meets a condition, the macr R  ° d ONLN dﬂï§°ˆ )Ùos cause a branch,   ° d ONLN dÚ¢ ~Æ˝ (´ ~Spossibly taking some other action in addition.  When you use the “Normal Debugging  ° d ONLN dEØ ~ª ± *
Gear” macr f† ° d ONLN dOØ ±ª¶ )37os, these also invoke the debugger and print a message.   
‡ <Á
 4· <Á
 p ‚ ~‚
‚ ~‚
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dá— ~‡ ≈ (‹ ~XREQUIRE    €r (‹9      
         ° d ONLN dëÁ ~Û ¥ ( ~	XREQUIRE(     ° d ONLN döÁ ¥Û ≈ )6expr      G@ ° d ONLN dûÁ ∆Û “ ),      G@ ° d ONLN d†Á “Û ‰ )label        † ° d ONLN d•Á ‰Û  ))    ° d ONLN d®˘ ~ ë ( ~The     ª¿ ° d ONLN d¨˘ ë ¡ )XREQUIRE   ª¿ ° d ONLN d¥˘ ¡ Ÿ )0 macr  E  ° d ONLN dπ˘ ⁄W )o examines the value of its ﬁ  ª¿ ° d ONLN d◊˘Wm )}rst ar r¿ ° d ONLN d›˘nï )gument,    ∫` ° d ONLN dÂ˘ï¶ )'expr    ƒ@ ° d ONLN dÈ˘¶Ô ).  If that value is  ° d ONLN d˝ ~ § ( ~	equal to    ä  ° d ONLN d § ™ )&0    ä  ° d ONLN d ™ Ø ),    ä  ° d ONLN d	 Ø ﬂ )XREQUIRE   ä  ° d ONLN d ﬂ · )0   ,  Zapf Dingbats     ° d ONLN d ~$ Ç (" ~n    
 ° d ONLN d ä% º )halts the pr ]† ° d ONLN d! º% ÿ )2ogram      ° d ONLN d'. ~6 Ç (4 ~n    
 ° d ONLN d)+ ä7 )prints a message to standar  † ° d ONLN dD+7 )yd err  $† ° d ONLN dI+7! )or     ° d ONLN dL@ ~H Ç (F ~n    
 ° d ONLN dN= äI œ )branches to the    )  ° d ONLN d^= –I ‚ )Flabel     ¨Ä ° d ONLN dc= ‚IP ) supplied as its second ar n@ ° d ONLN d}=QIx )ogument.  ° d ONLN dÜN ~Z º (W ~Even if you ar  j  ° d ONLN dîN ºZk )>$e using the “No Debugging Gear” macr E¿ ° d ONLN d∏NkZ¢ )Øos, this macr  ∫† ° d ONLN d≈N¢Z )7o branches, though it  ° d ONLN d€[ ~g ” (d ~does not halt the pr  A¿ ° d ONLN dÔ[ ‘gN )Vogram and print a message. ° d ONLN d
m ~y ¥ (v ~For example   ° d ONLN dÑ êê& +fVars = new TToolMembers; ° d ONLN d2í êût *&XREQUIRE(fVars, Fail_NewTToolMembers); ° d ONLN dZ† ê¨> *fVars->fExampleToolState = 0;  ° d ONLN dyÆ ê∫ ¢ *...  
ˇˇˇˇˇˇˇˇ 4 ^ (∫ * ˇ,    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDebug Macros  4⁄ ú˙(         (‡ úMacros for Branching       
 ,  (‡9-3     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( , 
 Courier       
 ° d ONLN d   \ Æ h, ( e ÆFail_NewTToolMembers: ° d ONLN d  j Æ v ¿ *...    ° d ONLN d  Ç ú é ı ( ã úIn this example, the    ¿¿ ° d ONLN d 0 Ç ı é% )YXREQUIRE   ¿¿ ° d ONLN d 8 Ç% é= )0 macr  J  ° d ONLN d = Ç> é∏ )o examines the value of the    )† ° d ONLN d Y Çπ é◊ ){fVars    )† ° d ONLN d ^ Ç◊ é ) variable. If    ° d ONLN d l è ú õ ∫ ( ò úfVars   ° d ONLN d q è ∫ õ ∆ ) is    •` ° d ONLN d u è ∆ õ Ã )0    •` ° d ONLN d v è Ã õå )- (which means that allocation of the object r  ±¿ ° d ONLN d £ èå õú )¿efer ]‡ ° d ONLN d ß èù õ« )	enced by     e@ ° d ONLN d ∞ è« õÂ )*fVars    e@ ° d ONLN d µ èÂ õ )
 failed),  ° d ONLN d ø ú ú ® ≤ ( • úcontr >Ä ° d ONLN d ƒ ú ≥ ® )ol branches to the label     gÄ ° d ONLN d › ú ®ì )hFail_NewTToolMembers   gÄ ° d ONLN d Ò úì ®° )x. If     ô‡ ° d ONLN d ˆ ú° ®ø )fVars    ô‡ ° d ONLN d ˚ úø ® ) is any value other  ° d ONLN d © ú µ ≤ ( ≤ úthan    Â  ° d ONLN d © ≤ µ ∏ )0    Â  ° d ONLN d © ∏ µ ” ), contr  £† ° d ONLN d © ‘ µ» ):ol passes onto the  next statement, which initializes the    ° d ONLN dV ∂ ú ¬ ( ø úfExampleToolState   ° d ONLN dg ∂ ¬ )f f $` ° d ONLN di ∂ ¬S )ield of the object.       	 ° d ONLN d} € ú Ê » ( „ úListing 9-3    ° d ONLN dâ € ‡ Ê Ú )DThe    Å  ° d ONLN dç € Ú Ê )XREQUIRE   Å  ° d ONLN dï € Ê5 )( Macro    
 ° d ONLN dú Ó ú ˙V ( ˜ ú#define XREQUIRE(expr, label) \ ° d ONLN dæ ¸ ¿ ‰ +$do { \  ° d ONLN d»
 “2 +if (!(expr)) { \  ° d ONLN d› ‰$" +5DebugStr("XREQUIRE(" #expr ", " #label ") failed"); \ ° d ONLN d& ‰22 *goto label; \  ° d ONLN d,4 “@ ‰ (= “} \ ° d ONLN d2B ¿N (K ¿} while (0)  
t Z{( 4u Z{( p v úv(v úv(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d>e út (p úXREQUIRENOT   €r (p 9      
         ° d ONLN dK{ úá ‰ (Ñ úXREQUIRENOT(      ° d ONLN dW{ ‰á ı )Hexpr      G@ ° d ONLN d[{ ˆá ),      G@ ° d ONLN d]{á )label        † ° d ONLN db{á  ))    ° d ONLN deç úô Ø (ñ úThe     ª¿ ° d ONLN diç Øô Ò )XREQUIRENOT    ª¿ ° d ONLN dtç Òô	 )B macr  E  ° d ONLN dyç
ôá )o examines the value of its ﬁ  ª¿ ° d ONLN dóçáôù )}rst ar r¿ ° d ONLN dùçûô )gument. If that value is not   ° d ONLN d∫ö ú¶ ¬ (£ ú	equal to    ä  ° d ONLN d√ö ¬¶ » )&0    ä  ° d ONLN dƒö »¶ Õ ),    ä  ° d ONLN d∆ö Õ¶ )XREQUIRENOT    ä  ° d ONLN d—ö¶ )B   ,  Zapf Dingbats     ° d ONLN d”∞ ú∏ † (∂ ún    
 ° d ONLN d’≠ ®π ⁄ )halts the pr ]† ° d ONLN d·≠ ⁄π ˆ )2ogram      ° d ONLN dÁ¬ ú  † (» ún    
 ° d ONLN dÈø ®À  )prints a message to standar  † ° d ONLN dø!À6 )yd err  $† ° d ONLN d	ø6À? )or     ° d ONLN d‘ ú‹ † (⁄ ún    
 ° d ONLN d— ®› Ì )branches to the    )  ° d ONLN d— Ó›  )Flabel     ¨Ä ° d ONLN d#— ›n ) supplied as its second ar n@ ° d ONLN d=—o›ñ )ogument.  ° d ONLN dF‚ úÓ ⁄ (Î úEven if you ar  j  ° d ONLN dT‚ ⁄Óâ )>$e using the “No Debugging Gear” macr E¿ ° d ONLN dx‚âÓ¿ )Øos, this macr  ∫† ° d ONLN dÖ‚¿Ó )7o branches, though it  ° d ONLN dõÔ ú˚ Ò (¯ údoes not halt the pr  A¿ ° d ONLN dØÔ Ú˚l )Vogram and print a message. ° d ONLN d  ú Ø (
 úThe     ª¿ ° d ONLN dŒ Ø Ò )XREQUIRENOT    ª¿ ° d ONLN dŸ Ò	 )B macr  E  ° d ONLN dﬁ
H )o is similar to    TÄ ° d ONLN dÓHx )>XREQUIRE   TÄ ° d ONLN dˆxô )0	: the dif  ‹@ ° d ONLN dˇô• )!fer  æ¿ ° d ONLN d•ÿ )ence is that     è  ° d ONLN dŸ	 )4XREQUIRE   è  ° d ONLN d	 )0   ° d ONLN d ú ˜ ( úbranches when its ar  Ñ  ° d ONLN d, ˜@ )[gument is 0 and    ﬁ  ° d ONLN d<@Ç )IXREQUIRENOT    ﬁ  ° d ONLN dGÇﬂ )B branches when its ar  b  ° d ONLN d\‡ )^gument is not    ° d ONLN dj ú' ¢ ($ ú0   ° d ONLN dk ¢' › ). For example    ° d ONLN dz2 Æ>Œ +0XREQUIRENOT(result, Fail_StartCommToolProtocol);  ° d ONLN d¨@ ÆL ¿ *...  ° d ONLN d±N ÆZP *Fail_StartCommToolProtocol:  ° d ONLN dŒ\ Æh ¿ *...    ° d ONLN d“t úÄ ﬁ (} úThis use of the     L  ° d ONLN d‚t ﬂÄ! )CXREQUIRENOT    L  ° d ONLN dÌt!Ä9 )B macr  ’@ ° d ONLN dÚt9Ä≥ )o examines the value of the    ¥‡ ° d ONLN dt¥Äﬁ ){result     ¥‡ ° d ONLN dtﬁÄ )*variable. If     ° d ONLN d"Å úç ∆ (ä úresult    ° d ONLN d)Å ∆ç ‡ )*is not     .† ° d ONLN d0Å ·ç Á )0    .† ° d ONLN d1Å ÁçW ) (which means that an err  ©† ° d ONLN dJÅWç )p	or occurr  ¶Ä ° d ONLN dSÅç± )(ed in the pr j  ° d ONLN d_Å≤ç )3evious operation), contr ≥‡ ° d ONLN dwÅç% )iol   ° d ONLN dzé úö ˘ (ó úbranches to the label     À  ° d ONLN dêé ˘öï )]Fail_StartCommToolProtocol   À  ° d ONLN d™éïöŸ )ú. If the value of    É† ° d ONLN dºé⁄ö˛ )Eresult   É† ° d ONLN d¬é˛ö
 )$ is  ° d ONLN d∆õ úß ∆ (§ ú	anything    Ω  ° d ONLN dœõ ∆ß Ã )*0    Ω  ° d ONLN d–õ Ãß Á ), contr  {† ° d ONLN d◊õ Ëß~ )#ol passes onto the next statement.   ˚  ° d ONLN d˙õ~ß¨ )ñListing 9-4  õ` ° d ONLN dõ≠ßÔ )/ shows the deﬁ ¿ ° d ONLN dõß( )Cnition of the    ° d ONLN d"® ú¥ ﬁ (± úXREQUIRENOT   ° d ONLN d-® ﬁ¥ ˆ )B macr  	@ ° d ONLN d2® ˜¥ ˛ )o. 
ˇˇˇˇˇˇˇˇ 4 ^ F¥ H ˇ     d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Debug Macros  4⁄ <˙
      
         (‡ <9-4       	 )BMacros for Branching     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
  	 ° d ONLN d   \ ~ g ™ ( d ~Listing 9-4    ° d ONLN d  \ ¬ g ‘ )DThe  , 
 Courier   Å  ° d ONLN d  \ ‘ g )XREQUIRENOT    X ° d ONLN d  \ g& )7 Macro    
 ° d ONLN d " o ~ {J ( x ~"#define XREQUIRENOT(expr, label) \  ° d ONLN d G } ¢ â ∆ +$do { \  ° d ONLN d P ã ¢ ó ˆ * if (expr) { \ ° d ONLN d b ô ¥ • +8DebugStr("XREQUIRENOT(" #expr ", " #label ") failed"); \  ° d ONLN d ¢ ß ¥ ≥ *goto label; \  ° d ONLN d ≥ µ ¥ ¡ ∆ *} \  ° d ONLN d π √ ¢ œ ‰ ( Ã ¢} while (0)  
 ı < ¸
 4 ˆ < ¸
 p  ˜ ~ ˜
 ˜ ~ ˜
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d ≈ Ê ~ ı ( Ò ~XREQUIRE_ACTION   €r ( Ò9      
         ° d ONLN d ÷ ¸ ~ ﬁ ( ~XREQUIRE_ACTION(      ° d ONLN d Ê ¸ ﬁ Ô )`expr      G@ ° d ONLN d Í ¸  ¸ ),      G@ ° d ONLN d Ï ¸ ¸ )label        † ° d ONLN d Ò ¸ ),       † ° d ONLN d Û ¸2 )action      g@ ° d ONLN d ˘ ¸39 ))    ° d ONLN d ˚ ~ © ( ~	This macr  ¿ ° d ONLN d ™ „ ),o tests if its ﬁ ` ° d ONLN d ‰ ˙ ):rst ar ∆` ° d ONLN d ˙! )gument,      ° d ONLN d#"3 )(expr    ‡ ° d ONLN d'3ö ), is equal to 0.  If it is, it:  ,  Zapf Dingbats     ° d ONLN dG$ ~, Ç (* ~n    
 ° d ONLN dI! ä- Œ )halts execution      ° d ONLN dZ6 ~> Ç (< ~n    
 ° d ONLN d\3 ä? )prints a message to standar  † ° d ONLN dw3? )yd err  $† ° d ONLN d|3?! )or     ° d ONLN dH ~P Ç (N ~n    
 ° d ONLN dÅE äQ ø )invokes the    »† ° d ONLN dçE øQ ◊ )5action    e@ ° d ONLN dìE ÿQ ˆ ) speciﬁ  S` ° d ONLN dõE ˜Q )ed     ° d ONLN dûZ ~b Ç (` ~n    
 ° d ONLN d†W äc √ )jumps to the     @ ° d ONLN d≠W ƒc ÷ ):label     â† ° d ONLN d≤W ÷c Ù ) speciﬁ  w¿ ° d ONLN d∫W ıc ˇ )ed ° d ONLN dΩh ~t º (q ~Even if you ar  j  ° d ONLN dÀh ºtk )>$e using the “No Debugging Gear” macr E¿ ° d ONLN dÔhkt¢ )Øos, this macr  ∫† ° d ONLN d¸h¢tﬂ )7o invokes the    ¯¿ ° d ONLN d
hﬂt˜ )=action    ï` ° d ONLN dh¯t˙ )   ° d ONLN du ~Å? (~ ~,and branches, though it does not halt the pr  ^` ° d ONLN d=u?Åπ )¡ogram and print a message.      	 ° d ONLN dXö ~• ™ (¢ ~Listing 9-5    ° d ONLN ddö ¬• ‘ )DThe    Å  ° d ONLN dhö ‘• )XREQUIRE_ACTION    Å  ° d ONLN dwö•: )K Macro    
 ° d ONLN d~≠ ~πí (∂ ~.#define XREQUIRE_ACTION(expr, label, action) \  ° d ONLN d≠ª ~« ∫ *
    do { \ ° d ONLN d∏… ~’ ñ *     ° d ONLN dæ… ¢’ )$if (!(expr)) { \ ° d ONLN dœ◊ ~„ ú (‡ ~      ° d ONLN d◊◊ ¥„Ï )64DebugStr("XREQUIRE_ACTION(" #expr ", " #label ", "\  ° d ONLN dÂ ÍÒn +6#action ") failed"); \  ° d ONLN d)Û ~ˇ ¢ (¸ ~        ° d ONLN d2Û ¥ˇ ¸ )6{ action } \ ° d ONLN d? ~ ¢ (
 ~        ° d ONLN dH ¥ )6goto label; \  ° d ONLN dV ~ Æ ( ~     } \  ° d ONLN d_ ~) ÿ *    } while (0)   
O <V
 4P <V
 p Q ~Q
Q ~Q
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN do@ ~O *%XREQUIRENOT_ACTION   €r (K9      
         ° d ONLN dÉV ~b  (_ ~XREQUIRENOT_ACTION(     ° d ONLN dñV b )rexpr      G@ ° d ONLN döVb ),      G@ ° d ONLN dúVb  )label        † ° d ONLN d°V b, ),       † ° d ONLN d£V,bD )action      g@ ° d ONLN d©VEbK ))    ° d ONLN d´h ~t © (q ~	This macr  ¿ ° d ONLN d¥h ™t „ ),o tests if its ﬁ ` ° d ONLN d≈h ‰t ˙ ):rst ar ∆` ° d ONLN dÀh ˙t! )gument,      ° d ONLN d”h"t3 )(expr    ‡ ° d ONLN d◊h3tƒ )), is not equal to 0.  If it is not 0, it:      ° d ONLN d~ ~Ü Ç (Ñ ~n    
 ° d ONLN d{ äá Œ )halts execution      ° d ONLN dê ~ò Ç (ñ ~n    
 ° d ONLN dç äô )prints a message to standar  † ° d ONLN d1çô )yd err  $† ° d ONLN d6çô! )or     ° d ONLN d9¢ ~™ Ç (® ~n    
 ° d ONLN d;ü ä´ ø )invokes the    »† ° d ONLN dGü ø´ ◊ )5action    e@ ° d ONLN dMü ÿ´ ˆ ) speciﬁ  S` ° d ONLN dUü ˜´ )ed     ° d ONLN dX¥ ~º Ç (∫ ~n    
 ° d ONLN dZ± äΩ √ )jumps to the     @ ° d ONLN dg± ƒΩ ÷ ):label     â† ° d ONLN dl± ÷Ω Ù ) speciﬁ  w¿ ° d ONLN dt± ıΩ ˇ )ed 
ˇˇˇˇˇˇˇˇ 4 ^ (Ω * ˇƒ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDebug Macros  4⁄ ú˙(         (‡ úOther Macros       
 ,  (‡9-5     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(       
 ° d ONLN d   \ ú h ⁄ ( e úEven if you ar  j  ° d ONLN d  \ ⁄ hâ )>$e using the “No Debugging Gear” macr E¿ ° d ONLN d 2 \â h¿ )Øos, this macr  ∫† ° d ONLN d ? \¿ h˝ )7o invokes the    ¯¿ ° d ONLN d M \˝ h )=action    ï` ° d ONLN d S \ h )   ° d ONLN d T i ú u] ( r ú,and branches, though it does not halt the pr  ^` ° d ONLN d Ä i] u◊ )¡ogram and print a message.      	 ° d ONLN d õ é ú ô » ( ñ úListing 9-6    ° d ONLN d ß é ‡ ô Ú )DThe  , 
 Courier   Å  ° d ONLN d ´ é Ú ô= )XREQUIR_EACTION    Å  ° d ONLN d ∫ é= ôX )K Macro    
 ° d ONLN d ¡ ° ú ≠Ê ( ™ ú7#define XREQUIRENOT_ACTION(expr, label, action)  do { \ ° d ONLN d ˙ Ø Æ ª ¸ +if (expr) { \ ° d ONLN d Ω ú …
 ( ∆ ú=      DebugStr("XREQUIRENOT_ACTION(" #expr ", " #label ", " \ ° d ONLN dK À ˆ ◊z +Z#action ") failed"); \  ° d ONLN dd Ÿ ¿ Â ( ‚ ¿{ action } \  ° d ONLN ds Á ¿ Û *goto label; \  ° d ONLN dÇ ı Æ ¿ ( ˛ Æ} \ ° d ONLN dÜ ú ˆ ( ú    } while (0)  
 Z7( 4 Z7(  
G ZO( 4H ZO( p I ZI.I ZI.  
ˇ·ˇ‚7Ç     ˇˇ© ˇÆ ° d ONLN dó4 ZG ≠ (B Z
Other Macr  å‰ ° d ONLN d°4 ≠G º )Sos   V˛ (B 9    
         ° d ONLN d•X úd Œ (a ú
These macr  À† ° d ONLN dØX Œd )2Gos take no action when you use the “No Debugging Gear” versions.  When   ° d ONLN dˆe úqb (n ú(you use the “Normal Debugging Gear” macr  Õ† ° d ONLN debq¥ )∆os, they halt the pr @ ° d ONLN d2eµq )Sogram, invoke the  ° d ONLN dDr ú~ ∆ ({ údebugger  @ ° d ONLN dLr ∆~# )*, and print messages.   
£ Z™( 4§ Z™( p • ú•(• ú•(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dbî ú£ ” (ü úXASSER  5 ° d ONLN dhî ‘£ ‹ )8T    €r (ü 9      
         ° d ONLN dk™ ú∂ Ã (≥ úXASSERT(      ° d ONLN ds™ Ã∂ › )0expr      G@ ° d ONLN dw™ ﬁ∂ ‰ ))    ° d ONLN dyº ú» « (≈ ú	This macr  ¿ ° d ONLN dÇº »»æ ),6o invokes the debugger and prints a message to standar "@ ° d ONLN d∏ºæ»” )ˆd err  ?@ ° d ONLN dΩº”»Á )or if    „† ° d ONLN d√ºÁ»¯ )expr    ™‡ ° d ONLN d«º˘»$ ) is 0.  The  ° d ONLN d”… ú’ Õ (“ úmessage is:   ° d ONLN dﬂ‡ úÏ Ã *XASSERT      ° d ONLN dÁ‡ ÃÏ › )0expr      G@ ° d ONLN dÎ‡ ﬁÏ ) failed       	 ° d ONLN dÛ ú » ( úListing 9-7    ° d ONLN dˇ ‡ Ú )DThe    Å  ° d ONLN d Ú )XASSERT    Å  ° d ONLN d5 )( Macro    
 ° d ONLN d ú%& (" ú#define XASSERT(expr) \ ° d ONLN d+' Æ3  +do { if (!(expr)) \ ° d ONLN dB5 “AŒ +$*DebugStr("XASSERT(" #expr ") failed"); } \  ° d ONLN dnC ÆO ‰ (L Æ	while (0)  
u Z|( 4v Z|( p w úw(w úw(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dxf úu ” (q úXASSER  5 ° d ONLN d~f ‘u ˘ )8TNOT   €r (q 9      
         ° d ONLN dÑ| úà ﬁ (Ö úXASSERTNOT(     ° d ONLN dè| ﬁà Ô )Bexpr      G@ ° d ONLN dì| à ))      ° d ONLN dóé úö « (ó ú	This macr  ¿ ° d ONLN d†é »öH ),o prints a message to standar  ù‡ ° d ONLN dΩéHö] )Äd err  ∫‡ ° d ONLN d¬é]öq )or if    _@ ° d ONLN d»éröÉ )expr    &Ä ° d ONLN dÃéÑö )$ is not equal to 0.  The message is: 
ˇˇˇˇˇˇˇˇ 4 ^ Fö H ˇ¥    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Debug Macros  4⁄ <˙
      
         (‡ <9-6       	 )BOther Macros     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 , 
 Courier       
 ° d ONLN d   \ ~ h ¿ ( e ~XASSERTNOT      ° d ONLN d  \ ¿ h — )Bexpr      G@ ° d ONLN d  \ “ h ¸ ) failed       	 ° d ONLN d  Ç ~ ç ™ ( ä ~Listing 9-8    ° d ONLN d # Ç ¬ ç ‘ )DThe    Å  ° d ONLN d ' Ç ‘ ç )XASSERTNOT     Å  ° d ONLN d 2 Ç ç& )7 Macro    
 ° d ONLN d 9 ï ~ °  ( û ~#define XASSERTNOT(expr)  \ ° d ONLN d V £ ê Ø  +do { if (expr) \  ° d ONLN d j ± ¥ Ω¬ +$-DebugStr("XASSERTNOT(" #expr ") failed"); } \ ° d ONLN d ô ø ê À ∆ ( » ê	while (0)  
 Ò < ¯
 4 Ú < ¯
 p  Û ~ Û
 Û ~ Û
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d £ ‚ ~ Ò ÷ ( Ì ~	XDEBUGGER   €r ( Ì9      
         ° d ONLN d Æ ¯ ~ ∫ ( ~
XDEBUGGER(      ° d ONLN d ∏ ¯ ∫ Œ )<mesg      Ä ° d ONLN d º ¯ œ ’ ))    ° d ONLN d æ
 ~ © ( ~	This macr  ¿ ° d ONLN d «
 ™† ),6o invokes the debugger and prints a message to standar "@ ° d ONLN d ˝
†µ )ˆd err  ?@ ° d ONLN d
µæ )or Í  ° d ONLN d
Ωø ).       	 ° d ONLN d/ ~: ™ (7 ~Listing 9-9    ° d ONLN d/ ¬: ‘ )DThe    Å  ° d ONLN d/ ‘: )
XDEBUGGER    Å  ° d ONLN d /:! )2 Macro    
 ° d ONLN d'B ~Nb (K ~&#define XDEBUGGER(mesg) DebugStr(mesg)   
t <{
 4u <{
 p v ~v
v ~v
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dNe ~t ∞ *%XPRINT   €r (p9      
         ° d ONLN dV{ ~á ® (Ñ ~XPRINT(     ° d ONLN d]{ ®á π )*args      ∑Ä ° d ONLN da{ πá ø ))    ° d ONLN dcç ~ô © (ñ ~	This macr  ¿ ° d ONLN dlç ™ô Œ ),	o prints     ƒ  ° d ONLN duç Œô ﬂ )$args    ˚† ° d ONLN dyç ﬂô ) to standar  Â  ° d ONLN dÑçô' )/d out. ° d ONLN dãü ~´ ¢ (® ~The deﬁ ≠‡ ° d ONLN dìü ¢´ Í )$nition shown in  ø@ ° d ONLN d£ü Í´ )HListing 9-10 _Ä ° d ONLN dØü´6 )4 uses    ™@ ° d ONLN dµü6´x )XBLOCKPRINT    Ï‡ ° d ONLN d¿üw´Î )A, which is an internal macr  ±` ° d ONLN d€üÏ´¯ )uo.   ° d ONLN dﬂ¨ ~∏ ¢ (µ ~The deﬁ ≠‡ ° d ONLN dÁ¨ ¢∏ … )$
nition of    ¢† ° d ONLN dÒ¨  ∏ )(XBLOCKPRINT    ¢† ° d ONLN d¸¨∏C )B is shown in   .  ° d ONLN d	¨D∏r )8Listing 9-1  A† ° d ONLN d¨r∏w ).1  A† ° d ONLN d¨w∏y ).       	 ° d ONLN d— ~‹ Ø (Ÿ ~Listing 9-10     ° d ONLN d$— ¬‹ ‘ )DThe    Å  ° d ONLN d(— ‘‹ ˜ )XPRINT     Å  ° d ONLN d/— ˜‹ )# Macro    
 ° d ONLN d6‰ ~¬ (Ì ~6#define XPRINT(args)    do XBLOCKPRINT(args) while (0)       	 ° d ONLN dm
 ~ Ø *%Listing 9-11    ° d ONLN dz
 ¬ ‘ )DThe     
 Å  ° d ONLN d~	 ‘ )XBLOCKPRINT   	 Å  ° d ONLN dâ
 )B     Å  ° d ONLN dä
6 ) Macro    
 ° d ONLN dë ~)z (& ~*#define XBLOCKPRINT(args) { printf args; }   
O <V
 4P <V
 p Q ~Q
Q ~Q
  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN dº@ ~O Â *%XSETPTRNAME    €r (K9      
         ° d ONLN d…V ~b ∆ (_ ~XSETPTRNAME(      ° d ONLN d’V ∆b À )Hp       ° d ONLN d÷V Àb — ),      ° d ONLN d◊V —b ÷ )n         ° d ONLN dÿV ◊b › ))    ° d ONLN d⁄h ~t © (q ~	This macr  ¿ ° d ONLN d„h ™t ),o sets the tag of pointer    ƒÄ ° d ONLN d˝ht )ip     ƒÄ ° d ONLN d˛htg ) to the long value     ˜Ä ° d ONLN dhgtl )On     Ü† ° d ONLN dhmtt ).    Ÿ  ° d ONLN dhttz )Y  ôÄ ° d ONLN dhztÙ )ou can use this for tracking   ° d ONLN d3u ~Å ‡ (~ ~down memory leaks.    s  ° d ONLN dGu ‡Å Ê )bY  3Ä ° d ONLN dHu ÊÅg )ou can see these tags only thr K† ° d ONLN dfugÅÂ )Åough the Hammer debugger G¿ ° d ONLN d~uÊÅÔ )’s   ° d ONLN dÅÇ ~é – (ã ~Heaps command.    
ˇˇˇˇˇˇˇˇ 4 ^ (é * ˇÙ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( ,  Palatino         &e .     3 +ú"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ úDebug Macros  4⁄ ú˙(         (‡ úOther Macros       
 ,  (‡9-7     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿(  	 ° d ONLN d   \ ú g Õ ( d úListing 9-12     ° d ONLN d  \ ‡ g Ú )DThe  , 
 Courier   Å  ° d ONLN d  \ Ú g. )XSETPTRNAME    Å  ° d ONLN d  \. gI )< Macro    
 ° d ONLN d $ o ú {
 ( x ú=#define XSETPTRNAME(p,n)   SetPtrName((Ptr) (p), (ULong) (n))  
 ° Z ®( 4 ¢ Z ®( p  £ ú £( £ ú £(  
ˇ·ˇ‚7Ç     ˇˇ‹. ˇ◊ ° d ONLN d b í ú ° *%XSETHANDLENAME   €r ( ù 9      
         ° d ONLN d r ® ú ¥ ˆ ( ± úXSETHANDLENAME(     ° d ONLN d Å ® ˆ ¥ ˚ )Zh       ° d ONLN d Ç ® ˚ ¥ ),      ° d ONLN d É ® ¥ )n         ° d ONLN d Ñ ® ¥ ))    ° d ONLN d Ü ∫ ú ∆ « ( √ ú	This macr  ¿ ° d ONLN d è ∫ » ∆/ ),o sets the tag of handle       ° d ONLN d ® ∫0 ∆7 )hh     Ö  ° d ONLN d ™ ∫7 ∆É )to the long value    8  ° d ONLN d º ∫Ñ ∆â )Mn     «  ° d ONLN d Ω ∫â ∆ê ).    Ä ° d ONLN d ¿ ∫ë ∆ó )Y  ⁄  ° d ONLN d ¡ ∫ñ ∆ )ou can use this for tracking   ° d ONLN d ﬁ « ú ” ˛ ( – údown memory leaks.    s  ° d ONLN d Ú « ˛ ” )bY  3Ä ° d ONLN d Û « ”Ö )ou can see these tags only thr K† ° d ONLN d «Ö ” )Åough the Hammer debugger G¿ ° d ONLN d) « ” )’s   ° d ONLN d, ‘ ú ‡ Ó ( › úHeaps command.         	 ° d ONLN d= ˘ ú Õ *$Listing 9-13    ° d ONLN dJ ˘ ‡ Ú )DThe     
 Å  ° d ONLN dN ¯ ÚF )XSETHANDLENAME  	 Å  ° d ONLN d\ ˘FK )T     Å  ° d ONLN d] ˘Kc )Macro     
 ° d ONLN dc ú¯ ( ú:#define XSETHANDLENAME(h,n)   SetHandleName((Handle) (h),   ° d ONLN dù ú& ‰ *(ULong) (n)) 
ˇˇˇˇˇˇˇˇ 4 ^ F4 H ˇ¶    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 ,  Palatino         &e .     3 +~"CHAPTER   à )>9  ,  	Helvetica       	 ˇˇ—Ú ˇÆ ( @ ~Debug Macros  4⁄ <˙
      
         (‡ <9-8       	 )BOther Macros     *Draft. Preliminary VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
 ˇÃ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ ú˙( ,  Palatino       
 .     ,  (‡ -1  ,  	Helvetica     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95   
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç        ˇˇu÷ ˇÆ ° d ONLN d   Z ú w  ( p úGlossary    îT ( p10     
         ° d ONLN d 
 ú* ÷ (' úArmistice car M  ° d ONLN d  ◊* › );d  ° d ONLN d  ¯* ˇ )!A  ∫† ° d ONLN d  ˇ* ) car o‡ ° d ONLN d *1 )d that ﬁ ÓÄ ° d ONLN d '1* )"/ts in the Macintosh and emulates a Newton. The   ° d ONLN d V* ¯62 (3 ¯Armistice car M  ° d ONLN d c*36  );2d does not have a Newton ROM; instead, it has RAM  ° d ONLN d ï6 ¯Bè (? ¯!that is loaded with a ROM image.  î@ ° d ONLN d ∂6èBï )óY  T¿ ° d ONLN d ∑6ïB” )ou can use an  ì¿ ° d ONLN d ≈6”B )>Armistice car  `‡ ° d ONLN d “6B );d  ° d ONLN d ‘B ¯N? (K ¯only for softwar  _  ° d ONLN d ‰B?N )G.e intended for Newtons version 1.3 and earlier ˙Ä ° d ONLN dBN )Ã,  ° d ONLN dN ¯Z (W ¯because   p‡ ° d ONLN dNZT )%Amistice car K` ° d ONLN d(NTZ )7+ds contain only four megabytes of RAM. See   ° d ONLN dSZ ¯f$ (c ¯also ROM  ö  ° d ONLN d[Z$f4 ), em  ∑† ° d ONLN d^Z4fQ )ulator   —† ° d ONLN deZQfS ).  ° d ONLN dgi úu Ã (r ú
Big-endian  ° d ONLN dri ¯u+ )\See Endian.  ° d ONLN d~x úÑ ª (Å úEndian  ° d ONLN dÖx ¯Ñ ˇ )\A  ∫† ° d ONLN dÜx ˇÑ˚ )9 computer can be described as being either big-endian or   ° d ONLN døÑ ¯ê
 (ç ¯=little-endian depending on how it arranges bytes within a wor   ° d ONLN d¸Ñê! (çd. In   ° d ONLN dê ¯ú‚ (ô ¯5a big-endian system, byte 0 is always the most signiﬁ °Ä ° d ONLN d8ê‚ú$ )Ícant (leftmost)  ° d ONLN dHú ¯®
 (• ¯Bbyte. In a little-endian system, byte 0 is always the least signiﬁ  Â  ° d ONLN dãú
® (•
cant  ° d ONLN dê® ¯¥D (± ¯(rightmost) byte.   ≤‡ ° d ONLN d¢®D¥K )LA  ÌÄ ° d ONLN d£®K¥ )0 Macintosh is a big-endian system, an Intel x86  ° d ONLN d”¥ ¯¿† (Ω ¯'machine is a little-endian system. The  –¿ ° d ONLN d˙¥†¿ƒ )®ARM pr ` ° d ONLN d ¥≈¿
 )%ocessor used in  ° d ONLN d¿ ¯Ã (… ¯@Newton can operate in either mode: Newton uses it in big-endian   ° d ONLN dPÃ ¯ÿ *mode.  ° d ONLN dV€ úÁ £ (‰ úG !  ° d ONLN dW€ §Á ± )lue  ° d ONLN d[€ ¯Á• )T&Assembly-language code that is linked  7‡ ° d ONLN dÅ€¶Á© )Æt  z@ ° d ONLN dÇ€©Á )o other code to make it  ° d ONLN döÁ ¯Û6 ( ¯possible for th c` ° d ONLN d©Á7ÛF )?at c ñ  ° d ONLN d≠ÁFÛã )ode to be used.  ° d ONLN dæˆ ú √ (ˇ úHammer  ° d ONLN d≈ˆ ¯⁄ )\0The low-level Macintosh debugger for the Newton. ° d ONLN dˆ ú ¥ ( úHeap  ° d ONLN d˚ ¯Õ )\/Dynamically allocated memory that is used for r  ` ° d ONLN d*Œﬁ )÷efer √Ä ° d ONLN d.ﬁ )enced objects,   ° d ONLN d= ¯= ( ¯such as those cr  á‡ ° d ONLN dM=œ )Eeated with the C++ new operator  r@ ° d ONLN dlœ )í.  (The new    ° d ONLN dy ¯) (& ¯Doperator is  used in C++ in place of the malloc function used in C.)  ° d ONLN dæ, ú8 ‘ (5 úLittle-endian ° d ONLN dÃ, ¯8+ )\See Endian.  ° d ONLN dÿ; úG ∫ (D úMakeﬁ Z¿ ° d ONLN dﬁ; ªG ¬ )le ° d ONLN d·; ¯G* )=An MPW ﬁ §@ ° d ONLN dÍ;*GÙ )2-le containing command lines for building a pr  =@ ° d ONLN d;ıG )Àogram. ° d ONLN dJ úV … (S ú	Meta-data ≥@ ° d ONLN d'J …V À )-   ° d ONLN d)J ¯V' )/EData about a class rather than about the information contained in an   ° d ONLN dnV ¯bH *instance of a class. ° d ONLN dÉe úq ’ (n úName Server ° d ONLN dèe ¯q ˇ )\A  ∫† ° d ONLN dêe ˇq[ ) system-wide name r  –` ° d ONLN d£e[q’ )\egistry that you can use to r  @¿ ° d ONLN d¿e÷q$ ){egister names for  ° d ONLN d“q ¯}: (z ¯use by other pr 1  ° d ONLN d·q;}a )Cograms.  ° d ONLN dÍÄ úå º (â úP-Class ° d ONLN dÚÄ ¯å )\See Pr °† ° d ONLN d¯ÄåJ )otocol Class.  ° d ONLN dè úõ (ò úP-Class Implementation  ° d ONLN dõ ¯ß ˇ +\A ∫† ° d ONLN dõ ˇßá )" subclass of a p-class interface.  ≤¿ ° d ONLN d@õáßé )àA  Ì` ° d ONLN dAõéß˙ ) p-class implementation  ° d ONLN dYß ¯≥É (∞ ¯implements the methods declar æ‡ ° d ONLN dvßÉ≥ı )ãed in the p-class interface.  
 ^  Ç Z 4 ` & } U      	 ( f &Figure 10-0 *	T     )	able 10-0   
ˇ·ˇ‚7Ç 
ˇˇˇˇˇˇˇˇ 4\ FÛ H 4 Fb H 4Ç F≥ H ˇ‚    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <-2  ,  	Helvetica     +BDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ <¿
       
 ° d ONLN d   \ ~ h » ( e ~P-Class Interface ° d ONLN d  \ ⁄ ha )\An abstract base class that deﬁ  Ó  ° d ONLN d 2 \a h‘ )ánes methods that must be   ° d ONLN d K h ⁄ tñ ( q ⁄)implemented in a p-class implementation.  ° d ONLN d u w ~ É ¢ ( Ä ~Package ° d ONLN d } w ⁄ ÉG )\The basic unit of softwar  ä` ° d ONLN d ñ wG É≠ )me used on the Newton.  <  ° d ONLN d ¨ w≠ É¥ )fA  v¿ ° d ONLN d ≠ w¥ É ) package consists  ° d ONLN d ø É ⁄ è[ ( å ⁄of various parts, including pr  Ω† ° d ONLN d › É[ èÀ )Åotocols, frames, and data. ° d ONLN d ¯ í ~ û Ã ( õ ~Package Manager ° d ONLN d í ⁄ ûD )\The part of the Newton   í` ° d ONLN d íD ûV )jOS t p` ° d ONLN d# íW ûÊ )hat loads and unloads packages.  ° d ONLN dC ° ~ ≠ õ ( ™ ~Packer  ° d ONLN dJ ° ⁄ ≠ Ì )\The  ª¿ ° d ONLN dN ° Ì ≠' )Macintosh Pr o‡ ° d ONLN dZ °( ≠V );ogrammer à¿ ° d ONLN db °W ≠j )/’s W "  ° d ONLN df °j ≠ù )
orkshop (M Ë` ° d ONLN dp °ù ≠≠ )3PW Ú  ° d ONLN dr °≠ ≠∏ )) p  »  ° d ONLN du °π ≠º )r  ç  ° d ONLN dv °Ω ≠ )ogram that   ° d ONLN dÅ ≠ ⁄ π ‚ ( ∂ ⁄cr  µ@ ° d ONLN dÉ ≠ ‚ π% )eates packages.  ° d ONLN dì º ~ » á ( ≈ ~Pr  N† ° d ONLN dï º à » ¢ )
otocol J  ° d ONLN dõ º £ » º ) Class ° d ONLN d¢ º ⁄ » )7Generally abbr ,Ä ° d ONLN d∞ º »m )Beviated to p-class.  ç  ° d ONLN dƒ ºm »ÿ )QSimilar to a C++ class, a  åÄ ° d ONLN dﬁ ºŸ »˘ )lp-class  ° d ONLN dÊ » ⁄ ‘ ﬂ ( — ⁄h Q` ° d ONLN dÁ » ‡ ‘ Ô )as r ”` ° d ONLN dÎ » Ô ‘W )estrictions to allow mor ˘‡ ° d ONLN d »W ‘e )he fr \` ° d ONLN d »f ‘˛ )#eedom to modify code after initial   ° d ONLN d* ‘ ⁄ ‡ › ( › ⁄r E  ° d ONLN d+ ‘ ﬁ ‡ )elease. See  @ ° d ONLN d7 ‘ ‡3 )1	P-class I  (‡ ° d ONLN d@ ‘3 ‡å )$mplementation and  ¡  ° d ONLN dR ‘å ‡∞ )Y	P-class I  œ¿ ° d ONLN d[ ‘∞ ‡” )$nterface -Ä ° d ONLN dc ‘‘ ‡÷ )$.  ° d ONLN de „ ~ Ô Ñ ( Ï ~P â† ° d ONLN df „ Ñ Ô á )r  N† ° d ONLN dg „ à Ô   )otocol Registry  ° d ONLN dw „ ⁄ ÔQ )RThe part of the Newton OS  Æ  ° d ONLN dê „Q ÔS )w   .  ° d ONLN dë „T Ô )that lists r ÷@ ° d ONLN dù „ Ôú )+egister  %` ° d ONLN d§ „ù Ô™ )ed   ä¿ ° d ONLN dß „™ Ô” )
p-classes. :  ° d ONLN d± „‘ Ô˜ )*	 Not all   ° d ONLN d∫ Ô ⁄ ˚ ( ¯ ⁄p-classes a /@ ° d ONLN d≈ Ô	 ˚ )/r  Ù@ ° d ONLN d∆ Ô ˚ )e r  ‡ ° d ONLN d… Ô ˚5 )egister  R  ° d ONLN d– Ô5 ˚	 )-ed; when the Package Manager loads packages,   ° d ONLN d˝ ˚ ⁄ Ê ( ⁄it r  Ô¿ ° d ONLN d ˚ Ê )egisters pr  † ° d ONLN d ˚o ).otocol parts that wer    ° d ONLN d! ˚pÅ )\e pr ,¿ ° d ONLN d% ˚Åî )epar ΩÄ ° d ONLN d) ˚îÃ )ed using the   , 
 Courier   ç@ ° d ONLN d6 ˚Õ )9	-autoload    ç@ ° d ONLN d? ˚ )6   ° d ONLN d@ ⁄" ( ⁄switch to Packer  @  ° d ONLN dP"$ )H.  ° d ONLN dR ~" á ( ~Pr  N† ° d ONLN dT à" µ )
	otocolGen  ° d ONLN d^ ⁄" )R
The MPW pr Å¿ ° d ONLN dh"Î )92ogram that performs several distinct services for  ° d ONLN dö" ⁄. „ (+ ⁄pr  G  ° d ONLN dú" ‰.˚ )
?otocol writers, including generating glue and generating blank   ° d ONLN d€. ⁄: Ì (7 ⁄sour  ˛† ° d ONLN dﬂ. Ì: ˛ )ce ﬁ ≈@ ° d ONLN d‰. ˇ:
 )les  ¥@ ° d ONLN dÁ.: ).  ° d ONLN dÈ= ~I ¬ (F ~ROM Emulator  ° d ONLN dˆ= ⁄I · )\A  ∫† ° d ONLN d˜= ·IÒ ): device that emulates a Newton by using RAM loaded with a  ° d ONLN d1I ⁄U* (R ⁄ROM image.  The   q† ° d ONLN dAI*Ud )PArmistice car  >¿ ° d ONLN dNIeU );!d is an example of a ROM emulator  é` ° d ONLN doIU )ú.  ° d ONLN dqX ~d Ñ (a ~T ∫¿ ° d ONLN drX Éd ñ )uple ° d ONLN dwX ⁄d · )WA  ∫† ° d ONLN dxX ·d^ ) set of elements. In PCMCIA  ¨‡ ° d ONLN dìX^dñ )} terminology è  ° d ONLN düXñdø )8, a tuple r  Q¿ ° d ONLN d™X¿dÍ )*efers to a   ° d ONLN dµd ⁄p Í (m ⁄deﬁ r  ° d ONLN dπd Îpı )>ned set of data items that characterize some facet of a PC car âÄ ° d ONLN d˜dıp (mıd.    
ˇˇˇˇˇˇˇˇ 4 ^ ( t * 4 î ( ≠ * 4 æ ( ˚ * 40 ( * ˇ0    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  Palatino       
 .     ,  (‡ -3  ,  	Helvetica     (Ô úDraft. Preliminary  VP ):, Conﬁ  )
dential. © ∑1 )1995 I± )   ˘Å )Apple Computer Ò )7, Inc.   Ìë )3/15/95  4 ^ Z¿( ˇ
/***      Newton Developer Technical Support Sample Code****      MonacoTest, A monospaced font for the Newton****      by J. Christopher Bell & Bob Ebert, Newton Developer Technical Support****      Copyright © 1994-7 by Apple Computer, Inc.  All rights reserved.****      You may incorporate this sample code into your applications without**      restriction.  This sample code has been provided "AS IS" and the**      responsibility for its operation is 100% yours.  You are not**      permitted to modify and redistribute the source as "DTS Sample Code."**      If you are going to re-distribute the source, we require that you**      make it clear in the source that the code was descended from**      Apple-provided sample code, but that you've made changes.*/NOTE: this sample is not intended to represent the details of routing.For more general information about routing, transports, beaming, mailing,and such things, see the DTS Sample Code "CustomRoute".This sample illustrates the use of the Monaco font, a font pacakge. Pleasediscard any earlier versions of sample code you have using font packages.The version of the font included with this project (Monaco-Courier 2.0) iscapable of font-substitution to Courier for network printers (PostScriptLaserWriters).This sample now illustrates how to "auto-install" a font.  If the font isnot available when the application is launched, a slip comes up asking theuser to install the font.  Once installed, the application is opened.You might think it would be cool to bundle Monaco9 in as part of yourpackage using the NTK feature which allows combining multiple partsinto a single multi-part package.  Please DO NOT do this. (See below)The original package containing the monaco font is still provided fordevelopers who wish to install it using conventional means.The "Monaco.rsrc" file was created by using Clipboard Magician to copy thedata fork of the "Monaco.pkg" file into a resource.  The "ustr" resources,Newton-format unicode strings, were created by dumping the strings createdon the Newton in hex.======= Warning: Installing the same font twice can create problems.With any font that comes from a centralized source (for instance, Apple), you should not embed the font within your application using an NTK multi-part package (including a package as file in the project). This is a bad idea because: 1) compatibility with other apps. Other apps could embed the font    in their application. If both applications appear one on Newton device, one    of them will break at "install" time or "deinstall" time. If a font is    installed a font more than once, there will be problems. 2) compatibility with the future ROMs. The font family symbol for this    font is 'monaco (and '|MonacoCourier:Newton| for font substitution parts).    If a future ROM contains these, there will be problems.    If you want to use the font in your package, use the 'auto-install' featureused in this sample. Alternatively, you can re-build the font part includedin the "Monaco Font" folder but create *NEW* font symbols for the twofont components. (the font itself (the "font"), and the MonacoCourier 'font substitution' part (the "psFont") used for printingto LaserWriters.   Version Historyv1- Initally released under a different name with an experimental versionof the Monaco font - not for use in final products.v2 - Released with a working version of Monaco 9. Suitable for use infinal products.- App now explicity tests if Monaco is installed- Text changev3- Included the 2.0 version of the Monaco font. This package contains two "parts": the "font" part and the "courier substiution" part. Thisfont should successfully print to LaserWriter printers which containCourier-Roman, Courier-Bold, Courier-Oblique, and Courier-ObliqueBold.If your laser printer does not work with this font, please write toDEVSUPPORT and let us know.- JCB rewrote the project to show off printing.v4- Added "auto install" slip to illustrate how to bundle the font withan application and avoid trying to install the font more than once.- Updated to NTK 1.5, included font package sourcev5- jxopher made the 'app' part use Newton 2.x Routing.- redid the printformat in Newton 2.x style (don't use the "fields" variable!)- removed references to deprecated StrWidth function
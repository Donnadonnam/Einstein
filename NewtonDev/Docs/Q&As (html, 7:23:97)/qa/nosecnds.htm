<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: StringToDateFrame & StringToTime Don't Use Seconds</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>StringToDateFrame & StringToTime Don't Use Seconds</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>StringToDateFrame & StringToTime Don't Use Seconds  (5/9/96)</H3><DL><DD>Q:    When passed a string with seconds, for example "12:23:34", <CODE>StringToDateFrame </CODE>and <CODE>StringToTime</CODE> don't seem to work.  <CODE>StringToDateFrame </CODE>returns a frame with NIL for all the time & day slots, and <CODE>StringToTime </CODE>returns NIL.<BR><BR>A:    To correctly handle strings with seconds, seconds must be stripped from the string.  If the application might be used outside the US, check for the Locale time delimiter.  Here is a function which prepares a string for <CODE>StringToDateFrame </CODE>and <CODE>StringToTime</CODE>:<BR><CODE><PRE>    PrepareStringForDateTime := func (str)    begin   // str is just a time string, nothing else belongs         local newStr := clone (str);        local tf:= GetLocale().timeFormat;        local startMin := StrPos (str, tf.timeSepStr1, 0);        local startSec := StrPos (str, tf.timeSepStr2, startMin+1);        // If a time seperator for seconds, then strip out seconds        if startSec then        </PRE><BR></CODE>            <CODE><PRE>            begin                local skipSecSep := startSec + StrLen (tf.timeSepStr2);                local remainderStr := SubStr (                    str, skipSecSep, StrLen (str) - skipSecSep);                local appendStr := StringFilter (                    remainderStr, "1234567890", 'rejectBeginning);                newStr := SubStr (str, 0, startSec) & appendStr;        end;        return newStr;    end;</CODE></PRE></DL>
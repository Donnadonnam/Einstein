<HTML><HEAD><TITLE>Newton 2.x Q&amp;A Category: Controls and Other Protos</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><img src="pictures/newtninc.gif" HEIGHT=42 WIDTH=187 BORDER=0><H2>Newton 2.x Q&amp;A Category: Controls and Other Protos</H2><H4>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H2><A HREF="controls.htm">Controls and Other Protos</H2></A><UL><A HREF="#How_to_Set_the_Letter_in_AZTab_Protos"><B> </B>How to Set the Letter in AZTab Protos  (3/26/96)<BR></A><A HREF="#Return_Value_of_ProtoSoupOverview's_HitItem_Message"><B> </B>Return Value of ProtoSoupOverview's HitItem Message  (1/6/97)<BR></A><A HREF="#Don't_Use_ROM_UpArrowBitmap"><B> </B>Don't Use ROM_UpArrowBitmap  (3/28/97)<BR></A><A HREF="#Dragging_a_View_Based_on_ProtoTXView"><B>NEW: </B>Dragging a View Based on ProtoTXView  (7/8/97)<BR></A></UL><A NAME="Return_Value_of_ProtoSoupOverview's_HitItem_Message"><H3><HR><B> </B>Return Value of ProtoSoupOverview's HitItem Message  (1/6/97)</A></H3><DL><DD>Q:    What is the meaning of the return value of <CODE>protoSoupOverview:HitItem(...)</CODE>? I want to call the inherited method and use the return value to determine what action the system performed.<BR><BR>A:    <CODE>ProtoSoupOverview:HitItem(...)</CODE> returns nil if it handled the tap and non-<CODE>nil</CODE> if it didn't handle the tap (the opposite meaning of the return value of <CODE>protoOverview</CODE>'s <CODE>HitItem</CODE> method). <BR><BR>    Note that the final NPG documentation implies that <CODE>protoSoupOverview</CODE>'s <CODE>HitItem</CODE> is just like <CODE>protoOverview</CODE>'s <CODE>HitItem</CODE> method; this is a mistake in the documentation. <BR></DL><A NAME="Don't_Use_ROM_UpArrowBitmap"><H3><HR><B> </B>Don't Use ROM_UpArrowBitmap  (3/28/97)</A></H3><DL><DD>Q:    I used the constant <CODE>ROM_UpArrowBitmap</CODE> in my application, and now my app appears partially invisible in the Newton 2.1 OS.  What's wrong?<BR><BR>A:    The constant <CODE>ROM_UpArrowBitmap</CODE> and the other directional arrow constants were not intended to be supported, and the value of the magic pointer has changed in Newton 2.1 OS.  The change was made to better implement the (documented and supported) scrolling protos such as <CODE>protoUpDownScroller</CODE>.<BR><BR>    <CODE>ROM_UpArrowBitmap</CODE> is named in the NTK Platform File defs file, and had mistakenly been mentioned in some public documentation from Apple, so you may have thought this was supported.  If you have a reference to one of these magic pointers in the <CODE>icon</CODE> slot of a <CODE>clPictureView</CODE>, you'd have gotten an arrow graphic on the 2.0 and earlier releases of the OS, but on the Newton 2.1 OS, the changed value is not acceptable to the view system as a graphic.  The result is that drawing is aborted when the OS tries to render the view with the arrow graphic, and views that would normally be drawn after the bad view will also fail to render, producing what appear to be invisible views that are otherwise functional.<BR><BR>    You should use the documented protos to implement scrolling.  If a custom scroller is needed, you can create your own graphic and include it in your NTK project.</DL><A NAME="Dragging_a_View_Based_on_ProtoTXView"><H3><HR><B>NEW: </B>Dragging a View Based on ProtoTXView  (7/8/97)</A></H3><DL><DD>Q:    I have a <CODE>protoTXView</CODE>-based view as a descendent of a draggable view. When I drag the view, the <CODE>protoTXView</CODE>-based view still draws its contents at the original coordinates. What is going wrong? <BR><BR>A:    The <CODE>protoTXView</CODE> prototype does not correctly update its draw origin coordinates when moved. To work around this bug, you must close the <CODE>protoTXView</CODE>-based view and re-open it. <BR><BR>    Before closing the <CODE>protoTXView</CODE>-based view, you will need to externalize the data so that you can restore the data when you reopen the view.  To do this, call the <CODE>Externalize</CODE> method and store the return value somewhere (perhaps in the parent of the <CODE>protoTXView</CODE>).  When you reopen the view, call the <CODE>Internalize</CODE> method with the stored return value of the call to <CODE>Externalize</CODE>.<BR><BR>    You will probably also want to save and restore the scroll coordinate, the caret offset, and the hilite range.</DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: What is Error Code -18003</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>What is Error Code -18003</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>What is Error Code -18003  (3/8/94)</H3><DL><DD>Q:    What is error code -18003?<BR><BR>A:    This signal is also called SCC buffer overrun; it indicates that the internal serial chip buffer filled, and the NewtonScript part didn't have time to read the incoming information. You need to either introduce software (XON/XOFF) or hardware flow control, or make sure that you empty the buffer periodically.<BR><BR>    You will also get -18003 errors if the underlying comms tool encounters parity or frame errors. Note that there's no difference between parity errors, frame errors, or buffer overruns; all these errors are mapped to -18003.<BR><BR>    See the diagram for an explanation of what is going on concerning the serial chip, the buffers and the scripting world.<BR><BR>    The SCC chip gets incoming data, and stores it in a 3-byte buffer. An underlying interrupt handler purges the SCC buffer and moves it into a special tools buffer. The comms system uses this buffer to scan input for valid end conditions (the conditions which cause your inputSpec to trigger). Note that you don't lose data while you switch inputSpecs; it's always stored in the buffer during the switch.<BR><BR>    Now, if there's no flow control (XON/XOFF, HW handshaking, MNP5), the network side will slowly fill the tool buffer, and depending on the speed the buffer is handled from the scripting world sooner or later the comms side will signal a buffer overrun.   Even if flow control is enabled, you may still receive errors if the sending side does not react fast enough to the NewtonÍs plea to stop sending data.   In the case of XON/XOFF, if you suspect that one side or the other is not reacting or sending  flow control characters correctly, you may want to connect a line analyzer between the Newton and the remote entity  to see what is really happening.<BR><BR>    If  you have  inputScripts that take a long time to execute, you might end up with overrun problems.  If possible, store the received data away somewhere, quickly terminate the inputSpec, then come back and process the data later.  For instance, you could have an idleScript which updates a text view based on data stored in a soup or in a slot by your inputSpec.<BR></DL><CENTER><IMG BORDER="0" SRC="pictures/buffers.gif" ALT="Q&amp;A Diagram"></CENTER>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A Category: Views</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><img src="pictures/newtninc.gif" HEIGHT=42 WIDTH=187 BORDER=0><H2>Newton 2.x Q&amp;A Category: Views</H2><H4>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H2><A HREF="views.htm">Views</H2></A><UL><A HREF="#How_to_Save_the_Contents_of_clEditView"><B> </B>How to Save the Contents of clEditView  (10/4/93)<BR></A><A HREF="#Adding_Editable_Text_to_clEditViews"><B> </B>Adding Editable Text to clEditViews  (6/9/94)<BR></A><A HREF="#TieViews_and_Untying_Them"><B> </B>TieViews and Untying Them  (6/9/94)<BR></A><A HREF="#Immediate_Children_of_the_Root_View_Are_Special"><B> </B>Immediate Children of the Root View Are Special  (11/17/94)<BR></A><A HREF="#ViewIdleScripts_and_clParagraphViews"><B> </B>ViewIdleScripts and clParagraphViews  (8/1/95)<BR></A><A HREF="#FilterDialog_and_ModalDialog_Limitations"><B> </B>FilterDialog and ModalDialog Limitations  (2/5/96)<BR></A><A HREF="#Using_Proportional_View_Alignment_Correctly"><B> </B>Using Proportional View Alignment Correctly  (6/20/96)<BR></A><A HREF="#Drag_and_Drop_Caches_the_Background_Bitmap"><B> </B>Drag and Drop Caches the Background Bitmap  (7/15/96)<BR></A><A HREF="#Default_and_Close_Keys_in_Confirm_Slips"><B> </B>Default and Close Keys in Confirm Slips  (2/28/97)<BR></A><A HREF="#Screen_Rotation_and_Linked_Views_or_BuildContext_Slips"><B> </B>Screen Rotation and Linked Views or BuildContext Slips  (3/10/97)<BR></A><A HREF="#How_to_Get_Data_From_a_ProtoTXView_Externalized_Data"><B> </B>How to Get Data From a ProtoTXView Externalized Data  (4/3/97)<BR></A><A HREF="#Extracting_All_Text_from_a_ProtoTXView_Object"><B> </B>Extracting All Text from a ProtoTXView Object  (4/3/97)<BR></A><A HREF="#Finding_the_Caret_In_a_clParagraphView-based_View"><B>NEW: </B>Finding the Caret In a clParagraphView-based View  (5/12/97)<BR></A><A HREF="#Scrollers_Sometimes_Go_Too_Fast"><B>NEW: </B>Scrollers Sometimes Go Too Fast  (6/9/97)<BR></A></UL><A NAME="How_to_Save_the_Contents_of_clEditView"><H3><HR><B> </B>How to Save the Contents of clEditView  (10/4/93)</A></H3><DL><DD>Q:    How can I save the contents of a <CODE>clEditView</CODE> (the children paragraph, polygon, and picture views containing text, shapes, and ink) to a soup and restore it later?<BR><BR>A:    Simply save the <CODE>viewChildren</CODE> array for the <CODE>clEditView</CODE>, probably in the <CODE>viewQuitScript</CODE>.  To restore, assign the array from the soup to the <CODE>viewChildren</CODE> slot, either at <CODE>viewSetupFormScript</CODE> or <CODE>viewSetupChildrenScript</CODE> time; or later followed by <CODE>RedoChildren</CODE>.<BR><BR>    You shouldn't try to know "all" the slots in a template in the <CODE>viewChildren</CODE> array. (For example, text has optional slots for fonts and tabs, shapes have optional slots for pen width, and new optional slots may be added in future versions.)  Saving the whole array also allows you to gracefully handle templates in the <CODE>viewChildren</CODE> array that don't have an ink, points, or text slot.  In the future, there may be children that represent other data types.</DL><A NAME="Adding_Editable_Text_to_clEditViews"><H3><HR><B> </B>Adding Editable Text to clEditViews  (6/9/94)</A></H3><DL><DD>Q:    How can I add editable text to a <CODE>clEditView</CODE>?  If I drag out a <CODE>clParagraphView</CODE> child in NTK, the text is not selectable even if I turn on <CODE>vGesturesAllowed</CODE>. <BR><BR>A:    <CODE>clEditViews</CODE> have special requirements.  To create a text child of a <CODE>clEditView</CODE> that can be selected and modified by the user (as if it had been created by the user) you need to do the following:<BR><BR><CODE><PRE>    textTemplate := {        viewStationery: 'para,        viewBounds: RelBounds(20, 20, 100, 20),        text: "Demo Text",    };    AddView(self, textTemplate);</PRE><BR></CODE>    The view must be added dynamically (with <CODE>AddView</CODE>), because the <CODE>clEditView</CODE> expects to be able to modify the contents as the user edits this item.  The template (<CODE>textTemplate</CODE> above) should also be created at run time, because the <CODE>clEditView</CODE> adds some slots to this template when creating the view.  (Specifically it fills in the <CODE>_proto</CODE> slot based on the <CODE>viewStationery</CODE> value.  The <CODE>_proto</CODE> slot will be set to <CODE>protoParagraph</CODE>)  If you try to create too much at compile time, you will get -48214 (object is read only) errors when opening the edit view.<BR><BR>    The minimum requirements for the template are a <CODE>viewStationery</CODE> of <CODE>'para</CODE>, a <CODE>text</CODE> slot, and a <CODE>viewBounds</CODE> slot.  You can also set <CODE>viewFont</CODE>, <CODE>styles</CODE>, <CODE>tabs</CODE>, and other slots to make the text look as you would like.</DL><A NAME="TieViews_and_Untying_Them"><H3><HR><B> </B>TieViews and Untying Them  (6/9/94)</A></H3><DL><DD>Q:    What triggers the pass of a message to a tied view?  If I want to "untie" two views that have been tied with <CODE>TieViews</CODE>, do I simply remove the appropriate slots from the <CODE>viewTie</CODE> array?<BR><BR>A:    The tied view's method will be executed as a result of the same actions that cause the main view's <CODE>viewChangedScript</CODE> to be called.  This can happen without calling <CODE>SetValue</CODE>, for example, when the user writes into a view that has recognition enabled, the <CODE>viewChangedScript</CODE> will get called.<BR><BR>    As of Newton 2.1 OS, there is no API for untying tied views.  It may be wise to first check for the existance of an <CODE>UntieViews</CODE> function, and call it if it exists, but if it does not, removing the pair of elements from the tied view's <CODE>viewTie</CODE> array is fine.</DL><A NAME="Immediate_Children_of_the_Root_View_Are_Special"><H3><HR><B> </B>Immediate Children of the Root View Are Special  (11/17/94)</A></H3><DL><DD>Q:    In trying to make a better "modal" dialog, I am attempting to create a child of the root view that is full-screen and transparent.  When I do this, the other views always disappear, and reappear when the window is closed.  Why?<BR><BR>A:    Immediate children of the root view are handled differently by the view system.  They cannot be transparent, and will be filled white unless otherwise specified.  Also, unlike other views in Newton 2.0 OS, their borders are considered part of the view and so taps in the borders will be sent to them.<BR><BR>    This was done deliberately to discourage tap-stealing and other unusual view interaction.  Each top level view (usually one application) is intended to stand on its own and operate independently of other applications.<BR><BR>    So-called "application modal" dialogs can and should be implemented using the technique you describe with the transparent window as a child of the application's base view.<BR><BR>    You can make system modal dialogs with the view methods <CODE>FilterDialog</CODE> and <CODE>ModalDialog</CODE>.  (See the Q&amp;A "FilterDialog and ModalDialog Limitations" for important information on those methods.)</DL><A NAME="ViewIdleScripts_and_clParagraphViews"><H3><HR><B> </B>ViewIdleScripts and clParagraphViews  (8/1/95)</A></H3><DL><DD>Q:    Sometimes a <CODE>clParagraphView</CODE>'s <CODE>viewIdleScript</CODE> is fired off automatically.  (For example, an operation which results in the creation or changing of a keyboard's input focus within the view will trigger the viewIdleScript.)  Why does this happen and what can I do about it?<BR><BR>A:    The <CODE>clParagraphView</CODE> class internally uses the idle event mechanism to implement some of its features.  Unfortunately, any <CODE>viewIdleScript</CODE>s provided by developers also execute when the system idle events are processed.  Only the "heavyweight" views do this, "lightweight" paragraph views (in other words, simple static text views) do not.<BR><BR>    There is no workaround in the Newton 1.x OS or Newton 2.0 OS while using clParagraphView <CODE>viewIdleScript</CODE>.  You can either accept the extra idle script calls, or use another non-<CODE>clParagraphView</CODE> based view to implement your idle functions.<BR></DL><A NAME="FilterDialog_and_ModalDialog_Limitations"><H3><HR><B> </B>FilterDialog and ModalDialog Limitations  (2/5/96)</A></H3><DL><DD>Q:    After closing a view that was opened with <CODE>theView:FilterDialog()</CODE>, the part of the screen that was not covered by the <CODE>theView </CODE>no longer accepts any pen input. <CODE>theView </CODE>is a <CODE>protoFloatNGo</CODE>.  Is there some trick?<BR><BR>A:    There is a problem with <CODE>FilterDialog </CODE>and <CODE>ModalDialog </CODE>when used to open views that are not immediate children of the root view.  At this point we're not sure if we'll be able to fix the problem.<BR><BR>    You must not use <CODE>FilterDialog </CODE>or <CODE>ModalDialog </CODE>to open more than one non-child-of-root view at a time.  Opening more than one at a time with either of these messages causes the state information from the first to be overwritten with the state information from the second.  The result will be a failure to exit the modality when the views are closed.<BR><BR>    Here are some things you can do to avoid or fix the problem with <CODE>FilterDialog</CODE>.<BR><BR>     Redesign your application so that your modal slips are all children of the root view, created with <CODE>BuildContext</CODE>.  This is the best solution because it avoids awkward situations when the child of an application is system-modal.  (Application subviews should normally be only application-modal.)<BR><BR>    Use the <CODE>ModalDialog </CODE>message instead of <CODE>FilterDialog</CODE>.  <CODE>ModalDialog </CODE>does not have the child-of-root bug.   (<CODE>FilterDialog </CODE>is preferred, since it uses fewer system resources and is faster.)<BR><BR>    Here is some code you can use to work around the problem much like a potential patch would.  (This code should be safe if a patch is madethe body of the if statement should not execute on a corrected system.)<BR><BR><CODE><PRE>view:FilterDialog();if view.modalState then    begin        local childOfRoot := view;        while childOfRoot:Parent() &lt;&gt; GetRoot() do            childOfRoot := childOfRoot:Parent();        childOfRoot.modalState := view.modalState;    end;</PRE><BR></CODE>    This only needs to be done if the view that you send the <CODE>FilterDialog </CODE>message to is not an immediate child of the root.  You can probably improve the efficiency in your applications, since the root child is ususally your application's base view, which is a "well known" view.  That is,  you may be able to re-write the code as follows:<BR><BR><CODE><PRE>view:FilterDialog();if view.modalState then    base.modalState := view.modalState;</CODE></PRE></DL><A NAME="Using_Proportional_View_Alignment_Correctly"><H3><HR><B> </B>Using Proportional View Alignment Correctly  (6/20/96)</A></H3><DL><DD>Q:    I am trying to use proportional view alignment but things don't seem to be working correctly.  For instance, if I have a view which is full justified or center justified, proportional view alignment doesn't seem to work at all.  Whats wrong?<BR><BR>A:    Proportional justification only works if you are using left, right, top, or bottom justification.  This is true for both sibling and parent justification.<BR><BR>    Proportional justification is very similar to full justification.  The view system needs some reference point at which to position the view.  If you specify full or center justification, and you are also using proportional justification, the reference point is undefined.<BR><BR>    Additionally, if you are using right or bottom justification, you will need to specify negative values for your proportional bounds.  For instance, if you want a view to take up the right 30 percent of its parent, you would specify the following view bounds:<BR><CODE><PRE>    {left: -30, top: &lt;top&gt;, right: 0, bottom: &lt;bottom&gt;}</PRE><BR></CODE><BR>    and the following view justification:<BR><CODE><PRE>    vjParentRightH + vjLeftRatio</CODE></PRE></DL><A NAME="Drag_and_Drop_Caches_the_Background_Bitmap"><H3><HR><B> </B>Drag and Drop Caches the Background Bitmap  (7/15/96)</A></H3><DL><DD>Q:    I am trying to implement drag scrolling. Although I can scroll the contents of the window, when I drag the item back into the window, it strips away the updated (scrolled) contents and leaves the original (unscrolled) contents behind. How can I get this to work?<BR><BR>A:     Unfortunately, you have hit a design limitation of the Drag and Drop implementation. When you send the <CODE>DragAndDrop</CODE> message to a view, the bitmap for the pre-drag state is cached. Once the drag loop starts, you can not update that cached bitmap. When you "scroll" the view (probably using <CODE>RefreshViews</CODE>), you update the screen, but the cached bitmap is still there and is used by the <CODE>DragAndDrop</CODE> routine to update the screen as the dragged item is moved.</DL><A NAME="Default_and_Close_Keys_in_Confirm_Slips"><H3><HR><B> </B>Default and Close Keys in Confirm Slips  (2/28/97)</A></H3><DL><DD>Q:     Is there any way to put a keyboard default on a confirm dialog?<BR><BR>A:    Yes.  For both <CODE>ModalConfirm</CODE> and <CODE>AsyncConfirm</CODE>, the 2.0 Newton Programmer's Reference says you may pass three types of things as the buttonList argument: a symbol (<CODE>'okCancel</CODE> or <CODE>'yesNo</CODE>), and array of strings, or an array of frames with <CODE>'value</CODE> and <CODE>'text</CODE> slots.<BR><BR>    In the Newton 2.1 OS, this API has been extended to allow for default key and close key behavior.  There are four new symbols that are allowed: <CODE>'okCancelDefaultOk</CODE>, '<CODE>okCancelDefaultCancel</CODE>, <CODE>'yesNoDefaultYes</CODE>, and <CODE>'yesNoDefaultN</CODE>o.  They do the obvious thing, setting the default key as specified and the close key to Cancel or No if those aren't the default.  However, using these symbols on a Newton 2.0 OS device will result in the "OK" and "Cancel" buttons always being displayed, even if you specify <CODE>'yesNoDefaultYes</CODE> or <CODE>'yesNoDefaultNo</CODE>. <BR><BR>    The array-of-frames flavor for the <CODE>buttonList</CODE> argument allows an additional slot, called <CODE>'keyValue</CODE>.  Supported values for this slot are the symbols <CODE>'default</CODE> and <CODE>'close</CODE>, or NIL/not present.  <CODE>'default</CODE> makes the button the default key, and <CODE>'close</CODE> makes the  button activate with the close key.  Any other value will cause a problem in the current Newton 2.1 implementation.  The <CODE>keyValue</CODE> slot is ignored on the Newton 2.0 OS.<BR><BR>    For compatibility, we recommend avoiding the <CODE>'yesNoDefaultYes</CODE> and <CODE>'yesNoDefaultNo</CODE> symbols if you intend to run on both Newton 2.0 and 2.1 devices.  Instead, use one of these specifiers:<BR> <CODE><PRE>    '[{text: "Yes", value: TRUE, keyValue: default}, {text: "No", value: NIL, keyValue: close}]</PRE><BR></CODE> <CODE><PRE>    '[{text: "Yes", value: TRUE}, {text: "No", value: NIL, keyValue: default}]</CODE></PRE></DL><A NAME="Screen_Rotation_and_Linked_Views_or_BuildContext_Slips"><H3><HR><B> </B>Screen Rotation and Linked Views or BuildContext Slips  (3/10/97)</A></H3><DL><DD>Q:    I've got a linked view open, and I'm trying have it rotate with <CODE>ROM_DefRotateFunc</CODE>. When I rotate the screen the base view rotates properly, but the linked view closes.  Do I need to add a <CODE>ReorientToScreen</CODE> slot to the linked view?<BR><BR>A:    When the user requests a screen rotation, the OS first checks each immediate child of the root view to see if it will still operate on the rotated screen.  Having a <CODE>ReorientToScreen</CODE> slot in the view tells the OS that this view is OK, so the slot is used first as a token ("magic cookie") to tell the OS that this view knows about rotation.  Later during the rotation operation, the <CODE>ReorientToScreen</CODE> message is sent to your application's base view and to other views that are immediate children of the root view.  That method then performs its second function, which is to completely handle resizing the view and its children for the new screen size. (Even views which are small enough so that no resizing is necessary need a <CODE>ReorientToScreen</CODE> method.  That method may need to move the base view to ensure that it remains on-screen after rotation.)<BR><BR>    It's convenient to use the <CODE>ROM_DefRotateFunc</CODE> for this script, since it fills the magic cookie requirement and handles resizing for most views.  <CODE>ROM_DefRotateFunc</CODE> is very simple: it send a close and then an open message to the view.  Since well-written applications take screen size into account when they open, this works fine in most cases.  However, applications that keep track of internal state that isn't preserved when the app is closed can't use <CODE>ROM_DefRotateFunc</CODE>, because when the app reopens on the rotated screen, it will look different.  Opening a linked subview is one example of this; it doesn't usually make sense to remember that a slip is open, since it's usually closed when your application is closed.<BR><BR>    Adding a <CODE>ReorientToScreen</CODE> method to your linked views wouldn't help; since they are descendents of your base view and not children of the root view, the OS wouldn't handle these views.  (It's up to your application to keep its kids under control.)  You could change your application so that it kept track of whether the linked views were open or closed, and restored them to the same state when it was reopened.  However, this might be confusing to users who closed your app and then opened it again much later.<BR><BR>    A better workaround is to implement your own <CODE>ReorientToScreen</CODE> method, which either resizes the views so they fit on the new screen, or which closes and reopens the views such that the floaters also re-open.  By using the <CODE>ReorientToScreen</CODE> message to handle the special case, you get to do something different during rotation versus during opening at the user request (for example, after tapping on the Extras icon.)<BR><BR>    Slips created with <CODE>BuildContext</CODE> also must be handled carefully during rotation.  Because they are themselves children of the root view, they'll each need their own <CODE>ReorientToScreen</CODE> method or the screen may not be rotatable when they are open or they won't reopen after rotation.  If you use <CODE>ROM_DefRotateFunc</CODE>, the slip itself will be closed and reopened, and care may need to be taken to ensure the slip properly handles being reopened, and that its connection to its controlling application is not lost.<BR></DL><A NAME="How_to_Get_Data_From_a_ProtoTXView_Externalized_Data"><H3><HR><B> </B>How to Get Data From a ProtoTXView Externalized Data  (4/3/97)</A></H3><DL><DD>Q:    I'm using the <CODE>protoTXView</CODE> text engine in Newton 2.1 OS. How can I get text, styles, pictures, etc. out of the object returned by <CODE>protoTXView</CODE>'s <CODE>Externalize</CODE> method without either a) instantiating a <CODE>protoTXView</CODE> or b) digging in the data structure?<BR><BR>A:    You must instantiate a view to get data from the externalized object that <CODE>protoTXView</CODE> produces.  The data structures in that object are not documented or supported.  You may be tempted to do this anyway, since it looks as though the data structure is obvious.  Don't, it isn't.  <CODE>ProtoTXView</CODE> actually uses several different data formats depending on the complexity and storage destination for the data.<BR><BR>    It's actually very easy to instantiate a view based on <CODE>protoTXView</CODE> to get at the data.  Here's one way:<BR><CODE><PRE>    local textView := BuildContext(        {            _proto: protoTXView,            viewBounds: SetBounds(0, 0, 0, 0),            viewFlags: 0,            ReorientToScreen: ROM_DefRotateFunc,        });    textView:Open();    textView:Internalize(myExternalizedData);</PRE><BR>    </CODE>You can now use all the <CODE>protoTXView</CODE> APIs to get the data from the <CODE>textView</CODE> object.  Don't forget to clean up with <CODE>textView:Close()</CODE> when you're done.<BR></DL><A NAME="Extracting_All_Text_from_a_ProtoTXView_Object"><H3><HR><B> </B>Extracting All Text from a ProtoTXView Object  (4/3/97)</A></H3><DL><DD>Q:    How can I get all the text out of the <CODE>protoTXView</CODE> data stored in a soup entry, for example to get the text for sending in email?<BR><BR>A:    First, instantiate a dummy view with the data from the soup, as described in the Q&amp;A "How to Get Data From a ProtoTXView Externalized Data".  The <CODE>protoTXView</CODE> method <CODE>GetRangeData</CODE> always allocates its storage from the NewtonScript heap, so you will need to copy the data into a destination VBO in chunks.  Here's some code to do that.  (This code uses a 4K block size, you may wish to adjust that as necessary, add error checking, etc.)  <CODE>StringFilter</CODE> is used to remove the <CODE>protoTXView</CODE> graphic indicator.<BR><BR><CODE><PRE>    constant kChunkSize := 0x1000; // 4K chunks    local start := 0;    local theText := GetDefaultStore():NewVBO('string, length(""));    // make VBO into a proper string    BinaryMunger(theText,0,nil, "", 0, nil);        while numChars-start &gt; kChunkSize do        // strip out graphics characters        StrMunger(theText,start, nil,                    StringFilter(                        textView:GetRangeData(                            {                            first: start,                             last: start := start + kChunkSize                            }, 'text),                        "\u2206\u", 'rejectAll),                    0, nil);    // copy remainder    if start &lt; numChars then        StrMunger(theText,start,nil,                    StringFilter(                        textView:GetRangeData(                            {first: start, last: numChars}, 'text),                        "\u2206\u", 'rejectAll),            0, nil);    // theText now holds plain text from the protoTXView</PRE><BR></CODE>    For clarity, the code above does not use <CODE>ClearVBOCache</CODE> as mentioned in the Q&amp;A, "How to Avoid Resets When Using VBOs". If you are having problems with large VBOs during code like that mentioned above, see that Q&amp;A for more information.</DL><A NAME="Finding_the_Caret_In_a_clParagraphView-based_View"><H3><HR><B>NEW: </B>Finding the Caret In a clParagraphView-based View  (5/12/97)</A></H3><DL><DD>Q:    I have a view based on <CODE>clParagraphView</CODE> and would like to find the current position of the caret within that view so that I can scroll to it.  Is there a way to do this?<BR><BR>A:    Yes, there is a <CODE>clParagraphView</CODE> method called <CODE>caretRelativeToVisibleRect</CODE> that you can use.<BR><BR>    This method takes the global coordinates of the visible region of the paragraph view as an argument.  It returns either <CODE>'inbox,</CODE> <CODE>'top</CODE>, <CODE>'left</CODE>, <CODE>'bottom</CODE>, <CODE>'right</CODE>, or <CODE>nil</CODE>.  Below is a list of what each return value signifies.<BR><BR>    <CODE>paragraphView:CaretRelativeToVisibleRect( visibleBox )</CODE><BR><BR>    Return Value        Meaning<BR>    ---------------------------------------------------<BR>    <CODE>'inbox</CODE>            The caret is positioned inside the visible region.<BR>    <CODE>'top</CODE>                The caret is above the visible region.<BR>    <CODE>'bottom</CODE>            The caret is below the visible region.<BR><CODE>    'left</CODE>                The caret is to the left of the visible region.<BR>    <CODE>'right</CODE>            The caret is to the right of the visible region.<BR>    <CODE> nil    </CODE>            The view has no caret.<BR></DL><A NAME="Scrollers_Sometimes_Go_Too_Fast"><H3><HR><B>NEW: </B>Scrollers Sometimes Go Too Fast  (6/9/97)</A></H3><DL><DD>Q:    When using <CODE>protoUpDownScroller</CODE> on an Apple MessagePad 2000 , tapping on the scroller once calls the  <CODE>viewScroll2DScript</CODE> two or three times.  Shouldn't the scroller call the script only once per tap? <BR><BR>A:    The problem happens because the processor in the MessagePad 2000 is so fast.  The scroller doesn't call the <CODE>viewScroll2DScript</CODE> once per tap, but rather calls it repeatedly while the pen is held down over the scroll arrow.  This is normal scroller behavior, and has in fact been there all along.  with the MP2000, the processor is so much faster that it can chug through many scroll operations before the pen is released.<BR><BR>    That is, the scrolling code in the scroller itself does the equivalent of a "<CODE>while not StrokeDone(unit) do targetView:viewScroll2dscript(....)"</CODE>.  If it takes even 1 tick for the <CODE>StrokeDone</CODE> function to report true, it's possible that the <CODE>viewScroll2DScript</CODE> might have been called more than once.<BR><BR>    If you need to slow down scrolling, add a delay in your <CODE>viewScroll2DScript</CODE>.  Use the global function <CODE>Sleep</CODE> for this, as that call will yeild the NewtonScript task and let other parts of the OS work (or sleep the processor, saving battery power.)<BR><BR>    A simple delay after each scroll event will work fine, and is probably the best solution overall.  If you want to have the function operate consistently on all processors, you might do something like this;<BR><BR><CODE><PRE>    constant kMaxScrollSpeed := 60;  // ticks    viewScroll2DScript: func(...)        begin            local t := ticks();            ... // do scrolling stuff            RefreshViews(); // show scrolled result            Sleep(MAX(kMaxScrollSpeed - (ticks() - t), 0));        end;</PRE><BR></CODE><BR>    The above code should have the unit scrolling at a fairly consistent one-scroll-per-second unless the time it takes to do the scrolling stuff is more than 1 second, in which case it'll just go as fast as it can.  The drawback to this approach is that the script will always delay for at least a second, so if for example the user taps the up arrow then the down arrow in less than a second, there will seem to be a delay between the up scroll and down scroll that would not necessarily need to be there.<BR><BR>    You could certainly be more clever with your delays by counting ticks and watching the count paramater to your scroll script.  This might even result in a better performing delay.  However, it's probably not worth the effort it would take to implement this.  The one-scroll-per-second approach works well, is simple, and it's unlikely that the user will ever notice the small extra delay.  (Don't try to do one-scroll-every-5-seconds using this method though, your users may quickly grow annoyed at the extra delay!)<BR></DL></BODY></HTML>
// Created by Newton Book Maker 1.1// ¡¡ Note: This file may contain needed resources !! // Documentbook := {	version: 2,	isbn: "BMaker:PIEDTS",	title: "Newton Book Maker User’s Manual",	shortTitle: "Bookmaker",	copyright: "(c) 1993-1995 Apple Computer, Inc.",	author: "Bob Ebert, PIE DTS",	publisher: "Apple Computer, Inc.",	publicationDate: 47252160,	data: {},   // Author’s own data	contents: Array(256, NIL),	styles: [], hints: Array(256, NIL),	browsers: [], templates: [], rendering: []};output.book := book;// Shared Map Functionsfunc MakePage(aTemplate)	{template: aTemplate, blocks: []};func MakeBlock(aBounds, anItem)	{bounds: aBounds, item: anItem};// Shared ScriptsgotoDestScript := func() begin	if (curRendering = 0) then :TurnToPage(destPage);	else :TurnToPage(:FindPageByContent(kioskDest, 0, NIL));end;// Hintsbook.hints[1] := TRUE;book.hints[2] := TRUE;book.hints[3] := TRUE;book.hints[4] := TRUE;book.hints[5] := TRUE;book.hints[6] := TRUE;book.hints[7] := TRUE;book.hints[8] := TRUE;book.hints[9] := TRUE;book.hints[10] := TRUE;book.hints[11] := TRUE;book.hints[12] := TRUE;book.hints[13] := TRUE;book.hints[14] := TRUE;book.hints[15] := TRUE;book.hints[16] := TRUE;book.hints[17] := TRUE;book.hints[18] := TRUE;book.hints[19] := TRUE;book.hints[20] := TRUE;book.hints[21] := TRUE;book.hints[22] := TRUE;book.hints[23] := TRUE;book.hints[24] := StuffHex("201020224E2A8FA808BA90884008102030922A08409C521E709220498210200E40022299701321083098D21C20AA18227A099A134818221C1002000000B248A202A40A20C0022A2C5088002A02560049583401807002011CB2B220001004D2000000000000000000002000000000000000000000005000000000000000000000",'data);book.hints[25] := TRUE;book.hints[26] := StuffHex("081D7AB02A1EEB623032988C5A08133D6013709F5A17FB7E7AF63B3DE08860BE7002C15C7291011E78B9FA3D36AE183A7ABB2ADC7838321E6884593920B829EA40BF320561BEA7BE729A011D72FE0264E884218E7012031CF2BE24577205EA060008002010000000202400000000000000100000001300000000000000000000",'data);book.hints[27] := TRUE;book.hints[28] := TRUE;book.hints[29] := TRUE;book.hints[30] := TRUE;book.hints[31] := TRUE;book.hints[32] := TRUE;book.hints[33] := StuffHex("000060000218080800081000000010210000008420100300200000000000000000004004000000006010200000222000300000084804000040020000000011000200000000000000000800000010000A081000001000000460100000000000000000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[34] := TRUE;book.hints[35] := TRUE;book.hints[36] := TRUE;book.hints[37] := TRUE;book.hints[38] := TRUE;book.hints[39] := TRUE;book.hints[40] := TRUE;book.hints[41] := StuffHex("000020200803022000121000008010106000020240443200700820009000000800000210100000023010D27A20000002681302104010200A1002000000A20806208008000008200410100000001000020200000010100114A23B0422202800040000000000000000202000000000000000000000000000000000000000000000",'data);book.hints[42] := TRUE;book.hints[43] := TRUE;book.hints[44] := TRUE;book.hints[45] := StuffHex("0801200002100202001010004000000040020012004C120030020000000000080000010400080000000060000004002268000000401000100012000000200880008100080002000810080000000000000000000000000104A0AA0804000002040000000000000000000000000000000000000000000000020000000000000000",'data);book.hints[46] := TRUE;book.hints[47] := TRUE;book.hints[48] := TRUE;book.hints[49] := TRUE;book.hints[50] := TRUE;book.hints[51] := TRUE;book.hints[52] := TRUE;book.hints[53] := TRUE;book.hints[54] := TRUE;book.hints[55] := TRUE;book.hints[56] := StuffHex("201020002000A10010101000100000206202201A005C2814D01018010000000600000020401000025810E00A200A301068030A1040103012F0C640202212008A008000010012042800900000624600015800008830120018B20A0000001062000000000000000000000000000000000002000000000000000000000000000000",'data);book.hints[57] := TRUE;book.hints[58] := TRUE;book.hints[59] := TRUE;book.hints[60] := TRUE;book.hints[61] := TRUE;book.hints[62] := StuffHex("000060000220A0A020101000408030002002021040041038181800000010020040002014000008046820E2180226102230100A08400202185042000000800980002100002002042000100000300200000200001850120100F2820000000000000000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[63] := TRUE;book.hints[64] := StuffHex("000120000000A0000000100040000000400000020040110010000004000000000000010000002024008268000000100220002A11401000021002000000000000208000000410000000000000600000000010000000020114A0082004000000000000000000000000000400000000000000400000000000020000000000000000",'data);book.hints[65] := TRUE;book.hints[66] := StuffHex("000060000000A000000210004000010060020012004400000000000400000000000000000000010400086008020010203000AA104000201210120000101040A8000000000002000000000004000000080200000000020100B00A0002000000000000000000000000000400000000000000420000000000000000000000000000",'data);book.hints[67] := TRUE;book.hints[68] := StuffHex("0000A0000A10A02000101000400000304002200240400200300000060000400060020054000000043810E0000022200028202812481020260006000002000008400020020480002000180000401000421220000000000104B2682402000000040000000400000200002000000000000000000000000000200000000000000040",'data);book.hints[69] := TRUE;book.hints[70] := TRUE;book.hints[71] := TRUE;book.hints[72] := StuffHex("A00020002800A0280000100040200294420000120051380C982E800000000002000000084010290C400862800004100060002A10405020021046000800001000000520100000200400020103201608020004000060020104A0880200501000000000000000000000000000000000000000008000000000000000000000000000",'data);book.hints[73] := TRUE;book.hints[74] := TRUE;book.hints[75] := TRUE;book.hints[76] := StuffHex("000022000000A0200020100040001000400000220044000008080000000000000000000000000904400860001004100020102A10400000023002000000000000000002000082002000100088000000000000000000020100A0080014200010000000000000000000000000000000000000000000000004000000000000000000",'data);book.hints[77] := TRUE;book.hints[78] := TRUE;book.hints[79] := TRUE;book.hints[80] := TRUE;book.hints[81] := StuffHex("5000700000292128103012014200000460021002004E1418701000104000201200000134203008021008E00A22004020708A2A00401030111082000000960080208400030002042820900001220600084200000050100800B2061000600002002000000000000000000000200000100000000000200000000000000000000000",'data);book.hints[82] := TRUE;book.hints[83] := StuffHex("000020200218000000300000100000002000000010141000008200008000000020100001000000001000C210000804000002020000004040200020000080100000810080400000100020000000000000000000046010000482040000120008000000000000000000002000800000000000000000000000000000000000000000",'data);book.hints[84] := TRUE;book.hints[85] := StuffHex("1000A0244021202000301000400000006210201210543800100008838080000400001590423000006088B2102038002060101B1440102200200A0020009088024088000660B0000000000005C258002A0222008070100000220A14000203208C0000000000000000082000000000000000000000200000000000000000000000",'data);book.hints[86] := TRUE;book.hints[87] := StuffHex("283060200050A0200832100250080234201200104214B21C30083A088080201020020018821001023088BA1F2A2A080078BF0A014010201460021000008A088A4088100020CA2064001800004202001A381200814002001C328E0004200462000000000000000000002000000000020000000000000000000000000000000000",'data);book.hints[88] := TRUE;book.hints[89] := TRUE;book.hints[90] := TRUE;book.hints[91] := StuffHex("00006000200830283002008942000020000030120004180C100208240000001400000142221008140031801820220020100128110010000E0000002200800010620C0022040424602002010270400000422000804800001820862000480C02002000000000000800082000000000000200000000080000000000000000000000",'data);book.hints[92] := TRUE;book.hints[93] := StuffHex("1000600000032000402018004000000060002000000418081202080480800004000011101200010008180210220000203011021040000084600202200010000000800020040000202000000050400000020000004012001022002000000000080000000000000000082000000000000000000000000000000000000000000000",'data);book.hints[94] := TRUE;book.hints[95] := StuffHex("100060222841A060C8309800600012303231009142153B4012002808028200982012911A4218001668B8C23C301E1800309B2A1058102B04302200002090290040AB0212401C3664021A0125321C0048A002228170120314B2860400220406000002000010000000202000004000000000000000200000000000000000000000",'data);book.hints[96] := TRUE;book.hints[97] := StuffHex("0813623A2E08A1001012180102C000281088328040443020300030248000001E000081910210090C4039AA582002200078100A004000120B400A100000A00A8C00A01003068020040088008062548048A82820007202080430A03400400450002000000000000000002000000000000000000000000080000000000000000000",'data);book.hints[98] := TRUE;book.hints[99] := TRUE;book.hints[100] := TRUE;book.hints[101] := StuffHex("300070022840402000201000400000102230001100302B0012080000800800000000000A6000000240B09818200A00003001221042000040200280000012808040800006001880642000000520002040A00220097000001C60860400300400000000000000000000002000000000000000000000200000000000000000000000",'data);book.hints[102] := TRUE;book.hints[103] := StuffHex("1A0070200A40002000201000500012186230001210551B1410882084800000000008000B601000020098DA1A200A10007810220040000249200200020092898040810002449AA06412AA0005400000602202008D70020104F2862422320408040000000000000000202000000000000000000000200000000000000000000000",'data);book.hints[104] := TRUE;book.hints[105] := TRUE;book.hints[106] := StuffHex("0000600400200000002038004000000068002002004411143000088000002010000080D8000000046218C2022010082070130010401000102002000800802890400000000092042000100015000200202020010050100018A2001000000000800000000000000000000000000000000000000000200000000000000000000000",'data);book.hints[107] := TRUE;book.hints[108] := TRUE;book.hints[109] := StuffHex("00027220254309A000281044400000A6F028B202007632B010000028A00020066010110230100900420CA01C2008002030112A184A503088280A00000090800C00900001023880200010008000560000000A00185092001860063802600000000000000000000000002000000000000000000000000000000000000000000000",'data);book.hints[110] := TRUE;book.hints[111] := StuffHex("2080202200422000400010000000100088200000001862241000001880200000001040120002010000380018220000003000020040010000000200000000000000800000008800201010000802100040800020001002010422000002201102040010000000000000202000000000000000000000000000000000000000000000",'data);book.hints[112] := TRUE;book.hints[113] := StuffHex("2000202200020000000010000000000008000000001800040000200880200000000040100012010000380018000000002000020040010000000200000000000000800000008020240008000802000040800020001002000022000000001102040010000000000000002000000000000000000000000000000000000000000000",'data);book.hints[114] := TRUE;book.hints[115] := StuffHex("2004E02220130030003010085004000008020010021C1184508420008080000000005110021200020020901824020020708B1A0040000012200A00000082000200800000008220240018000122024048A01020004010000022982040408522040000000000000000082000000800000000000000200000000000000000000000",'data);book.hints[116] := TRUE;book.hints[117] := TRUE;book.hints[118] := TRUE;book.hints[119] := TRUE;book.hints[120] := TRUE;book.hints[121] := TRUE;book.hints[122] := StuffHex("500270000008B100002019085000003032000010040C8914108200000000200002078010400021003208501520803C003801180148002010201200002090002020822900200000280278020820020008001400806002001EA28C0A00000400280000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[123] := TRUE;book.hints[124] := StuffHex("000044002002802000160100004010205200009220440200100010000000000000020400100000003088401620803008180A0A10080020101000000000800100000021000058000000000000020200000000608040020110A0002000200000000000000000000000000000000000000000000000001000000000000000000000",'data);book.hints[125] := TRUE;book.hints[126] := StuffHex("108040002002806008341200200010205200001200400200100010000000000000020000100000003008401620901000180A8A18080020101000000000800100000021000008020020000000020800002000000040020114A2000000200000000000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[127] := TRUE;book.hints[128] := TRUE;book.hints[129] := TRUE;book.hints[130] := TRUE;book.hints[131] := TRUE;book.hints[132] := TRUE;book.hints[133] := TRUE;book.hints[134] := TRUE;book.hints[135] := TRUE;book.hints[136] := TRUE;book.hints[137] := TRUE;book.hints[138] := TRUE;book.hints[139] := TRUE;book.hints[140] := TRUE;book.hints[141] := TRUE;book.hints[142] := TRUE;book.hints[143] := TRUE;book.hints[144] := TRUE;book.hints[145] := TRUE;book.hints[146] := TRUE;book.hints[147] := TRUE;book.hints[148] := TRUE;book.hints[149] := TRUE;book.hints[150] := TRUE;book.hints[151] := TRUE;book.hints[152] := TRUE;book.hints[153] := TRUE;book.hints[154] := TRUE;book.hints[155] := TRUE;book.hints[156] := TRUE;book.hints[157] := TRUE;book.hints[158] := TRUE;book.hints[159] := TRUE;book.hints[160] := TRUE;book.hints[161] := TRUE;book.hints[162] := TRUE;book.hints[163] := TRUE;book.hints[164] := TRUE;book.hints[165] := TRUE;book.hints[166] := TRUE;book.hints[167] := TRUE;book.hints[168] := TRUE;book.hints[169] := TRUE;book.hints[170] := TRUE;book.hints[171] := TRUE;book.hints[172] := TRUE;book.hints[173] := TRUE;book.hints[174] := TRUE;book.hints[175] := TRUE;book.hints[176] := TRUE;book.hints[177] := TRUE;book.hints[178] := TRUE;book.hints[179] := TRUE;book.hints[180] := TRUE;book.hints[181] := TRUE;book.hints[182] := TRUE;book.hints[183] := StuffHex("000022000041208000221000400000048000001000001020000008888000001000001000000000040000A210200400002011000040002000400200002080080000010000000000200010011020000000000000006010001020840000000000000000000010000000002000000000000000000000000000000000000000000000",'data);book.hints[184] := TRUE;book.hints[185] := TRUE;book.hints[186] := TRUE;book.hints[187] := TRUE;book.hints[188] := TRUE;book.hints[189] := TRUE;book.hints[190] := TRUE;book.hints[191] := TRUE;book.hints[192] := TRUE;book.hints[193] := TRUE;book.hints[194] := TRUE;book.hints[195] := TRUE;book.hints[196] := StuffHex("20117A28008AA8005230380952201010601228361A549254300872888000200800008150E01220266098FA3C308E0A0270B13A02589801643802004840BA099300812A00208A20240018009C221200E8402020047014011572B60016720518202000000000000000002400000000002000400000000004020000000000000000",'data);book.hints[199] := StuffHex("2286662A397822B25032308450021104700032125A5AB92C581238CD8020001A6000019070100A0C72B9F23E228A251078AD2A5200D130AE200C30322012281360A7608794B2E6341008009C021F0238321C201530100114A2D61CAE429528060000000400000002082000010800000020000000000080000000000000000000",'data);book.hints[200] := TRUE;book.hints[201] := StuffHex("000820000000800040021005420012208000280002170220100020008000000020024040001800000008001C308E000020900A004800200C00920020000001000000000000922124002A000120040040008000000000010400860011200418202000000000000000002000000000000000000000000000000000000000000000",'data);book.hints[203] := StuffHex("101870200029A0200032300D22001020B000202002060360100030008000621020025010201000144000801C201A0C0050812A004862200000984000800000A0008200004011202C008800002000001A402004824210015470821004000442242000000000000000002000000000000000010000000000000000000000000000",'data);book.hints[205] := TRUE;book.hints[206] := TRUE;book.hints[207] := TRUE;book.hints[208] := StuffHex("0008202000009108001000011800000000000000001C00000000000000004002000000804000010818388000000200200080280000101040000000002010000840800001401020ED0000001000040020002000023002000060000000100000000000002000000000000000000000000000000000000000000000000000000000",'data);book.hints[209] := TRUE;book.hints[210] := StuffHex("00084220001180020000000000000000A20000100200202C12001085800000020000100080000000300880102202080010800A1000041000000000002000A00040800001068000100000000550460020000000064010080040002000000000000000000000000000002000000000000000000000200000000000000000000000",'data);book.hints[211] := TRUE;book.hints[212] := StuffHex("3020E0204830A02010203200700010107000A24704543804900020AC00000010000001CA00A80806503AF01D34120C2072011A002011404060C000580890001020B0000264D02266601A03056206003840A260207010011432A23600121B22060000000000000000002000000000000000000200000200000000000000000000",'data);book.hints[213] := TRUE;book.hints[214] := TRUE;book.hints[215] := StuffHex("100000200000A00000000000000000040000200000040808F000000400000000000200400000000400002000201000000000081000002206004000000000000000880000040001200000000460000000000000000000000020042000000002020000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[216] := TRUE;book.hints[217] := StuffHex("103120000010A24010220209622000204200201040041024D0081800000000062010011800100300502868082A06220000000800021832001050002020900080000300214810024430B00000605400180200200000020014B2820004401440002000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[218] := TRUE;book.hints[219] := StuffHex("500060000002B00000221B0040080000020000103410A304400000000010000E220180001202010430285209082400002820081940001002000200002000000000010825089800443200020000560010000000000002001230860200600000000000000000000000000000000000000000000000000000000000000000000000",'data);book.hints[220] := TRUE;book.hints[221] := TRUE;book.hints[222] := TRUE;book.hints[223] := TRUE;book.hints[224] := TRUE;book.hints[225] := TRUE;book.hints[226] := TRUE;book.hints[227] := TRUE;book.hints[228] := TRUE;book.hints[229] := StuffHex("0001600022209100503102005000000060800000142C98043020800C00004000000000040008080858009200222000007011280060080086000000000090120E400000020C8000442002030040008058020000046000001072003610200200080000000000000000000400000000000000000000000000000000000000000000",'data);book.hints[230] := TRUE;book.hints[231] := TRUE;book.hints[232] := TRUE;book.hints[233] := TRUE;book.hints[234] := TRUE;book.hints[235] := StuffHex("0200C0200A108020000020A04000001040080000002222003004000808000000000000140000000060001000201008001000000000100040000040100000090000800000000000200008001000020002402000004000000422201000001000020000000000008000000000000000000000000000000000000000000000000000",'data);book.hints[236] := TRUE;book.hints[237] := TRUE;book.hints[238] := TRUE;book.hints[239] := TRUE;book.hints[240] := TRUE;book.hints[241] := TRUE;book.hints[242] := TRUE;book.hints[243] := TRUE;book.hints[244] := TRUE;book.hints[245] := TRUE;book.hints[246] := TRUE;book.hints[247] := TRUE;book.hints[248] := TRUE;book.hints[249] := TRUE;book.hints[250] := TRUE;book.hints[251] := StuffHex("200060000022B080000230004080000452000212427418045000200800A00000000000180030000460389842208A082250012A100011008A000010000090080000A0000040812204000A010102020008000200807080001432803000001400000010000000000000000400000000000000000000200000000000000000000000",'data);book.hints[252] := TRUE;book.hints[253] := TRUE;book.hints[254] := TRUE;book.hints[255] := TRUE;// Text Styless0 := {	family: 'Geneva,	face: 0,	size: 9};AddArraySlot(book.styles, s0);s1 := {	family: 'espy /* Monaco */,	face: 0,	size: 10};AddArraySlot(book.styles, s1);s2 := {	family: 'NewYork,	face: 0,	size: 10};AddArraySlot(book.styles, s2);s3 := {	family: 'NewYork,	face: 1,	size: 18};AddArraySlot(book.styles, s3);s4 := {	family: 'NewYork,	face: 0,	size: 18};AddArraySlot(book.styles, s4);s5 := {	family: 'Geneva,	face: 0,	size: 10};AddArraySlot(book.styles, s5);s6 := {	family: 'Geneva,	face: 0,	size: 18};AddArraySlot(book.styles, s6);s7 := {	family: 'Geneva,	face: 1,	size: 18};AddArraySlot(book.styles, s7);s8 := {	family: 'Geneva,	face: 5,	size: 18};AddArraySlot(book.styles, s8);s9 := {	family: 'Geneva,	face: 0,	size: 9};AddArraySlot(book.styles, s9);s10 := {	family: 'Geneva,	face: 1,	size: 10};AddArraySlot(book.styles, s10);s11 := {	family: 'NewYork,	face: 1,	size: 10};AddArraySlot(book.styles, s11);s12 := {	family: 'Geneva,	face: 4,	size: 18};AddArraySlot(book.styles, s12);s13 := {	family: 'Geneva,	face: 1,	size: 14};AddArraySlot(book.styles, s13);s14 := {	family: 'Geneva,	face: 2,	size: 10};AddArraySlot(book.styles, s14);s15 := {	family: 'Geneva,	face: 1,	size: 9};AddArraySlot(book.styles, s15);s16 := {	family: 'NewYork,	face: 2,	size: 10};AddArraySlot(book.styles, s16);s17 := {	family: 'Geneva,	face: 2,	size: 9};AddArraySlot(book.styles, s17);s18 := {	family: 'NewYork,	face: 0,	size: 9};AddArraySlot(book.styles, s18);s19 := {	family: 'NewYork,	face: 5,	size: 10};AddArraySlot(book.styles, s19);// Contentsc1 := {	data: "Title Page",	layout: 2048};book.contents[0] := c1;c2 := {	data: "",	viewFont: s2,	layout: 32};book.contents[1] := c2;c3 := {	data: "Newton Book Maker(Bookmaker)User's Manual&Command Reference(Newton Book sample by Bob Ebert)",	styles: [19, s3, 12, s2, 36, s4, 34, s5, 1, s6],	layout: 4,	look: 3856,	viewJustify: 2};book.contents[2] := c3;c4 := {	data: "Contents",	styles: [8, s7, 1, s8],	layout: 39,	look: 1024};book.contents[3] := c4;c5 := {	data: "Overview",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[4] := c5;c6 := {	data: "Layout Issues",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[5] := c6;c7 := {	data: "Command Syntax",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[6] := c7;c8 := {	data: "Style",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[7] := c8;c9 := {	data: "Command Categories",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[8] := c9;c10 := {	data: "	Document Commands",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[9] := c10;c11 := {	data: "	Content Commands",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[10] := c11;c12 := {	data: "	Browser Commands",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[11] := c12;c13 := {	data: "	Page Layout Commands",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[12] := c13;c14 := {	data: "	Other Commands",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[13] := c14;c15 := {	data: "Flags	Document Flags	Content Flags",	styles: [6, s5, 31, s9],	scripts: ['buttonClickScript, gotoDestScript]};book.contents[14] := c15;c16 := {	data: "Examples",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[15] := c16;c17 := {	data: "	Example One",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[16] := c17;c18 := {	data: "	Example Two",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[17] := c18;c19 := {	data: "Bookmaker Script Writers Guide",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[18] := c19;c20 := {	data: "	Scripts Caution",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[19] := c20;c21 := {	data: "	Reserved Slot Names",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[20] := c21;c22 := {	data: "	Dynamic List Browsers",	viewFont: s9,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[21] := c22;c23 := {	data: "Useful Functions",	viewFont: s5,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[22] := c23;c24 := {	data: "Overview",	viewFont: s8,	layout: 32, 	name: "overview"};book.contents[23] := c24;c25 := {	data: "The Bookmaker tool creates digital books that can be read using the Newton Book Reader  built into the Newton ROM. Bookmaker uses the XTND translator system to take a word processor document with text and pictures and view system templates (which Bookmaker refers to as \u201c" & "forms\u201d" & ") and lays it out sequentially on pages. Although Bookmaker uses the fonts from the source, it makes its own decisions about flowing text and placing information to commands you mark up the text with. These commands (referred to as d"&"ot commands because of the \".\" that proceeds them) describe the document itself, each of the chapters or sections of the document, as well as individual stories and page layouts. The document is then opened with Bookmaker, which will create a book file which NTK compiles (along with any templates it may use) into a Newton book. This book can be then reviewed with Newton, and changes made by going back to the original marked-up document and reprocessing with Bookmaker and NTK. ",	viewFont: s2,	layout: 8192};book.contents[24] := c25;c26 := {	data: "Layout Issues",	viewFont: s8, 	name: "layout"};book.contents[25] := c26;c27 := {	data: "On future machines, pages may automatically reformat to take advantage of a larger screen size. Thus, if a title ends up on the bottom of a page, and the related story on the next page, you’re better off using the KeepWith flag on the story, rather than StartsPage flag on the title (flags are explained below). Both may give the same appearance on the smaller screens, but the latter may cause an unnecessary pagination on future Newtons. This emphasis is important in scripting as well. You should never hard"&"-code page numbers, since layout might be different on a larger screen. Instead, use Content-related methods.It’s helpful to set your word processor margins to 3.33 inches. This simulates the appearance on the Newton screen. Also don’t be concerned with screen margins. Although Bookmaker places text across the entire screen, on a Newton, there is \u201c" & "dead space\u201d" & " on all sides.Top of page titles are always 16 pixels high. If you use this entire height or exceed it, the title will run into the page contents"&" which if done correctly, can be an attractive effect.Do not hyphenate manually (by typing \u201c" & "- \u201d" & " where you want a line break). This may give the correct visual appearance on the MessagePad, but not on machines with larger screens. And it will prevent the user from searching for the word you hyphenated.Try to use tabs, rather than spaces, to align columns. (However, the Newton doesn’t support right-aligned tabs.) You’ll save space in your book if you set as few tab stops as possible (or set them only in"&" those stories that need them). Note that any story can only have one tab ruler – the first paragraph’s being the one that gets used.The Newton MessagePad has only New York and Geneva fonts (and only 9, 10, 12, 14, 18, 24, 48, etc.) If you want your book to lay out correctly, you’ll have to either use these fonts, or include your own with your book’s package. (The Newton also has a system font, but you should not use this because it is best for system elements like buttons and menus and does not print w"&"ell.)Special styles such as \u201c" & "small caps\u201d" & " or \u201c" & "all caps\u201d" & " that some word processor programs offer are not supported. However characters such as curly quotes and em dash are supported.The process of authoring a book is iterative. It’s hard to guess exactly where pages will fall. You’ll want to mark up your document, process it through Bookmaker, then proof it on a Newton.Remember that text is treated the same for purposes of layout, regardless of it being tagged as a title or subject, or as a story.",	styles: [214, s2, 8, s10, 32, s2, 10, s10, 2284, s2],	layout: 8192};book.contents[26] := c27;c28 := {	data: "Command Syntax",	viewFont: s8,	layout: 3, 	name: "syntax"};book.contents[27] := c28;c29 := {	data: "•",	viewFont: s2,	layout: 8193};book.contents[28] := c29;c30 := {	data: "Any line beginning with a period \u201c" & ".\u201d" & " is treated as a Bookmaker command. ",	styles: [34, s2, 1, s11, 38, s2],	layout: 8192};book.contents[29] := c30;c31 := {	data: "•",	viewFont: s2,	layout: 1};book.contents[30] := c31;c32 := {	data: "Comments can be added to a command line by preceding the comment with #. ",	styles: [70, s2, 1, s11, 3, s2],	layout: 8192};book.contents[31] := c32;c33 := {	data: "•",	viewFont: s2,	layout: 1};book.contents[32] := c33;c34 := {	data: "The backslash character  \u201c" & "\\\\\u201d" & " is the escape character:  if it is the first character on a line, it will be ignored, and the rest of the line taken as is. If it is the last character on a command line, the command will be continued to the next line. ",	styles: [26, s2, 1, s11, 223, s2],	layout: 8192};book.contents[33] := c34;c35 := {	data: "•",	viewFont: s2,	layout: 1};book.contents[34] := c35;c36 := {	data: "Commands and keywords are not case-sensitive. ",	viewFont: s2,	layout: 8192};book.contents[35] := c36;c37 := {	data: "•",	viewFont: s2,	layout: 1};book.contents[36] := c37;c38 := {	data: "Parameters shown in square brackets \u201c" & "[]\u201d" & " are optional. ",	styles: [35, s2, 1, s11, 1, s2, 2, s11, 17, s2],	layout: 8192};book.contents[37] := c38;c39 := {	data: "•",	viewFont: s2,	layout: 1};book.contents[38] := c39;c40 := {	data: "Names containing spaces (e.g. \"Futura Heavy\") must be enclosed in quote marks.",	viewFont: s2,	layout: 8192};book.contents[39] := c40;c41 := {	data: "Style",	styles: [5, s8, 1, s12], 	name: "style"};book.contents[40] := c41;c42 := {	data: "Document commands will generally be at the beginning, followed by any definitions of page layouts or styles. The bulk of the document is the original text, interspersed with commands that indicate the document’s structure. Note that not all commands are required; this is especially true for document commands. ",	styles: [312, s2, 1, s1],	layout: 8192};book.contents[41] := c42;c43 := {	data: "Command Categories",	viewFont: s8,	layout: 3, 	name: "commands"};book.contents[42] := c43;c44 := {	data: "There are five different categories of commands:",	viewFont: s2,	layout: 8195};book.contents[43] := c44;c45 := {	data: "•",	viewFont: s2,	layout: 8193,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[44] := c45;c46 := {	data: "Document commands - define the overall characteristics of the document, such as author, copyright information, assist functions, etc.",	styles: [8, s11, 126, s2],	layout: 8192,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[45] := c46;c47 := {	data: "•",	viewFont: s2,	layout: 1,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[46] := c47;c48 := {	data: "Content commands - define the various kinds (text, graphics, form, kiosk,etc.) of elements that the document contains.",	styles: [7, s11, 112, s2],	layout: 8192,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[47] := c48;c49 := {	data: "•",	viewFont: s2,	layout: 1,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[48] := c49;c50 := {	data: "Browser commands - defines a new browser pane.",	styles: [7, s11, 40, s2],	layout: 8192,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[49] := c50;c51 := {	data: "•",	viewFont: s2,	layout: 1,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[50] := c51;c52 := {	data: "Page Layout commands - defines the general layout characteristics (number of columns, sidebar) for the document.",	styles: [11, s11, 102, s2],	layout: 8192,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[51] := c52;c53 := {	data: "•",	viewFont: s2,	layout: 1,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[52] := c53;c54 := {	data: "Other commands - commands that make using Bookmaker easier.",	styles: [5, s11, 56, s2],	layout: 8192,	scripts: ['buttonClickScript, gotoDestScript]};book.contents[53] := c54;c55 := {	data: "Document Commands",	viewFont: s13,	layout: 3, 	name: "document_commands"};book.contents[54] := c55;c56 := {	data: " .assist",	styles: [1, s2, 8, s10],	layout: 8195};book.contents[55] := c56;c57 := {	data: "Define a template to used with the Newton’s Intelligent Assistant. All lines until the .endassist are taken as NewtonScript defining the task template or more commonly a reference to a task template defined in project data. The task templates are installed automatically by the book reader when a book is loaded on the Newton and removed when the book is removed. This command is repeated for each task template. (optional)	.assist	myTaskTemplate	.endassist",	styles: [87, s2, 10, s10, 328, s2, 37, s9, 1, s2],	layout: 8192};book.contents[56] := c57;c58 := {	data: " .endassist",	styles: [1, s2, 10, s10, 1, s2],	layout: 3};book.contents[57] := c58;c59 := {	data: "Terminates a block of NewtonScript defining a IA task template (begun with .assist).",	styles: [75, s2, 7, s10, 4, s2],	layout: 8192};book.contents[58] := c59;c60 := {	data: " .author author",	styles: [8, s10, 1, s5, 6, s14, 1, s2],	layout: 3};book.contents[59] := c60;c61 := {	data: "Define the book’s authors.  (optional)	.author Charles Dickens",	styles: [40, s2, 25, s9, 1, s2],	layout: 8192};book.contents[60] := c61;c62 := {	data: " .blurb",	styles: [1, s2, 6, s10, 1, s2],	layout: 3};book.contents[61] := c62;c63 := {	data: "The blurb contains text about the book. May be used for sales orientated information. The text begins on the line following the command and continues until the next dot command. (optional)	.blurb 	This is a great book that tells all about the life and times of that great author Charles Dickens. Please buy me!",	styles: [190, s2, 124, s9, 1, s2],	layout: 8192};book.contents[62] := c63;c64 := {	data: " .copyright copyright",	styles: [1, s5, 10, s10, 1, s5, 9, s14, 1, s5],	layout: 3};book.contents[63] := c64;c65 := {	data: "Define the current book’s copyright notice.  There can only be one such command. (optional)	.copyright (c) 1993 Apple Computer, Inc.",	styles: [93, s2, 42, s9, 1, s2],	layout: 8192};book.contents[64] := c65;c66 := {	data: " .expires date",	styles: [2, s5, 7, s10, 1, s5, 4, s14, 1, s5],	layout: 3};book.contents[65] := c66;c67 := {	data: "Defines the date on which the information contained in this book is no longer valid. There can only be one such command. (optional)	.expires July 7, 1993",	styles: [133, s2, 23, s9, 1, s2],	layout: 8192};book.contents[66] := c67;c68 := {	data: " .isbn isbn",	styles: [2, s5, 4, s10, 1, s5, 4, s14, 1, s5],	layout: 3};book.contents[67] := c68;c69 := {	data: "Defines the current book’s ISBN. The ISBN is used to uniquely identify the book between installations. Note that the ISBN should be no more than 15 characters. If you don’t have an ISBN, make up some unique 15-character string. There can only be one such command. (required)	.isbn 0-316-08275-9",	styles: [276, s2, 21, s9, 1, s2],	layout: 8192};book.contents[68] := c69;c70 := {	data: " .date date",	styles: [1, s5, 5, s10, 1, s5, 4, s14, 1, s5],	layout: 3};book.contents[69] := c70;c71 := {	data: "Define the publication date of the book. There can only be one such command. (optional)	.date July 11, 1994",	styles: [89, s2, 21, s9, 1, s2],	layout: 8192};book.contents[70] := c71;c72 := {	data: " .key keyword1 keyword2 ...",	styles: [1, s5, 4, s10, 1, s5, 21, s14, 1, s5],	layout: 3};book.contents[71] := c72;c73 := {	data: "Define a list of keywords which describe the book to readers. These keywords can be searched on and are remembered by a future book reader even when a book (card) has been removed. There can only be one such command. (optional)	.key biography author dickens England writer novelist",	styles: [229, s2, 55, s9, 1, s2],	layout: 8192};book.contents[72] := c73;c74 := {	data: " .publisher publisher",	styles: [1, s5, 10, s10, 1, s5, 9, s14, 1, s5],	layout: 3};book.contents[73] := c74;c75 := {	data: "Define the current book’s publisher. There can only be one such command. (optional)	.publisher Apple Computer, Inc.",	styles: [85, s2, 33, s9, 1, s2],	layout: 8192};book.contents[74] := c75;c76 := {	data: " .shortTitle title",	styles: [1, s5, 11, s10, 1, s5, 5, s14, 1, s5],	layout: 3};book.contents[75] := c76;c77 := {	data: "Define the book’s short title which is used for its name in the Extras drawer. There can only be one such command (optional). 	.shorttitle Dickens",	styles: [128, s2, 21, s9, 1, s2],	layout: 8192};book.contents[76] := c77;c78 := {	data: " .title title",	styles: [1, s5, 6, s10, 1, s5, 5, s14, 1, s5],	layout: 3};book.contents[77] := c78;c79 := {	data: "Define the book’s title. There can only be one such command.  (required)	.title All About Dickens",	styles: [74, s2, 26, s9, 1, s2],	layout: 8192};book.contents[78] := c79;c80 := {	data: "Content Commands",	viewFont: s13,	layout: 3, 	name: "content_commands"};book.contents[79] := c80;c81 := {	data: " .attribute name : value  [, name : value ]",	styles: [2, s5, 9, s10, 1, s5, 5, s14, 2, s5, 5, s14, 5, s5, 5, s14, 2, s5, 6, s14, 2, s5],	layout: 8195};book.contents[80] := c81;c82 := {	data: "Allows additional information to be defined for each Content. This command results in a slot being created in the Content frame that can be used by scripts or by the intelligent assistant. For example a Content describing a place might want an attribute containing its telephone number or address.	.attribute phone: \"602-555-1212\"	.attribute type: 4, color: \"blue\"",	styles: [299, s2, 69, s9, 1, s2],	layout: 8192};book.contents[81] := c82;c83 := {	data: " .chapter flags  [layout=p ] [name=n ] [goto=d ] [browser=l ]",	styles: [1, s5, 8, s10, 1, s5, 5, s14, 10, s5, 2, s14, 8, s5, 2, s14, 8, s5, 2, s14, 11, s5, 2, s14, 2, s5],	layout: 3};book.contents[82] := c83;c84 := {	data: "Synonym for a subject on level 1. See .subject below.	.chapter StartsPage layout=Single name=chapter1	Introduction to Mud Wallowing",	styles: [38, s2, 8, s5, 9, s2, 49, s9, 30, s15, 1, s9, 1, s2],	layout: 8192};book.contents[83] := c84;c85 := {	data: " .form flags  height=h  width=w  [name=n ] [layout=p ] [browser=l ]",	styles: [1, s5, 5, s10, 1, s5, 5, s14, 9, s5, 2, s14, 7, s5, 2, s14, 7, s5, 2, s14, 10, s5, 2, s14, 11, s5, 2, s14, 2, s5],	layout: 3};book.contents[84] := c85;c86 := {	data: "Reserves space for a form or view on the page. Following the form command is usually a reference to the proto template or layout defined in NTK.  Name adds a slot of type 'name and data equal to the string. Note that the height and width are required and can be gotten by opening a browser on the particular view and looking at the viewBounds of the topmost view.	.form name=rect height=100 width=50  	layout_CoolProto",	styles: [365, s2, 57, s9, 1, s2],	layout: 8192};book.contents[85] := c86;c87 := {	data: " .kiosk name=n  [layout=p ]",	styles: [1, s5, 6, s10, 6, s5, 1, s14, 10, s5, 2, s14, 2, s5],	layout: 3};book.contents[86] := c87;c88 := {	data: "Indicates a new named kiosk page (or menu page). Any content commands (story, picture, etc) following the .kiosk which specify a a place to turn to (with goto=), become buttons in the kiosk page. Any content commands without goto are simply labels or pictures. Note that all contents in kiosk take on the name of the kiosk.	.kiosk name=aKiosk layout=myKiosk	.story	Tap on a subject...	.story goto=subj1	Car Rental Companies	.story goto=subj2	Airlines	.endkioskNote: You should create a layout to be "&"used with kiosk pages. In this layout be sure to include the Kiosk flag. In this way Book Reader can automatically provide a means for your reader to return to the nearest kiosk via the bookmarks window.",	styles: [154, s2, 5, s16, 166, s2, 43, s9, 20, s15, 20, s9, 21, s15, 20, s9, 9, s15, 12, s9, 1, s2, 5, s11, 239, s2],	layout: 8192};book.contents[87] := c88;c89 := {	data: " .endkiosk",	styles: [1, s5, 10, s10],	layout: 3};book.contents[88] := c89;c90 := {	data: "Ends a kiosk (begun with .kiosk). Required for kiosks.",	styles: [25, s2, 6, s10, 25, s2],	layout: 8192};book.contents[89] := c90;c91 := {	data: " .mark",	styles: [1, s5, 6, s10],	layout: 3};book.contents[90] := c91;c92 := {	data: "Marks the current content for reference by a subsequent usemark. In this way one Content (a form for example) can quickly refer to another without having to search for it. For example you might want the attributes from one Content to be accessible to another. You can only have one Content marked at a time.	.story	The Smith Company	.attribute sales: 126000, profits: 10000	.mark",	styles: [56, s2, 7, s10, 244, s2, 2, s11, 8, s9, 18, s15, 50, s9, 1, s11],	layout: 8192};book.contents[91] := c92;c93 := {	data: " .usemark",	styles: [1, s5, 8, s10, 1, s5],	layout: 3};book.contents[92] := c93;c94 := {	data: "Adds to the current content a slot named related which contains a reference to a content that was \u201c" & "marked\u201d" & " with the mark command.	.form height=100 width=240	layout_FinancialForm	.usemark",	styles: [41, s2, 7, s5, 68, s2, 4, s5, 10, s2, 1, s11, 60, s9, 1, s11],	layout: 8192};book.contents[93] := c94;c95 := {	data: " .picture [\"path \"] [name=n ] [goto=d ] [browser=l ] [width=w ] [height=h ] flags",	styles: [1, s5, 8, s10, 3, s5, 5, s14, 9, s5, 2, s14, 8, s5, 2, s14, 11, s5, 2, s14, 9, s5, 2, s14, 10, s5, 2, s14, 2, s5, 5, s14, 1, s5],	layout: 3};book.contents[94] := c95;c96 := {	data: "Specifies that the following PICT be used as a Content. A path to an external PICT file may also be specified. Name adds a slot of type 'name and data equal to the string. Goto specifies a content to turn to when the picture is tapped by the user. An optional width or height (in pixels) can be specified.	.picture \"myDisk:proj:portrait\" CenteredWhen Bookmaker lays out pages, it tries to give the maximum amount of space possible to pictures so users are not always forced to scroll. Often this means that"&" pictures are placed on the next page instead of staying with a related subject or story. To avoid this the author can either use the KeepWith flag to keep the picture with the previous content or specify a smaller size for the picture using the width and height commands.Note that you can’t mix text and graphics within the same Content.",	styles: [307, s2, 42, s9, 295, s2, 8, s10, 200, s2],	layout: 8192};book.contents[95] := c96;c97 := {	data: " .script [event ]",	styles: [1, s5, 7, s10, 2, s5, 6, s14, 2, s5],	layout: 3};book.contents[96] := c97;c98 := {	data: "Attaches a NewtonScript to the current Content (the current content is any previous chapter, map, picture, story, etc). Scripts may also be entered at the beginning of the document (before any content or layout commands) in which case their scope will be global (referred to as book scripts) and also may be entered following a layout command (referred to as page scripts). Event is what triggers the script (the default is buttonClickScript, other examples might include viewDrawScript). All lines until the"&" .endscript are taken as the script.	.script viewClickScript		playsound(click);		:buttonClickScript();	.endscript",	styles: [511, s2, 10, s10, 27, s2, 81, s9, 1, s2],	layout: 8192};book.contents[97] := c98;c99 := {	data: " .endscript",	styles: [1, s5, 11, s10],	layout: 3};book.contents[98] := c99;c100 := {	data: "Terminates a NewtonScript block (begun with .script).",	styles: [44, s2, 7, s10, 4, s2],	layout: 8192};book.contents[99] := c100;c101 := {	data: " .story flags  [layout=p ] [name=n ] [goto=d ] [browser=l ]",	styles: [1, s5, 6, s10, 1, s5, 6, s14, 9, s5, 2, s14, 8, s5, 2, s14, 8, s5, 2, s14, 11, s5, 2, s14, 2, s5],	layout: 3};book.contents[100] := c101;c102 := {	data: "Indicates a new Content within the previous \u201c" & "Subject.\u201d" & " The Content will be one level deeper. Parameters are the same as the .subject command. Name adds a slot of type 'name and data equal to the string. Goto specifies a content to turn to when this content is tapped by the user.	.story MainColumn layout=TwoColumn",	styles: [281, s2, 36, s9, 1, s2],	layout: 8192};book.contents[101] := c102;c103 := {	data: " .subject level flags  [layout=p ] [name=n ] [goto=d ] [browser=l ]",	styles: [1, s5, 8, s10, 1, s5, 11, s14, 10, s5, 2, s14, 8, s5, 2, s14, 8, s5, 2, s14, 11, s5, 2, s14, 2, s5],	layout: 3};book.contents[102] := c103;c104 := {	data: "Indicate a new Content at level  (1 is a chapter, etc.). The following text or graphic is the current Content until the next  defining command (chapter, map, picture, story, etc). Subject text will appear in the Browser. Name adds a slot of type 'name and data equal to the string. Goto specifies a content to turn to when this content is tapped by the user. See Page Layout Commands, below for details on the layout and styles options.	.subject 2 Reverse StartsPage layout=TwoColumn	Raising Pigs for Fun an"&"d Profit",	styles: [438, s2, 48, s9, 33, s15, 1, s1],	layout: 8192};book.contents[103] := c104;c105 := {	data: "Browser Commands",	viewFont: s13,	layout: 3, 	name: "browser_commands"};book.contents[104] := c105;c106 := {	data: " .browser name type",	styles: [1, s5, 8, s10, 1, s5, 4, s14, 1, s5, 4, s14, 1, s5],	layout: 8195};book.contents[105] := c106;c107 := {	data: "Creates a new browser pane in the browser. Name is the name as it will appear in the browser menu and is also used to match with contents that have the browser= set. Type can be either list or form. If the type is form, following the command is a form definition that is the browser pane. ViewBounds must be limited to the size of the browser pane.	.browser Hotels list",	styles: [152, s2, 8, s16, 25, s2, 4, s16, 4, s2, 4, s16, 153, s2, 22, s9, 1, s2],	layout: 8192};book.contents[106] := c107;c108 := {	data: "Page Layout Commands",	viewFont: s13,	layout: 3, 	name: "page_commands"};book.contents[107] := c108;c109 := {	data: " .layout name width flags  [width flags]...",	styles: [8, s11, 1, s2, 16, s16, 3, s2, 11, s16, 5, s2],	layout: 8195};book.contents[108] := c109;c110 := {	data: "Creates a named page layout with a number of columns whose widths are specified. 	.layout twoColumn 6 6 Edges Defines a page layout (which is referred to as \u201c" & "twoColumn\u201d" & ") with two equal main columns, with a box around it.	.layout annotated 4 Sidebar 8Defines a page layout (which is named \u201c" & "annotated\u201d" & ") with two columns. The left column is four grid units or 1/3 of the page, and is a sidebar. The right column is 8 grid units or 2/3 the width of the page, and is the main column.If a .script follows a"&" .layout command, the script is attached to the layout. In this manner a script can be used to handle the drawing of a special background or click event not handled by Content.If a specific layout is not specified in a content command, the last defined one is used. Thus it’s a good idea to make your default layout, the last one you define.",	styles: [83, s2, 30, s9, 113, s2, 31, s9, 237, s2, 6, s10, 11, s2, 7, s10, 337, s2],	layout: 8192};book.contents[109] := c110;c111 := {	data: " .header",	styles: [2, s2, 6, s11, 1, s2],	layout: 3};book.contents[110] := c111;c112 := {	data: "Assigns to the previous layout command a centered text header which will be displayed at the top of every page that uses the layout. The font and style specified are used.",	viewFont: s2,	layout: 8192};book.contents[111] := c112;c113 := {	data: " .pictheader",	viewFont: s11,	layout: 3};book.contents[112] := c113;c114 := {	data: "Assigns to the previous layout command a picture header which will be displayed at the top of every page that uses the layout. ",	viewFont: s2,	layout: 8192};book.contents[113] := c114;c115 := {	data: " .running type [pageBottom] flags",	styles: [9, s11, 1, s2, 4, s16, 2, s2, 10, s16, 2, s2, 5, s16, 1, s2],	layout: 3};book.contents[114] := c115;c116 := {	data: "Assigns to the previous layout command a content of type picture, story or form and automatically places that content on every page. The content can appear at the top of the page (below the header if applicable), and/or at the bottom of the page if the pageBottom flag is used. The content type is used the same way as its corresponding content command (.story, .picture, .form).	.layout full 12	.running form height=100 width=200 layout_CoolHead",	styles: [354, s2, 23, s5, 4, s2, 69, s9, 1, s2],	layout: 8192};book.contents[115] := c116;c117 := {	data: "Other Commands",	viewFont: s13,	layout: 3, 	name: "other_commands"};book.contents[116] := c117;c118 := {	data: " .# text",	styles: [3, s11, 1, s2, 4, s16, 1, s2],	layout: 8195};book.contents[117] := c118;c119 := {	data: "Allows a comment line which does not appear in the output.	.# This is a comment",	styles: [60, s2, 22, s9, 1, s2],	layout: 8192};book.contents[118] := c119;c120 := {	data: " .chain \"filename \"",	styles: [7, s11, 2, s2, 9, s16, 2, s2],	layout: 3};book.contents[119] := c120;c121 := {	data: "Chains the processing of the current file to another. The previous file is closed.",	viewFont: s2,	layout: 8192};book.contents[120] := c121;c122 := {	data: " .index word",	styles: [7, s11, 1, s2, 4, s16, 1, s2],	layout: 3};book.contents[121] := c122;c123 := {	data: "Creates an alphabetic index and adds word to it. With each index entry is kept the content in which the .index command was used. When Bookmaker processes the file, it outputs an array of contents in alphabetic order and stores it with the slot name alphaIndex in bookdata (see Useful Functions, below). A second array is also output with the slot name subIndex which for each letter of the alphabet, an array index into alphaIndex for that letter.	.index Apple Computer",	styles: [449, s2, 23, s9, 1, s2],	layout: 8192};book.contents[122] := c123;c124 := {	data: " .preamble",	viewFont: s11,	layout: 3};book.contents[123] := c124;c125 := {	data: "Allows text to be output into the Bookmaker output file. The text is placed before any definitions of content. The .endpreamble is optional.	.preamble	book.data.myStuff := specialProto;	.endpreamble",	styles: [142, s2, 61, s9, 1, s2],	layout: 8192};book.contents[124] := c125;c126 := {	data: " .postamble",	viewFont: s11,	layout: 3};book.contents[125] := c126;c127 := {	data: "Allows text to be output into the Bookmaker output file. The text is placed after all definitions of content and internal book frames. The .endpostamble is optional.	.postamble	book.data.specialContent := c1;	.endpostamble",	styles: [167, s2, 60, s9, 1, s1],	layout: 8192};book.contents[126] := c127;c128 := {	data: "Flags",	viewFont: s8,	layout: 3, 	name: "flags"};book.contents[127] := c128;c129 := {	data: "Flags are used to specify various layout and visual options.",	viewFont: s2,	layout: 8195};book.contents[128] := c129;c130 := {	data: "Document flags",	viewFont: s13,	layout: 3, 	name: "document_flags"};book.contents[129] := c130;c131 := {	data: "NoReLayout",	styles: [10, s11, 1, s2],	layout: 8195};book.contents[130] := c131;c132 := {	data: "Keep everything the same even if screen size changes.",	viewFont: s2,	layout: 8192};book.contents[131] := c132;c133 := {	data: "RightToLeft",	styles: [11, s11, 1, s2],	layout: 3};book.contents[132] := c133;c134 := {	data: "The rightmost column is used before the left for support of languages that run right to left.",	viewFont: s2,	layout: 8192};book.contents[133] := c134;c135 := {	data: "Content flags",	viewFont: s13,	layout: 3, 	name: "content_flags"};book.contents[134] := c135;c136 := {	data: "Main",	styles: [4, s10, 1, s2],	layout: 8195};book.contents[135] := c136;c137 := {	data: "Display in a main column (this is the default).",	viewFont: s2,	layout: 8192};book.contents[136] := c137;c138 := {	data: "Sidebar",	styles: [7, s10, 1, s2],	layout: 3};book.contents[137] := c138;c139 := {	data: "Display in the sidebar column.",	viewFont: s2,	layout: 8192};book.contents[138] := c139;c140 := {	data: "ToEdge",	styles: [6, s10, 1, s2],	layout: 3};book.contents[139] := c140;c141 := {	data: "Spills out (from its column) to the edge of the page.",	viewFont: s2,	layout: 8192};book.contents[140] := c141;c142 := {	data: "Centered",	styles: [8, s10, 1, s2],	layout: 3};book.contents[141] := c142;c143 := {	data: "Centered within column.",	viewFont: s2,	layout: 8192};book.contents[142] := c143;c144 := {	data: "ForceScroll",	styles: [11, s10, 1, s2],	layout: 3};book.contents[143] := c144;c145 := {	data: "Entire page will scroll if Content is large enough.",	viewFont: s2,	layout: 8192};book.contents[144] := c145;c146 := {	data: "NeverBreak",	styles: [10, s10, 1, s2],	layout: 3};book.contents[145] := c146;c147 := {	data: "Avoid splitting text between pages.",	viewFont: s2,	layout: 8192};book.contents[146] := c147;c148 := {	data: "StartsPage",	styles: [10, s10, 1, s2],	layout: 3};book.contents[147] := c148;c149 := {	data: "Always put on top of new page.",	viewFont: s2,	layout: 8192};book.contents[148] := c149;c150 := {	data: "PageBottom",	styles: [10, s10, 1, s2],	layout: 3};book.contents[149] := c150;c151 := {	data: "Always put on the bottom of a page.",	viewFont: s2,	layout: 8192};book.contents[150] := c151;c152 := {	data: "PageMiddle",	styles: [10, s10, 1, s2],	layout: 3};book.contents[151] := c152;c153 := {	data: "Put in the vertical middle of the page.",	viewFont: s2,	layout: 8192};book.contents[152] := c153;c154 := {	data: "WrapAround ",	styles: [10, s10, 2, s2],	layout: 3};book.contents[153] := c154;c155 := {	data: "Used for callout or Illustration",	viewFont: s2,	layout: 8192};book.contents[154] := c155;c156 := {	data: "AlignTop",	styles: [8, s10, 1, s2],	layout: 3};book.contents[155] := c156;c157 := {	data: "Align sidebar with top of previous Content.",	viewFont: s2,	layout: 8192};book.contents[156] := c157;c158 := {	data: "AlignBottom",	styles: [11, s10, 1, s2],	layout: 3};book.contents[157] := c158;c159 := {	data: "Align sidebar with bottom of previous Content.",	viewFont: s2,	layout: 8192};book.contents[158] := c159;c160 := {	data: "AlignCenter",	styles: [11, s10, 1, s2],	layout: 3};book.contents[159] := c160;c161 := {	data: "Align sidebar with center of previous Content.",	viewFont: s2,	layout: 8192};book.contents[160] := c161;c162 := {	data: "BrowserOnly",	styles: [11, s10, 1, s2],	layout: 3};book.contents[161] := c162;c163 := {	data: "Content will not be drawn on the page.",	viewFont: s2,	layout: 8192};book.contents[162] := c163;c164 := {	data: "Overlay",	styles: [7, s10, 1, s2],	layout: 3};book.contents[163] := c164;c165 := {	data: "Overlays previous Content without forcing a wrap",	viewFont: s2,	layout: 8192};book.contents[164] := c165;c166 := {	data: "KeepWith",	styles: [8, s10, 1, s2],	layout: 3};book.contents[165] := c166;c167 := {	data: "Keep this Content with the previous.",	viewFont: s2,	layout: 8192};book.contents[166] := c167;c168 := {	data: "NoTitle",	styles: [7, s10, 1, s2],	layout: 3};book.contents[167] := c168;c169 := {	data: "Layout flag indicating that space should not be reserved for a running title.",	viewFont: s2,	layout: 8192};book.contents[168] := c169;c170 := {	data: "TopEdge",	styles: [7, s10, 1, s2],	layout: 3};book.contents[169] := c170;c171 := {	data: "Draw line above.",	viewFont: s2,	layout: 8192};book.contents[170] := c171;c172 := {	data: "LeftEdge",	styles: [8, s10, 1, s2],	layout: 3};book.contents[171] := c172;c173 := {	data: "Draw line left edge.",	viewFont: s2,	layout: 8192};book.contents[172] := c173;c174 := {	data: "BottomEdge ",	styles: [10, s10, 2, s2],	layout: 3};book.contents[173] := c174;c175 := {	data: "Draw line bottom edge.",	viewFont: s2,	layout: 8192};book.contents[174] := c175;c176 := {	data: "RightEdge",	styles: [9, s10, 1, s2],	layout: 3};book.contents[175] := c176;c177 := {	data: "Draw line right edge.",	viewFont: s2,	layout: 8192};book.contents[176] := c177;c178 := {	data: "Edges",	styles: [5, s10, 1, s2],	layout: 3};book.contents[177] := c178;c179 := {	data: "Draw box around.",	viewFont: s2,	layout: 8192};book.contents[178] := c179;c180 := {	data: "Round",	styles: [5, s10, 1, s2],	layout: 3};book.contents[179] := c180;c181 := {	data: "Corners are rounded.",	viewFont: s2,	layout: 8192};book.contents[180] := c181;c182 := {	data: "Reverse",	styles: [7, s10, 1, s2],	layout: 3};book.contents[181] := c182;c183 := {	data: "Draw white on black.",	viewFont: s2,	layout: 8192};book.contents[182] := c183;c184 := {	data: "On the same line (but following) any of the above edges commands, the author can set the width of the line to be used with the following command: edgewidth=numberWhere number is the width in pixels.",	viewFont: s2,	layout: 3};book.contents[183] := c184;c185 := {	data: "FullColumn",	styles: [10, s10, 1, s2],	layout: 3};book.contents[184] := c185;c186 := {	data: "Can be added to the invert or any edge command to extend to the full width of the column.",	viewFont: s2,	layout: 8192};book.contents[185] := c186;c187 := {	data: "Kiosk ",	styles: [5, s10, 2, s2],	layout: 3};book.contents[186] := c187;c188 := {	data: "This Page Layout is a kiosk page layout",	viewFont: s2,	layout: 8192};book.contents[187] := c188;c189 := {	data: "NoPage ",	styles: [6, s10, 2, s2],	layout: 3};book.contents[188] := c189;c190 := {	data: "This Content will not display on a page (although might be displayed via a script.)",	viewFont: s2,	layout: 8192};book.contents[189] := c190;c191 := {	data: "NoScroller",	styles: [10, s10, 1, s2],	layout: 3};book.contents[190] := c191;c192 := {	data: "Inhibits  a scroll control from appearing in graphics larger than the column.",	viewFont: s2,	layout: 8192};book.contents[191] := c192;c193 := {	data: "HalfBrowser",	styles: [11, s10, 1, s2],	layout: 3};book.contents[192] := c193;c194 := {	data: "Display this subject in a half-width browser column. Note that siblings of this subject should have the flag as well.",	viewFont: s2,	layout: 8192};book.contents[193] := c194;c195 := {	data: "Book Examples",	viewFont: s8, 	name: "examples"};book.contents[194] := c195;c196 := {	data: "Example One",	viewFont: s13, 	name: "example_1"};book.contents[195] := c196;c197 := {	data: "This first example shows some of the basic steps in creating a book. The book is defined first followed by layouts, a kiosk page and finally the content. .# Document Commands .# First the Book’s title .title The Planets .# Next the name we want in the extras drawer .shorttitle Planets .author Brad Zeus .# The ISBN needs to be unique .isbn ZeusBook1 .date 10/5/93 .publisher Zeus Publishing, Inc. .copyright (c)1993 Zeus Publishing, Inc. .# Layout Commands .# We’re naming the layout: menu. It "&"uses all twelve columns. Note also the kiosk flag. .layout menu 12 Kiosk .# Now a second layout with a text header.  .layout full 12 .header The Planets .# Kiosk Pages .# For our book we want to start with a menu of choices of where to go in the book. .# So we define a kiosk. It’s name is contents and it uses the menu layout. .kiosk name=Contents layout=menu .# The text \u201c" & "Earth\u201d" & " when pressed will goto the content named earth .story goto=earth Earth  .story goto=mars Mars .story goto=jupiter"&" Jupiter .endkiosk .# Content .# This first subject will be shown in the browser on the first level. It have been given a name so that the goto in the kiosk can find it. We’ve also indicated that we want this content to start a new page. .subject 1 name=earth StartsPage Earth, The living planet .picture Centered",	styles: [154, s2, 2, s9, 2, s15, 1, s9, 18, s17, 3, s15, 1, s9, 22, s17, 1, s9, 7, s15, 13, s9, 3, s15, 1, s9, 42, s17, 1, s9, 12, s15, 9, s9, 8, s15, 11, s9, 4, s15, 27, s17, 1, s9, 6, s15, 11, s9, 6, s15, 9, s9, 11, s15, 23, s9, 11, s15, 32, s9, 3, s15, 1, s9, 15, s17, 1, s9, 3, s15, 1, s9, 84, s17, 1, s9, 8, s15, 15, s9, 4, s15, 39, s17, 2, s9, 8, s15, 9, s9, 8, s15, 1, s9, 13, s18, 1, s9, 3, s15, 1, s9, 11, s17, 1, s9, 3, s15, 1, s9, 79, s17, 2, s9, 3, s15, 1, s9, 73, s17, 7, s15, 27, s9, 3, s15, 1, s9, 63, s17, 1, s9, 7, s15, 12, s9, 8, s18, 7, s15, 11, s9, 6, s18, 7, s15, 14, s9, 9, s18, 10, s15, 2, s9, 3, s15, 1, s9, 7, s17, 1, s9, 3, s15, 1, s9, 205, s17, 9, s15, 25, s9, 26, s18, 9, s15, 10, s9],	layout: 8192};book.contents[196] := c197;c198 := {	data: GetNamedResource("PICT", "5700", 'picture),	scripts: ['buttonClickScript, func ()beginPlaySound(ROM_click);:ShowStoryCard('card, "earth", {left: 60, top: 20, right: 200, bottom: 100});end]};book.contents[197] := c198;c199 := {	data: "Diameter	12,756 kmMass	1Density	5.52Day	23h 56m",	styles: [51, s2, 1, s9],	layout: 16384,	tabs: [63],	card: "earth"};book.contents[198] := c199;c200 := {	data: " .script .# This script says to find the story with the card slot containing the string \u201c" & "earth\u201d" & " and display it in a story card.  PlaySound(ROM_click);  :ShowStoryCard('card, \"earth\", {left: 60, top: 20, right: 200, bottom: 100}); .endscript .# Introduction will appear in the brower only under the subject Earth defined above. .subject 2 BrowserOnly Introduction .story layout=full	Naturally, scientists know more about our beautiful, temperate world than any other in the universes. They are on hand"&" to experiment directly, to interpret the evidence and to draw conclusions.From the available evidence, planetary scientists are now reasonably certain that at the centre of Earth there is a nickel-iron core. This is divided into two parts: a metallic centre 2.500 kilometres in diameter and, surrounding it, a layer where the iron and nickel are in a liquid state. This liquid section is about 2,200 kilometres thick. .# This is the story card text we want popped up when the user taps the Earth picture. "&"Note the NoPage flag. .story NoPage .attribute card: \"earth\"Diameter	12,756 kmMass	1Density	5.52Day	23h 56m .subject 1 name=mars StartsPageMars, The Red Planet .subject 1 name=jupiter StartsPageJupiter, The Big Planet with the Spot Thing",	styles: [2, s11, 1, s2, 88, s16, 8, s15, 1, s9, 3, s15, 1, s9, 116, s17, 104, s9, 11, s15, 2, s9, 3, s15, 1, s9, 82, s17, 1, s9, 9, s15, 15, s9, 14, s18, 7, s15, 13, s9, 540, s18, 1, s9, 3, s15, 1, s9, 106, s17, 7, s15, 8, s9, 11, s15, 15, s9, 51, s18, 3, s9, 7, s15, 24, s9, 11, s18],	tabs: [18]};book.contents[199] := c200;c201 := {	data: "Example Two",	viewFont: s13, 	name: "example_2"};book.contents[200] := c201;c202 := {	data: "This example shows how to use a layout command and Bookmaker flags to have text and graphics side by side. .title Bookmaker Examples .shortTitle Examples .isbn example-1 .layout sideby 6 6 sidebar .subject toEdgeLayout Examples .storyAs you can see, Bookmaker supports text next to graphics. .picture sidebar alignCenter",	styles: [108, s2, 7, s15, 20, s9, 12, s15, 10, s9, 6, s15, 12, s9, 8, s15, 21, s9, 9, s15, 8, s9, 16, s4, 7, s15, 1, s9, 58, s18, 9, s15, 21, s9],	layout: 8192};book.contents[201] := c202;c203 := {	data: GetNamedResource("PICT", "7214", 'picture)};book.contents[202] := c203;c204 := {	data: " .story toEdgeIt’s all done with layout flags (this is the secret to doing almost anything with Newton Book Maker). The idea is to use a 2-column layout, but by frequent use of the toEdge flag, give most Contents the entire width of the page. Leave this flag off on the left column text, and use sidebar and whatever alignment is appropriate on the picture. .# end of exampleAfter processing by Bookmaker and NTK here’s the result:",	styles: [7, s15, 8, s9, 344, s18, 3, s15, 17, s9, 57, s2]};book.contents[203] := c204;c205 := {	data: GetNamedResource("PICT", "280", 'picture),	layout: 4};book.contents[204] := c205;c206 := {	data: "",	viewFont: s19};book.contents[205] := c206;c207 := {	data: "Bookmaker Script Writers Guide",	viewFont: s2, 	name: "writers_guide"};book.contents[206] := c207;c208 := {	data: "Scripts Caution",	viewFont: s13, 	name: "scripts_caution"};book.contents[207] := c208;c209 := {	data: "Do not use viewSetupFormScript at the book or page level. Instead, use viewSetupFormDoneScript, which will be called each time a page is turned to (except when printing).",	styles: [11, s2, 19, s5, 41, s2, 23, s5, 78, s2],	layout: 8192};book.contents[208] := c209;c210 := {	data: "Reserved Slot Names:",	viewFont: s13, 	name: "reserved_names"};book.contents[209] := c210;c211 := {	data: "	type	data	related	look	layout	edgewidth	flags	printing	scripts	contentarea	cupage	bookref	browser	curRendering	kioskDest",	styles: [136, s5, 1, s2],	layout: 8192};book.contents[210] := c211;c212 := {	data: "Dynamic List Browsers",	viewFont: s13, 	name: "dynamic_browsers"};book.contents[211] := c212;c213 := {	data: "You can add your own browsers to the Book Reader overview. A typical use might be to display the results of a custom search — the user could keep the browser open and navigate between hits. The structure of a list browser frame is:	browser := {		name: \"Restaurants\",	// Name of browser		list: […]		// Topics	};	Entries in the list array are in the form:		{item: content, level: 2}or		{item: content, level: 2, name: \"Important Stuff\"}Where content is a Content within the book (e.g. returned by :F"&"indContentByValue()). The level slot can be omitted; it defaults to 1. A name slot is the topic’s text in the outline. If this is omitted, the text of the Content will be used (entries for non-text Contents must have a name slot). If the hilite slot is present in the browser frame, the content (item) is hilighted after turning to its page.There’s currently no way to remove a browser.",	styles: [233, s2, 83, s9, 46, s2, 28, s9, 3, s2, 53, s9, 62, s2, 21, s5, 54, s2, 4, s5, 163, s2, 6, s5, 52, s2, 4, s5, 90, s2],	layout: 8192};book.contents[212] := c213;c214 := {	data: "Useful Functions",	viewFont: s8,	layout: 3, 	name: "functions"};book.contents[213] := c214;c215 := {	data: "AddBookmark (pageNumber)",	styles: [11, s10, 2, s5, 10, s14, 2, s5],	layout: 8195};book.contents[214] := c215;c216 := {	data: "Adds a bookmark at pageNumber for the current book. A book may have only six bookmarks. There’s currently no way for a user to remove a bookmark.",	styles: [19, s2, 10, s16, 118, s2],	layout: 8192};book.contents[215] := c216;c217 := {	data: "AuthorData ( )",	styles: [11, s10, 4, s5],	layout: 3};book.contents[216] := c217;c218 := {	data: "Returns the ref of a RAM based frame in which book script authors may put data they want stored internal to the Newton. For example, preferences data. This data is maintained even after the book has been removed.CAUTION: Do not put in this frame any data that is resident in the book itself. Since books might be removed at any time, any copied data could in fact render the entire data frame invalid.",	styles: [214, s2, 7, s11, 184, s2],	layout: 8192};book.contents[217] := c218;c219 := {	data: "BookData ( )",	styles: [9, s10, 4, s5],	layout: 3};book.contents[218] := c219;c220 := {	data: "Returns the ref of the data frame in which book script authors should put any of their own special data. This data is added at compile time and becomes part of the book itself. Any frames kept here are to be considered read-only at run-time.The index dot command also puts their alphaIndex and subIndex arrays here. ",	styles: [281, s2, 10, s5, 5, s2, 8, s5, 16, s2],	layout: 8192};book.contents[219] := c220;c221 := {	data: "Bookmarks ( )",	styles: [9, s10, 5, s5],	layout: 3};book.contents[220] := c221;c222 := {	data: "Returns for the current book, an array of bookmarks.	[number, ...]",	styles: [54, s2, 15, s9, 1, s2],	layout: 8192};book.contents[221] := c222;c223 := {	data: "BookTitle ( )",	styles: [9, s10, 5, s5],	layout: 3};book.contents[222] := c223;c224 := {	data: "Returns the title of the current book.",	viewFont: s2,	layout: 8192};book.contents[223] := c224;c225 := {	data: "CountPages ( )",	styles: [10, s10, 5, s5],	layout: 3};book.contents[224] := c225;c226 := {	data: "Returns the number in pages of the current book.",	viewFont: s2,	layout: 8192};book.contents[225] := c226;c227 := {	data: "CurrentPage ( )",	styles: [11, s10, 5, s5],	layout: 3};book.contents[226] := c227;c228 := {	data: "Returns the current page of the current book.",	viewFont: s2,	layout: 8192};book.contents[227] := c228;c229 := {	data: "Find (string, results, scope, statusContext )",	styles: [4, s10, 2, s5, 6, s14, 2, s5, 7, s14, 2, s5, 5, s14, 2, s5, 14, s14, 2, s5],	layout: 3};book.contents[228] := c229;c230 := {	data: "Searches for string in the current book. Scope is the symbol 'localFind if the search should be done in the current book, 'globalFind if in all books. Returns in results an array with an element for each book string was found in. Each element contains the following frame:{title: \"book_title\",items: [	{title: \"string_found\", 	isbn: book_isbn,	found: {		len: stringLength,		item: theContent,		char: starting_char},	{…}}]}",	styles: [13, s2, 6, s5, 22, s2, 5, s5, 15, s2, 10, s5, 51, s2, 11, s5, 29, s2, 7, s5, 105, s2, 158, s9, 1, s2],	layout: 8192};book.contents[229] := c230;c231 := {	data: "FindContentBySlot (aSymbol, NIL)",	styles: [17, s10, 2, s5, 7, s14, 7, s5],	layout: 3};book.contents[230] := c231;c232 := {	data: "Returns an array of  contents which contain a slot aSymbol.",	styles: [51, s2, 7, s5, 3, s2],	layout: 8192};book.contents[231] := c232;c233 := {	data: "FindContentByValue (aSymbol, aValue, NIL)",	styles: [18, s10, 2, s5, 7, s14, 2, s5, 6, s14, 7, s5],	layout: 3};book.contents[232] := c233;c234 := {	data: "Returns an array of  contents which contain a slot whose symbol is aSymbol and a value of aValue.",	styles: [67, s2, 7, s5, 16, s2, 6, s5, 3, s2],	layout: 8192};book.contents[233] := c234;c235 := {	data: "FindPageByContent (aContent, anOffset, NIL)",	styles: [17, s10, 2, s5, 8, s14, 2, s5, 8, s14, 7, s5],	layout: 3};book.contents[234] := c235;c236 := {	data: "FindPageByContent finds the page that the characters of aContent at anOffset can be found on. (Note that Contents are frequently split between pages.)",	styles: [17, s5, 39, s2, 8, s5, 4, s2, 8, s5, 76, s2],	layout: 8192};book.contents[235] := c236;c237 := {	data: "FindPageByValue (aSymbol, aValue, NIL)",	styles: [15, s10, 2, s5, 7, s14, 2, s5, 6, s14, 7, s5],	layout: 3};book.contents[236] := c237;c238 := {	data: "Returns an array of  pages which contain contents with a slot whose symbol is aSymbol and a value of aValue.",	styles: [78, s2, 7, s5, 16, s2, 6, s5, 3, s2],	layout: 8192};book.contents[237] := c238;c239 := {	data: "HiliteBlock (aBlock, anOffset, aLen)",	styles: [11, s10, 2, s5, 6, s14, 2, s5, 8, s14, 2, s5, 4, s14, 2, s5],	layout: 3};book.contents[238] := c239;c240 := {	data: "Hilites the item (usually text) contained in the block, aBlock at the offset anOffset and with a length of aLen.",	styles: [56, s2, 6, s5, 15, s2, 8, s5, 22, s2, 4, s5, 3, s2],	layout: 8192};book.contents[239] := c240;c241 := {	data: "HideStoryCard ( )",	styles: [13, s10, 5, s5],	layout: 3};book.contents[240] := c241;c242 := {	data: "Hides the currently displayed story card.",	viewFont: s2,	layout: 8192};book.contents[241] := c242;c243 := {	data: "InsertForm (aForm)",	styles: [10, s10, 2, s5, 5, s14, 2, s5],	layout: 3};book.contents[242] := c243;c244 := {	data: "Adds a form specified in aForm to the current page.",	styles: [25, s2, 5, s5, 23, s2],	layout: 8192};book.contents[243] := c244;c245 := {	data: "PageThumbnail (aPage)",	styles: [13, s10, 2, s5, 5, s14, 2, s5],	layout: 3};book.contents[244] := c245;c246 := {	data: "Creates a thumbnail bitmap view of aPage at one-quarter size. Returns a frame containing:{bits: <page÷8>, bounds: {}}",	styles: [35, s2, 5, s5, 51, s2, 29, s9, 1, s2],	layout: 8192};book.contents[245] := c246;c247 := {	data: "PreviousPage ( )",	styles: [12, s10, 5, s5],	layout: 3};book.contents[246] := c247;c248 := {	data: "Returns the previous page the current book was at.",	viewFont: s2,	layout: 8192};book.contents[247] := c248;c249 := {	data: "ScrollPage (aDelta )",	styles: [10, s10, 2, s5, 7, s14, 2, s5],	layout: 3};book.contents[248] := c249;c250 := {	data: "Go forward or back aDelta number of pages from the current page. aDelta of zero causes the current page to be redrawn.",	styles: [19, s2, 6, s5, 40, s2, 6, s5, 49, s2],	layout: 8192};book.contents[249] := c250;c251 := {	data: "ShowStoryCard (aSymbol, aValue, aBounds )",	styles: [13, s10, 2, s5, 7, s14, 2, s5, 6, s14, 2, s5, 8, s14, 2, s5],	layout: 3};book.contents[250] := c251;c252 := {	data: "Shows a window at-and-of  aBounds with using the content that has a slot whose symbol is aSymbol and a value of aValue. Content can any type of content including stories and pictures. There can only be one story card displayed at a time. Note that the story card data is found by Book Reader by searching the book for the proper content. Thus, defining story card contents at the beginning of the file will result in faster display.",	styles: [26, s2, 7, s5, 56, s2, 7, s5, 16, s2, 6, s5, 316, s2],	layout: 8192};book.contents[251] := c252;c253 := {	data: "TurnToContent (aSymbol, aValue )",	styles: [13, s10, 2, s5, 7, s14, 2, s5, 7, s14, 2, s5],	layout: 3};book.contents[252] := c253;c254 := {	data: "Turns to the first page containing a content that has a slot whose symbol is aSymbol and a value of aValue.",	styles: [77, s2, 7, s5, 16, s2, 6, s5, 3, s2],	layout: 8192};book.contents[253] := c254;c255 := {	data: "TurnToPage (aPage )",	styles: [10, s10, 2, s5, 6, s14, 2, s5],	layout: 3};book.contents[254] := c255;c256 := {	data: "Turn to the page number specified in aPage.",	styles: [37, s2, 5, s5, 2, s2],	layout: 8192};book.contents[255] := c256;// Kiosk (menu page) referencesAddArraySlot(c5.scripts, 'kioskDest);AddArraySlot(c5.scripts, c24);AddArraySlot(c5.scripts, 'destPage);AddArraySlot(c5.scripts, 3);AddArraySlot(c6.scripts, 'kioskDest);AddArraySlot(c6.scripts, c26);AddArraySlot(c6.scripts, 'destPage);AddArraySlot(c6.scripts, 4);AddArraySlot(c7.scripts, 'kioskDest);AddArraySlot(c7.scripts, c28);AddArraySlot(c7.scripts, 'destPage);AddArraySlot(c7.scripts, 8);AddArraySlot(c8.scripts, 'kioskDest);AddArraySlot(c8.scripts, c41);AddArraySlot(c8.scripts, 'destPage);AddArraySlot(c8.scripts, 9);AddArraySlot(c9.scripts, 'kioskDest);AddArraySlot(c9.scripts, c43);AddArraySlot(c9.scripts, 'destPage);AddArraySlot(c9.scripts, 10);AddArraySlot(c10.scripts, 'kioskDest);AddArraySlot(c10.scripts, c55);AddArraySlot(c10.scripts, 'destPage);AddArraySlot(c10.scripts, 10);AddArraySlot(c11.scripts, 'kioskDest);AddArraySlot(c11.scripts, c80);AddArraySlot(c11.scripts, 'destPage);AddArraySlot(c11.scripts, 15);AddArraySlot(c12.scripts, 'kioskDest);AddArraySlot(c12.scripts, c105);AddArraySlot(c12.scripts, 'destPage);AddArraySlot(c12.scripts, 23);AddArraySlot(c13.scripts, 'kioskDest);AddArraySlot(c13.scripts, c108);AddArraySlot(c13.scripts, 'destPage);AddArraySlot(c13.scripts, 23);AddArraySlot(c14.scripts, 'kioskDest);AddArraySlot(c14.scripts, c117);AddArraySlot(c14.scripts, 'destPage);AddArraySlot(c14.scripts, 26);AddArraySlot(c15.scripts, 'kioskDest);AddArraySlot(c15.scripts, c128);AddArraySlot(c15.scripts, 'destPage);AddArraySlot(c15.scripts, 28);AddArraySlot(c16.scripts, 'kioskDest);AddArraySlot(c16.scripts, c195);AddArraySlot(c16.scripts, 'destPage);AddArraySlot(c16.scripts, 33);AddArraySlot(c17.scripts, 'kioskDest);AddArraySlot(c17.scripts, c196);AddArraySlot(c17.scripts, 'destPage);AddArraySlot(c17.scripts, 33);AddArraySlot(c18.scripts, 'kioskDest);AddArraySlot(c18.scripts, c201);AddArraySlot(c18.scripts, 'destPage);AddArraySlot(c18.scripts, 37);AddArraySlot(c19.scripts, 'kioskDest);AddArraySlot(c19.scripts, c207);AddArraySlot(c19.scripts, 'destPage);AddArraySlot(c19.scripts, 39);AddArraySlot(c20.scripts, 'kioskDest);AddArraySlot(c20.scripts, c208);AddArraySlot(c20.scripts, 'destPage);AddArraySlot(c20.scripts, 39);AddArraySlot(c21.scripts, 'kioskDest);AddArraySlot(c21.scripts, c210);AddArraySlot(c21.scripts, 'destPage);AddArraySlot(c21.scripts, 40);AddArraySlot(c22.scripts, 'kioskDest);AddArraySlot(c22.scripts, c212);AddArraySlot(c22.scripts, 'destPage);AddArraySlot(c22.scripts, 40);AddArraySlot(c23.scripts, 'kioskDest);AddArraySlot(c23.scripts, c214);AddArraySlot(c23.scripts, 'destPage);AddArraySlot(c23.scripts, 43);AddArraySlot(c45.scripts, 'kioskDest);AddArraySlot(c45.scripts, c55);AddArraySlot(c45.scripts, 'destPage);AddArraySlot(c45.scripts, 10);AddArraySlot(c46.scripts, 'kioskDest);AddArraySlot(c46.scripts, c55);AddArraySlot(c46.scripts, 'destPage);AddArraySlot(c46.scripts, 10);AddArraySlot(c47.scripts, 'kioskDest);AddArraySlot(c47.scripts, c80);AddArraySlot(c47.scripts, 'destPage);AddArraySlot(c47.scripts, 15);AddArraySlot(c48.scripts, 'kioskDest);AddArraySlot(c48.scripts, c80);AddArraySlot(c48.scripts, 'destPage);AddArraySlot(c48.scripts, 15);AddArraySlot(c49.scripts, 'kioskDest);AddArraySlot(c49.scripts, c105);AddArraySlot(c49.scripts, 'destPage);AddArraySlot(c49.scripts, 23);AddArraySlot(c50.scripts, 'kioskDest);AddArraySlot(c50.scripts, c105);AddArraySlot(c50.scripts, 'destPage);AddArraySlot(c50.scripts, 23);AddArraySlot(c51.scripts, 'kioskDest);AddArraySlot(c51.scripts, c108);AddArraySlot(c51.scripts, 'destPage);AddArraySlot(c51.scripts, 23);AddArraySlot(c52.scripts, 'kioskDest);AddArraySlot(c52.scripts, c108);AddArraySlot(c52.scripts, 'destPage);AddArraySlot(c52.scripts, 23);AddArraySlot(c53.scripts, 'kioskDest);AddArraySlot(c53.scripts, c117);AddArraySlot(c53.scripts, 'destPage);AddArraySlot(c53.scripts, 26);AddArraySlot(c54.scripts, 'kioskDest);AddArraySlot(c54.scripts, c117);AddArraySlot(c54.scripts, 'destPage);AddArraySlot(c54.scripts, 26);// Page TemplatesNBMDefault := {	nColumns: 1,	column: [{	width: 12,	type: 0}]};AddArraySlot(book.templates, NBMDefault);Indented := {	nColumns: 2,	column: [{	width: 1,	type: 1}, {	width: 11,	type: 0}]};AddArraySlot(book.templates, Indented);TitlePage := {	nColumns: 1,	column: [{	width: 12,	type: 0}],	flags: 8};AddArraySlot(book.templates, TitlePage);ContentsPage := {	nColumns: 2,	column: [{	width: 2,	type: 1}, {	width: 10,	type: 0}],	flags: 8};AddArraySlot(book.templates, ContentsPage);Default := {	nColumns: 1,	column: [{	width: 12,	type: 0}]};AddArraySlot(book.templates, Default);// Bounds Listbnd1 := [0,0,240,36];bnd2 := [0,36,240,249];bnd3 := [0,0,240,25];bnd4 := [44,25,240,38];bnd5 := [44,38,240,51];bnd6 := [44,51,240,64];bnd7 := [44,64,240,77];bnd8 := [44,77,240,90];bnd9 := [44,90,240,102];bnd10 := [44,102,240,114];bnd11 := [44,114,240,126];bnd12 := [44,126,240,138];bnd13 := [44,138,240,150];bnd14 := [44,150,240,187];bnd15 := [44,187,240,200];bnd16 := [44,200,240,212];bnd17 := [44,212,240,224];bnd18 := [44,224,240,237];bnd19 := [44,237,240,249];bnd20 := [44,249,240,261];bnd21 := [44,261,240,273];bnd22 := [44,273,240,318];bnd23 := [0,16,240,39];bnd24 := [0,39,240,318];bnd25 := [0,16,240,52];bnd26 := [0,52,240,75];bnd27 := [0,75,240,318];bnd28 := [0,16,240,318];bnd29 := [0,39,20,51];bnd30 := [24,39,240,63];bnd31 := [0,63,20,75];bnd32 := [24,63,240,87];bnd33 := [0,87,20,99];bnd34 := [24,87,240,171];bnd35 := [0,171,20,183];bnd36 := [24,171,240,195];bnd37 := [0,195,20,207];bnd38 := [24,195,240,219];bnd39 := [0,219,20,231];bnd40 := [24,219,240,318];bnd41 := [0,39,240,63];bnd42 := [24,63,240,111];bnd43 := [0,111,20,123];bnd44 := [24,111,240,159];bnd45 := [0,159,20,171];bnd46 := [24,159,240,183];bnd47 := [0,183,20,195];bnd48 := [24,183,240,231];bnd49 := [0,231,20,243];bnd50 := [24,231,240,267];bnd51 := [0,267,240,286];bnd52 := [0,286,240,299];bnd53 := [24,299,240,318];bnd54 := [24,16,240,209];bnd55 := [0,209,240,222];bnd56 := [24,222,240,271];bnd57 := [0,271,240,284];bnd58 := [24,284,240,318];bnd59 := [24,16,240,40];bnd60 := [0,40,240,53];bnd61 := [24,53,240,197];bnd62 := [0,197,240,210];bnd63 := [24,210,240,282];bnd64 := [0,282,240,295];bnd65 := [24,295,240,318];bnd66 := [24,16,240,88];bnd67 := [0,88,240,101];bnd68 := [24,101,240,233];bnd69 := [0,233,240,246];bnd70 := [24,246,240,318];bnd71 := [0,16,240,29];bnd72 := [24,29,240,161];bnd73 := [0,161,240,174];bnd74 := [24,174,240,246];bnd75 := [0,246,240,259];bnd76 := [24,259,240,318];bnd77 := [24,16,240,52];bnd78 := [0,52,240,65];bnd79 := [24,65,240,125];bnd80 := [0,125,240,144];bnd81 := [0,144,240,157];bnd82 := [24,157,240,318];bnd83 := [0,16,240,42];bnd84 := [24,42,240,127];bnd85 := [0,127,240,153];bnd86 := [24,153,240,318];bnd87 := [24,29,240,318];bnd88 := [24,65,240,102];bnd89 := [0,102,240,115];bnd90 := [24,115,240,318];bnd91 := [24,29,240,139];bnd92 := [0,139,240,165];bnd93 := [24,165,240,318];bnd94 := [24,16,240,197];bnd95 := [24,210,240,318];bnd96 := [24,16,240,185];bnd97 := [0,185,240,198];bnd98 := [24,198,240,235];bnd99 := [0,235,240,261];bnd100 := [24,261,240,318];bnd101 := [24,16,240,100];bnd102 := [0,100,240,126];bnd103 := [24,126,240,318];bnd104 := [0,16,240,35];bnd105 := [0,35,240,48];bnd106 := [24,48,240,204];bnd107 := [0,204,240,223];bnd108 := [0,223,240,235];bnd109 := [24,235,240,318];bnd110 := [24,16,240,318];bnd111 := [0,40,240,52];bnd112 := [24,52,240,124];bnd113 := [0,124,240,136];bnd114 := [24,136,240,196];bnd115 := [0,196,240,208];bnd116 := [24,208,240,318];bnd117 := [24,16,240,101];bnd118 := [0,101,240,120];bnd119 := [0,120,240,132];bnd120 := [24,132,240,192];bnd121 := [0,192,240,204];bnd122 := [24,204,240,252];bnd123 := [0,252,240,264];bnd124 := [24,264,240,318];bnd125 := [24,16,240,148];bnd126 := [0,148,240,160];bnd127 := [24,160,240,268];bnd128 := [0,268,240,280];bnd129 := [24,280,240,318];bnd130 := [0,101,240,124];bnd131 := [0,124,240,160];bnd132 := [0,160,240,179];bnd133 := [0,179,240,191];bnd134 := [24,191,240,215];bnd135 := [0,215,240,227];bnd136 := [24,227,240,318];bnd137 := [24,48,240,72];bnd138 := [0,72,240,85];bnd139 := [24,85,240,97];bnd140 := [0,97,240,110];bnd141 := [24,110,240,134];bnd142 := [0,134,240,147];bnd143 := [24,147,240,159];bnd144 := [0,159,240,172];bnd145 := [24,172,240,196];bnd146 := [0,196,240,209];bnd147 := [24,209,240,221];bnd148 := [0,221,240,234];bnd149 := [24,234,240,246];bnd150 := [24,259,240,271];bnd151 := [24,29,240,41];bnd152 := [0,41,240,54];bnd153 := [24,54,240,78];bnd154 := [0,78,240,91];bnd155 := [24,91,240,115];bnd156 := [0,115,240,128];bnd157 := [24,128,240,152];bnd158 := [0,152,240,165];bnd159 := [24,165,240,177];bnd160 := [0,177,240,190];bnd161 := [24,190,240,214];bnd162 := [0,214,240,227];bnd163 := [24,227,240,239];bnd164 := [0,239,240,252];bnd165 := [24,252,240,288];bnd166 := [0,288,240,301];bnd167 := [24,301,240,318];bnd168 := [24,54,240,66];bnd169 := [0,66,240,79];bnd170 := [24,79,240,91];bnd171 := [0,91,240,104];bnd172 := [24,104,240,116];bnd173 := [0,116,240,129];bnd174 := [24,129,240,141];bnd175 := [0,141,240,154];bnd176 := [24,154,240,178];bnd177 := [0,178,240,250];bnd178 := [0,250,240,263];bnd179 := [24,263,240,318];bnd180 := [24,54,240,90];bnd181 := [0,90,240,103];bnd182 := [24,103,240,139];bnd183 := [0,139,240,152];bnd184 := [24,152,240,318];bnd185 := [0,39,240,58];bnd186 := [0,58,240,318];bnd187 := [0,16,240,64];bnd188 := [0,64,35,99];bnd189 := [0,99,240,318];bnd190 := [0,35,240,238];bnd191 := [0,238,73,277];bnd192 := [0,277,240,318];bnd193 := [45,16,195,223];bnd194 := [0,235,240,247];bnd195 := [0,247,240,266];bnd196 := [0,266,240,318];bnd197 := [0,16,240,40];bnd198 := [0,40,240,59];bnd199 := [0,59,240,266];bnd200 := [0,266,240,285];bnd201 := [0,285,240,318];bnd202 := [0,39,240,52];bnd203 := [0,124,240,137];bnd204 := [24,137,240,293];bnd205 := [0,293,240,306];bnd206 := [24,306,240,318];bnd207 := [24,16,240,137];bnd208 := [0,137,240,150];bnd209 := [24,150,240,210];bnd210 := [0,210,240,223];bnd211 := [24,223,240,247];bnd212 := [0,247,240,260];bnd213 := [24,260,240,318];bnd214 := [24,29,240,65];bnd215 := [0,65,240,78];bnd216 := [24,78,240,318];bnd217 := [24,29,240,66];bnd218 := [24,79,240,129];bnd219 := [0,129,240,142];bnd220 := [24,142,240,204];bnd221 := [0,204,240,217];bnd222 := [24,217,240,266];bnd223 := [0,266,240,279];bnd224 := [24,279,240,318];bnd225 := [24,78,240,115];bnd226 := [24,128,240,201];bnd227 := [0,201,240,214];bnd228 := [24,214,240,250];bnd229 := [24,29,240,187];bnd230 := [0,187,240,200];bnd231 := [24,200,240,249];bnd232 := [0,249,240,262];bnd233 := [24,262,240,287];// PagespageList := {pageSize: {left: 0, top: 0, right: 240, bottom: 318},	contents: [], pages: []};// Page 1page := MakePage(TitlePage);AddArraySlot(page.blocks, MakeBlock(bnd1, c2));AddArraySlot(page.blocks, MakeBlock(bnd2, c3));AddArraySlot(pageList.pages, page);// Page 2page := MakePage(ContentsPage);AddArraySlot(page.blocks, MakeBlock(bnd3, c4));AddArraySlot(page.blocks, MakeBlock(bnd4, c5));AddArraySlot(page.blocks, MakeBlock(bnd5, c6));AddArraySlot(page.blocks, MakeBlock(bnd6, c7));AddArraySlot(page.blocks, MakeBlock(bnd7, c8));AddArraySlot(page.blocks, MakeBlock(bnd8, c9));AddArraySlot(page.blocks, MakeBlock(bnd9, c10));AddArraySlot(page.blocks, MakeBlock(bnd10, c11));AddArraySlot(page.blocks, MakeBlock(bnd11, c12));AddArraySlot(page.blocks, MakeBlock(bnd12, c13));AddArraySlot(page.blocks, MakeBlock(bnd13, c14));AddArraySlot(page.blocks, MakeBlock(bnd14, c15));AddArraySlot(page.blocks, MakeBlock(bnd15, c16));AddArraySlot(page.blocks, MakeBlock(bnd16, c17));AddArraySlot(page.blocks, MakeBlock(bnd17, c18));AddArraySlot(page.blocks, MakeBlock(bnd18, c19));AddArraySlot(page.blocks, MakeBlock(bnd19, c20));AddArraySlot(page.blocks, MakeBlock(bnd20, c21));AddArraySlot(page.blocks, MakeBlock(bnd21, c22));AddArraySlot(page.blocks, MakeBlock(bnd22, c23));AddArraySlot(pageList.pages, page);// Page 3page := MakePage(Default);AddArraySlot(page.blocks, MakeBlock(bnd23, c24));AddArraySlot(page.blocks,	{bounds: bnd24,	item: c25,	dataLen: 915});AddArraySlot(pageList.pages, page);// Page 4page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd25,	item: c25,	dataOffset: 915,	dataLen: 76});AddArraySlot(page.blocks, MakeBlock(bnd26, c26));AddArraySlot(page.blocks,	{bounds: bnd27,	item: c27,	dataLen: 742});AddArraySlot(pageList.pages, page);// Page 5page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c27,	dataOffset: 742,	dataLen: 840});AddArraySlot(pageList.pages, page);// Page 6page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c27,	dataOffset: 1582,	dataLen: 833});AddArraySlot(pageList.pages, page);// Page 7page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c27,	dataOffset: 2416,	dataLen: 130});AddArraySlot(pageList.pages, page);// Page 8page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd23, c28));AddArraySlot(page.blocks, MakeBlock(bnd29, c29));AddArraySlot(page.blocks, MakeBlock(bnd30, c30));AddArraySlot(page.blocks, MakeBlock(bnd31, c31));AddArraySlot(page.blocks, MakeBlock(bnd32, c32));AddArraySlot(page.blocks, MakeBlock(bnd33, c33));AddArraySlot(page.blocks, MakeBlock(bnd34, c34));AddArraySlot(page.blocks, MakeBlock(bnd35, c35));AddArraySlot(page.blocks, MakeBlock(bnd36, c36));AddArraySlot(page.blocks, MakeBlock(bnd37, c37));AddArraySlot(page.blocks, MakeBlock(bnd38, c38));AddArraySlot(page.blocks, MakeBlock(bnd39, c39));AddArraySlot(page.blocks, MakeBlock(bnd40, c40));AddArraySlot(pageList.pages, page);// Page 9page := MakePage(Default);AddArraySlot(page.blocks, MakeBlock(bnd23, c41));AddArraySlot(page.blocks, MakeBlock(bnd24, c42));AddArraySlot(pageList.pages, page);// Page 10page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd23, c43));AddArraySlot(page.blocks, MakeBlock(bnd41, c44));AddArraySlot(page.blocks, MakeBlock(bnd31, c45));AddArraySlot(page.blocks, MakeBlock(bnd42, c46));AddArraySlot(page.blocks, MakeBlock(bnd43, c47));AddArraySlot(page.blocks, MakeBlock(bnd44, c48));AddArraySlot(page.blocks, MakeBlock(bnd45, c49));AddArraySlot(page.blocks, MakeBlock(bnd46, c50));AddArraySlot(page.blocks, MakeBlock(bnd47, c51));AddArraySlot(page.blocks, MakeBlock(bnd48, c52));AddArraySlot(page.blocks, MakeBlock(bnd49, c53));AddArraySlot(page.blocks, MakeBlock(bnd50, c54));AddArraySlot(page.blocks, MakeBlock(bnd51, c55));AddArraySlot(page.blocks, MakeBlock(bnd52, c56));AddArraySlot(page.blocks,	{bounds: bnd53,	item: c57,	dataLen: 35});AddArraySlot(pageList.pages, page);// Page 11page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd54,	item: c57,	dataOffset: 35,	dataLen: 426});AddArraySlot(page.blocks, MakeBlock(bnd55, c58));AddArraySlot(page.blocks, MakeBlock(bnd56, c59));AddArraySlot(page.blocks, MakeBlock(bnd57, c60));AddArraySlot(page.blocks,	{bounds: bnd58,	item: c61,	dataLen: 39});AddArraySlot(pageList.pages, page);// Page 12page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd59,	item: c61,	dataOffset: 40,	dataLen: 24});AddArraySlot(page.blocks, MakeBlock(bnd60, c62));AddArraySlot(page.blocks, MakeBlock(bnd61, c63));AddArraySlot(page.blocks, MakeBlock(bnd62, c64));AddArraySlot(page.blocks, MakeBlock(bnd63, c65));AddArraySlot(page.blocks, MakeBlock(bnd64, c66));AddArraySlot(page.blocks,	{bounds: bnd65,	item: c67,	dataLen: 30});AddArraySlot(pageList.pages, page);// Page 13page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd66,	item: c67,	dataOffset: 30,	dataLen: 125});AddArraySlot(page.blocks, MakeBlock(bnd67, c68));AddArraySlot(page.blocks, MakeBlock(bnd68, c69));AddArraySlot(page.blocks, MakeBlock(bnd69, c70));AddArraySlot(page.blocks, MakeBlock(bnd70, c71));AddArraySlot(pageList.pages, page);// Page 14page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c72));AddArraySlot(page.blocks, MakeBlock(bnd72, c73));AddArraySlot(page.blocks, MakeBlock(bnd73, c74));AddArraySlot(page.blocks, MakeBlock(bnd74, c75));AddArraySlot(page.blocks, MakeBlock(bnd75, c76));AddArraySlot(page.blocks,	{bounds: bnd76,	item: c77,	dataLen: 126});AddArraySlot(pageList.pages, page);// Page 15page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd77,	item: c77,	dataOffset: 127,	dataLen: 21});AddArraySlot(page.blocks, MakeBlock(bnd78, c78));AddArraySlot(page.blocks, MakeBlock(bnd79, c79));AddArraySlot(page.blocks, MakeBlock(bnd80, c80));AddArraySlot(page.blocks, MakeBlock(bnd81, c81));AddArraySlot(page.blocks, MakeBlock(bnd82, c82));AddArraySlot(pageList.pages, page);// Page 16page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd83, c83));AddArraySlot(page.blocks, MakeBlock(bnd84, c84));AddArraySlot(page.blocks, MakeBlock(bnd85, c85));AddArraySlot(page.blocks,	{bounds: bnd86,	item: c86,	dataLen: 421});AddArraySlot(pageList.pages, page);// Page 17page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c87));AddArraySlot(page.blocks,	{bounds: bnd87,	item: c88,	dataLen: 660});AddArraySlot(pageList.pages, page);// Page 18page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd77,	item: c88,	dataOffset: 660,	dataLen: 53});AddArraySlot(page.blocks, MakeBlock(bnd78, c89));AddArraySlot(page.blocks, MakeBlock(bnd88, c90));AddArraySlot(page.blocks, MakeBlock(bnd89, c91));AddArraySlot(page.blocks, MakeBlock(bnd90, c92));AddArraySlot(pageList.pages, page);// Page 19page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c93));AddArraySlot(page.blocks, MakeBlock(bnd91, c94));AddArraySlot(page.blocks, MakeBlock(bnd92, c95));AddArraySlot(page.blocks,	{bounds: bnd93,	item: c96,	dataLen: 384});AddArraySlot(pageList.pages, page);// Page 20page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd94,	item: c96,	dataOffset: 384,	dataLen: 466});AddArraySlot(page.blocks, MakeBlock(bnd62, c97));AddArraySlot(page.blocks,	{bounds: bnd95,	item: c98,	dataLen: 335});AddArraySlot(pageList.pages, page);// Page 21page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd96,	item: c98,	dataOffset: 335,	dataLen: 293});AddArraySlot(page.blocks, MakeBlock(bnd97, c99));AddArraySlot(page.blocks, MakeBlock(bnd98, c100));AddArraySlot(page.blocks, MakeBlock(bnd99, c101));AddArraySlot(page.blocks,	{bounds: bnd100,	item: c102,	dataLen: 147});AddArraySlot(pageList.pages, page);// Page 22page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd101,	item: c102,	dataOffset: 147,	dataLen: 169});AddArraySlot(page.blocks, MakeBlock(bnd102, c103));AddArraySlot(page.blocks,	{bounds: bnd103,	item: c104,	dataLen: 518});AddArraySlot(pageList.pages, page);// Page 23page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd104, c105));AddArraySlot(page.blocks, MakeBlock(bnd105, c106));AddArraySlot(page.blocks, MakeBlock(bnd106, c107));AddArraySlot(page.blocks, MakeBlock(bnd107, c108));AddArraySlot(page.blocks, MakeBlock(bnd108, c109));AddArraySlot(page.blocks,	{bounds: bnd109,	item: c110,	dataLen: 113});AddArraySlot(pageList.pages, page);// Page 24page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd110,	item: c110,	dataOffset: 114,	dataLen: 732});AddArraySlot(pageList.pages, page);// Page 25page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd59,	item: c110,	dataOffset: 846,	dataLen: 7});AddArraySlot(page.blocks, MakeBlock(bnd111, c111));AddArraySlot(page.blocks, MakeBlock(bnd112, c112));AddArraySlot(page.blocks, MakeBlock(bnd113, c113));AddArraySlot(page.blocks, MakeBlock(bnd114, c114));AddArraySlot(page.blocks, MakeBlock(bnd115, c115));AddArraySlot(page.blocks,	{bounds: bnd116,	item: c116,	dataLen: 323});AddArraySlot(pageList.pages, page);// Page 26page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd117,	item: c116,	dataOffset: 323,	dataLen: 126});AddArraySlot(page.blocks, MakeBlock(bnd118, c117));AddArraySlot(page.blocks, MakeBlock(bnd119, c118));AddArraySlot(page.blocks, MakeBlock(bnd120, c119));AddArraySlot(page.blocks, MakeBlock(bnd121, c120));AddArraySlot(page.blocks, MakeBlock(bnd122, c121));AddArraySlot(page.blocks, MakeBlock(bnd123, c122));AddArraySlot(page.blocks,	{bounds: bnd124,	item: c123,	dataLen: 144});AddArraySlot(pageList.pages, page);// Page 27page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd125,	item: c123,	dataOffset: 144,	dataLen: 327});AddArraySlot(page.blocks, MakeBlock(bnd126, c124));AddArraySlot(page.blocks, MakeBlock(bnd127, c125));AddArraySlot(page.blocks, MakeBlock(bnd128, c126));AddArraySlot(page.blocks,	{bounds: bnd129,	item: c127,	dataLen: 109});AddArraySlot(pageList.pages, page);// Page 28page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd117,	item: c127,	dataOffset: 109,	dataLen: 117});AddArraySlot(page.blocks, MakeBlock(bnd130, c128));AddArraySlot(page.blocks, MakeBlock(bnd131, c129));AddArraySlot(page.blocks, MakeBlock(bnd132, c130));AddArraySlot(page.blocks, MakeBlock(bnd133, c131));AddArraySlot(page.blocks, MakeBlock(bnd134, c132));AddArraySlot(page.blocks, MakeBlock(bnd135, c133));AddArraySlot(page.blocks, MakeBlock(bnd136, c134));AddArraySlot(pageList.pages, page);// Page 29page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd104, c135));AddArraySlot(page.blocks, MakeBlock(bnd105, c136));AddArraySlot(page.blocks, MakeBlock(bnd137, c137));AddArraySlot(page.blocks, MakeBlock(bnd138, c138));AddArraySlot(page.blocks, MakeBlock(bnd139, c139));AddArraySlot(page.blocks, MakeBlock(bnd140, c140));AddArraySlot(page.blocks, MakeBlock(bnd141, c141));AddArraySlot(page.blocks, MakeBlock(bnd142, c142));AddArraySlot(page.blocks, MakeBlock(bnd143, c143));AddArraySlot(page.blocks, MakeBlock(bnd144, c144));AddArraySlot(page.blocks, MakeBlock(bnd145, c145));AddArraySlot(page.blocks, MakeBlock(bnd146, c146));AddArraySlot(page.blocks, MakeBlock(bnd147, c147));AddArraySlot(page.blocks, MakeBlock(bnd148, c148));AddArraySlot(page.blocks, MakeBlock(bnd149, c149));AddArraySlot(page.blocks, MakeBlock(bnd75, c150));AddArraySlot(page.blocks, MakeBlock(bnd150, c151));AddArraySlot(page.blocks, MakeBlock(bnd57, c152));AddArraySlot(page.blocks, MakeBlock(bnd58, c153));AddArraySlot(pageList.pages, page);// Page 30page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c154));AddArraySlot(page.blocks, MakeBlock(bnd151, c155));AddArraySlot(page.blocks, MakeBlock(bnd152, c156));AddArraySlot(page.blocks, MakeBlock(bnd153, c157));AddArraySlot(page.blocks, MakeBlock(bnd154, c158));AddArraySlot(page.blocks, MakeBlock(bnd155, c159));AddArraySlot(page.blocks, MakeBlock(bnd156, c160));AddArraySlot(page.blocks, MakeBlock(bnd157, c161));AddArraySlot(page.blocks, MakeBlock(bnd158, c162));AddArraySlot(page.blocks, MakeBlock(bnd159, c163));AddArraySlot(page.blocks, MakeBlock(bnd160, c164));AddArraySlot(page.blocks, MakeBlock(bnd161, c165));AddArraySlot(page.blocks, MakeBlock(bnd162, c166));AddArraySlot(page.blocks, MakeBlock(bnd163, c167));AddArraySlot(page.blocks, MakeBlock(bnd164, c168));AddArraySlot(page.blocks, MakeBlock(bnd165, c169));AddArraySlot(page.blocks, MakeBlock(bnd166, c170));AddArraySlot(page.blocks, MakeBlock(bnd167, c171));AddArraySlot(pageList.pages, page);// Page 31page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c172));AddArraySlot(page.blocks, MakeBlock(bnd151, c173));AddArraySlot(page.blocks, MakeBlock(bnd152, c174));AddArraySlot(page.blocks, MakeBlock(bnd168, c175));AddArraySlot(page.blocks, MakeBlock(bnd169, c176));AddArraySlot(page.blocks, MakeBlock(bnd170, c177));AddArraySlot(page.blocks, MakeBlock(bnd171, c178));AddArraySlot(page.blocks, MakeBlock(bnd172, c179));AddArraySlot(page.blocks, MakeBlock(bnd173, c180));AddArraySlot(page.blocks, MakeBlock(bnd174, c181));AddArraySlot(page.blocks, MakeBlock(bnd175, c182));AddArraySlot(page.blocks, MakeBlock(bnd176, c183));AddArraySlot(page.blocks, MakeBlock(bnd177, c184));AddArraySlot(page.blocks, MakeBlock(bnd178, c185));AddArraySlot(page.blocks, MakeBlock(bnd179, c186));AddArraySlot(pageList.pages, page);// Page 32page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c187));AddArraySlot(page.blocks, MakeBlock(bnd151, c188));AddArraySlot(page.blocks, MakeBlock(bnd152, c189));AddArraySlot(page.blocks, MakeBlock(bnd180, c190));AddArraySlot(page.blocks, MakeBlock(bnd181, c191));AddArraySlot(page.blocks, MakeBlock(bnd182, c192));AddArraySlot(page.blocks, MakeBlock(bnd183, c193));AddArraySlot(page.blocks, MakeBlock(bnd184, c194));AddArraySlot(pageList.pages, page);// Page 33page := MakePage(Default);AddArraySlot(page.blocks, MakeBlock(bnd23, c195));AddArraySlot(page.blocks, MakeBlock(bnd185, c196));AddArraySlot(page.blocks,	{bounds: bnd186,	item: c197,	dataLen: 583});AddArraySlot(pageList.pages, page);// Page 34page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c197,	dataOffset: 584,	dataLen: 632});AddArraySlot(pageList.pages, page);// Page 35page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd187,	item: c197,	dataOffset: 1216,	dataLen: 125});AddArraySlot(page.blocks, MakeBlock(bnd188, c198));AddArraySlot(page.blocks,	{bounds: bnd189,	item: c200,	dataLen: 573});AddArraySlot(pageList.pages, page);// Page 36page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c200,	dataOffset: 573,	dataLen: 695});AddArraySlot(pageList.pages, page);// Page 37page := MakePage(Default);AddArraySlot(page.blocks, MakeBlock(bnd104, c201));AddArraySlot(page.blocks, MakeBlock(bnd190, c202));AddArraySlot(page.blocks, MakeBlock(bnd191, c203));AddArraySlot(page.blocks,	{bounds: bnd192,	item: c204,	dataLen: 117});AddArraySlot(pageList.pages, page);// Page 38page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c204,	dataOffset: 117,	dataLen: 318});AddArraySlot(pageList.pages, page);// Page 39page := MakePage(Default);AddArraySlot(page.blocks, MakeBlock(bnd193, c205));AddArraySlot(page.blocks, MakeBlock(bnd108, c206));AddArraySlot(page.blocks, MakeBlock(bnd194, c207));AddArraySlot(page.blocks, MakeBlock(bnd195, c208));AddArraySlot(page.blocks,	{bounds: bnd196,	item: c209,	dataLen: 155});AddArraySlot(pageList.pages, page);// Page 40page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd197,	item: c209,	dataOffset: 155,	dataLen: 15});AddArraySlot(page.blocks, MakeBlock(bnd198, c210));AddArraySlot(page.blocks, MakeBlock(bnd199, c211));AddArraySlot(page.blocks, MakeBlock(bnd200, c212));AddArraySlot(page.blocks,	{bounds: bnd201,	item: c213,	dataLen: 85});AddArraySlot(pageList.pages, page);// Page 41page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c213,	dataOffset: 85,	dataLen: 657});AddArraySlot(pageList.pages, page);// Page 42page := MakePage(Default);AddArraySlot(page.blocks,	{bounds: bnd28,	item: c213,	dataOffset: 743,	dataLen: 157});AddArraySlot(pageList.pages, page);// Page 43page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd23, c214));AddArraySlot(page.blocks, MakeBlock(bnd202, c215));AddArraySlot(page.blocks, MakeBlock(bnd112, c216));AddArraySlot(page.blocks, MakeBlock(bnd203, c217));AddArraySlot(page.blocks, MakeBlock(bnd204, c218));AddArraySlot(page.blocks, MakeBlock(bnd205, c219));AddArraySlot(page.blocks,	{bounds: bnd206,	item: c220,	dataLen: 37});AddArraySlot(pageList.pages, page);// Page 44page := MakePage(Indented);AddArraySlot(page.blocks,	{bounds: bnd207,	item: c220,	dataOffset: 37,	dataLen: 281});AddArraySlot(page.blocks, MakeBlock(bnd208, c221));AddArraySlot(page.blocks, MakeBlock(bnd209, c222));AddArraySlot(page.blocks, MakeBlock(bnd210, c223));AddArraySlot(page.blocks, MakeBlock(bnd211, c224));AddArraySlot(page.blocks, MakeBlock(bnd212, c225));AddArraySlot(page.blocks, MakeBlock(bnd213, c226));AddArraySlot(pageList.pages, page);// Page 45page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c227));AddArraySlot(page.blocks, MakeBlock(bnd214, c228));AddArraySlot(page.blocks, MakeBlock(bnd215, c229));AddArraySlot(page.blocks, MakeBlock(bnd216, c230));AddArraySlot(pageList.pages, page);// Page 46page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c231));AddArraySlot(page.blocks, MakeBlock(bnd217, c232));AddArraySlot(page.blocks, MakeBlock(bnd169, c233));AddArraySlot(page.blocks, MakeBlock(bnd218, c234));AddArraySlot(page.blocks, MakeBlock(bnd219, c235));AddArraySlot(page.blocks, MakeBlock(bnd220, c236));AddArraySlot(page.blocks, MakeBlock(bnd221, c237));AddArraySlot(page.blocks, MakeBlock(bnd222, c238));AddArraySlot(page.blocks, MakeBlock(bnd223, c239));AddArraySlot(page.blocks,	{bounds: bnd224,	item: c240,	dataLen: 112});AddArraySlot(pageList.pages, page);// Page 47page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c241));AddArraySlot(page.blocks, MakeBlock(bnd214, c242));AddArraySlot(page.blocks, MakeBlock(bnd215, c243));AddArraySlot(page.blocks, MakeBlock(bnd225, c244));AddArraySlot(page.blocks, MakeBlock(bnd156, c245));AddArraySlot(page.blocks, MakeBlock(bnd226, c246));AddArraySlot(page.blocks, MakeBlock(bnd227, c247));AddArraySlot(page.blocks, MakeBlock(bnd228, c248));AddArraySlot(page.blocks, MakeBlock(bnd178, c249));AddArraySlot(page.blocks,	{bounds: bnd179,	item: c250,	dataLen: 118});AddArraySlot(pageList.pages, page);// Page 48page := MakePage(Indented);AddArraySlot(page.blocks, MakeBlock(bnd71, c251));AddArraySlot(page.blocks, MakeBlock(bnd229, c252));AddArraySlot(page.blocks, MakeBlock(bnd230, c253));AddArraySlot(page.blocks, MakeBlock(bnd231, c254));AddArraySlot(page.blocks, MakeBlock(bnd232, c255));AddArraySlot(page.blocks, MakeBlock(bnd233, c256));AddArraySlot(pageList.pages, page);AddArraySlot(book.rendering, pageList);// Browsers & “Page Hints”b1 := {	name: "Contents",  list: []};bp1 := [];		// “Page Hints” for list browserAddArraySlot(b1.list, {	// 0	item: c1});AddArraySlot(bp1, 1);AddArraySlot(b1.list, {	// 1	item: c4});AddArraySlot(bp1, 2);AddArraySlot(b1.list, {	// 2	item: c24});AddArraySlot(bp1, 3);AddArraySlot(b1.list, {	// 3	item: c26});AddArraySlot(bp1, 4);AddArraySlot(b1.list, {	// 4	item: c28});AddArraySlot(bp1, 8);AddArraySlot(b1.list, {	// 5	item: c41});AddArraySlot(bp1, 9);AddArraySlot(b1.list, {	// 6	item: c43});AddArraySlot(bp1, 10);AddArraySlot(b1.list, {	// 7	level: 2,	item: c55});AddArraySlot(bp1, 10);AddArraySlot(b1.list, {	// 8	level: 3,	item: c56});AddArraySlot(bp1, 10);AddArraySlot(b1.list, {	// 9	level: 3,	item: c58});AddArraySlot(bp1, 11);AddArraySlot(b1.list, {	// 10	level: 3,	item: c60});AddArraySlot(bp1, 11);AddArraySlot(b1.list, {	// 11	level: 3,	item: c62});AddArraySlot(bp1, 12);AddArraySlot(b1.list, {	// 12	level: 3,	item: c66});AddArraySlot(bp1, 12);AddArraySlot(b1.list, {	// 13	level: 3,	item: c68});AddArraySlot(bp1, 13);AddArraySlot(b1.list, {	// 14	level: 3,	item: c70});AddArraySlot(bp1, 13);AddArraySlot(b1.list, {	// 15	level: 3,	item: c72});AddArraySlot(bp1, 14);AddArraySlot(b1.list, {	// 16	level: 3,	item: c74});AddArraySlot(bp1, 14);AddArraySlot(b1.list, {	// 17	level: 3,	item: c76});AddArraySlot(bp1, 14);AddArraySlot(b1.list, {	// 18	level: 3,	item: c78});AddArraySlot(bp1, 15);AddArraySlot(b1.list, {	// 19	level: 2,	item: c80});AddArraySlot(bp1, 15);AddArraySlot(b1.list, {	// 20	level: 3,	item: c81});AddArraySlot(bp1, 15);AddArraySlot(b1.list, {	// 21	level: 3,	item: c83});AddArraySlot(bp1, 16);AddArraySlot(b1.list, {	// 22	level: 3,	item: c85});AddArraySlot(bp1, 16);AddArraySlot(b1.list, {	// 23	level: 3,	item: c87});AddArraySlot(bp1, 17);AddArraySlot(b1.list, {	// 24	level: 3,	item: c89});AddArraySlot(bp1, 18);AddArraySlot(b1.list, {	// 25	level: 3,	item: c91});AddArraySlot(bp1, 18);AddArraySlot(b1.list, {	// 26	level: 3,	item: c93});AddArraySlot(bp1, 19);AddArraySlot(b1.list, {	// 27	level: 3,	item: c95});AddArraySlot(bp1, 19);AddArraySlot(b1.list, {	// 28	level: 3,	item: c97});AddArraySlot(bp1, 20);AddArraySlot(b1.list, {	// 29	level: 3,	item: c99});AddArraySlot(bp1, 21);AddArraySlot(b1.list, {	// 30	level: 3,	item: c101});AddArraySlot(bp1, 21);AddArraySlot(b1.list, {	// 31	level: 3,	item: c103});AddArraySlot(bp1, 22);AddArraySlot(b1.list, {	// 32	level: 2,	item: c105});AddArraySlot(bp1, 23);AddArraySlot(b1.list, {	// 33	level: 3,	item: c106});AddArraySlot(bp1, 23);AddArraySlot(b1.list, {	// 34	level: 2,	item: c108});AddArraySlot(bp1, 23);AddArraySlot(b1.list, {	// 35	level: 3,	item: c109});AddArraySlot(bp1, 23);AddArraySlot(b1.list, {	// 36	level: 3,	item: c111});AddArraySlot(bp1, 25);AddArraySlot(b1.list, {	// 37	level: 3,	item: c113});AddArraySlot(bp1, 25);AddArraySlot(b1.list, {	// 38	level: 3,	item: c115});AddArraySlot(bp1, 25);AddArraySlot(b1.list, {	// 39	level: 2,	item: c117});AddArraySlot(bp1, 26);AddArraySlot(b1.list, {	// 40	level: 3,	item: c118});AddArraySlot(bp1, 26);AddArraySlot(b1.list, {	// 41	level: 3,	item: c120});AddArraySlot(bp1, 26);AddArraySlot(b1.list, {	// 42	level: 3,	item: c122});AddArraySlot(bp1, 26);AddArraySlot(b1.list, {	// 43	level: 3,	item: c124});AddArraySlot(bp1, 27);AddArraySlot(b1.list, {	// 44	level: 3,	item: c126});AddArraySlot(bp1, 27);AddArraySlot(b1.list, {	// 45	item: c128});AddArraySlot(bp1, 28);AddArraySlot(b1.list, {	// 46	level: 2,	item: c130});AddArraySlot(bp1, 28);AddArraySlot(b1.list, {	// 47	level: 3,	item: c131});AddArraySlot(bp1, 28);AddArraySlot(b1.list, {	// 48	level: 3,	item: c133});AddArraySlot(bp1, 28);AddArraySlot(b1.list, {	// 49	level: 2,	item: c135});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 50	level: 3,	item: c136});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 51	level: 3,	item: c138});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 52	level: 3,	item: c140});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 53	level: 3,	item: c142});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 54	level: 3,	item: c144});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 55	level: 3,	item: c146});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 56	level: 3,	item: c148});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 57	level: 3,	item: c150});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 58	level: 3,	item: c152});AddArraySlot(bp1, 29);AddArraySlot(b1.list, {	// 59	level: 3,	item: c154});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 60	level: 3,	item: c156});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 61	level: 3,	item: c158});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 62	level: 3,	item: c160});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 63	level: 3,	item: c162});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 64	level: 3,	item: c164});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 65	level: 3,	item: c166});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 66	level: 3,	item: c168});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 67	level: 3,	item: c170});AddArraySlot(bp1, 30);AddArraySlot(b1.list, {	// 68	level: 3,	item: c172});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 69	level: 3,	item: c174});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 70	level: 3,	item: c176});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 71	level: 3,	item: c178});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 72	level: 3,	item: c180});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 73	level: 3,	item: c182});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 74	level: 3,	item: c185});AddArraySlot(bp1, 31);AddArraySlot(b1.list, {	// 75	level: 3,	item: c187});AddArraySlot(bp1, 32);AddArraySlot(b1.list, {	// 76	level: 3,	item: c189});AddArraySlot(bp1, 32);AddArraySlot(b1.list, {	// 77	level: 3,	item: c191});AddArraySlot(bp1, 32);AddArraySlot(b1.list, {	// 78	level: 3,	item: c193});AddArraySlot(bp1, 32);AddArraySlot(b1.list, {	// 79	item: c195});AddArraySlot(bp1, 33);AddArraySlot(b1.list, {	// 80	level: 2,	item: c196});AddArraySlot(bp1, 33);AddArraySlot(b1.list, {	// 81	level: 2,	item: c201});AddArraySlot(bp1, 37);AddArraySlot(b1.list, {	// 82	item: c207});AddArraySlot(bp1, 39);AddArraySlot(b1.list, {	// 83	level: 2,	item: c208});AddArraySlot(bp1, 39);AddArraySlot(b1.list, {	// 84	level: 2,	item: c210});AddArraySlot(bp1, 40);AddArraySlot(b1.list, {	// 85	level: 2,	item: c212});AddArraySlot(bp1, 40);AddArraySlot(b1.list, {	// 86	item: c214});AddArraySlot(bp1, 43);AddArraySlot(b1.list, {	// 87	level: 2,	item: c215});AddArraySlot(bp1, 43);AddArraySlot(b1.list, {	// 88	level: 2,	item: c217});AddArraySlot(bp1, 43);AddArraySlot(b1.list, {	// 89	level: 2,	item: c219});AddArraySlot(bp1, 43);AddArraySlot(b1.list, {	// 90	level: 2,	item: c221});AddArraySlot(bp1, 44);AddArraySlot(b1.list, {	// 91	level: 2,	item: c223});AddArraySlot(bp1, 44);AddArraySlot(b1.list, {	// 92	level: 2,	item: c225});AddArraySlot(bp1, 44);AddArraySlot(b1.list, {	// 93	level: 2,	item: c227});AddArraySlot(bp1, 45);AddArraySlot(b1.list, {	// 94	level: 2,	item: c229});AddArraySlot(bp1, 45);AddArraySlot(b1.list, {	// 95	level: 2,	item: c231});AddArraySlot(bp1, 46);AddArraySlot(b1.list, {	// 96	level: 2,	item: c233});AddArraySlot(bp1, 46);AddArraySlot(b1.list, {	// 97	level: 2,	item: c235});AddArraySlot(bp1, 46);AddArraySlot(b1.list, {	// 98	level: 2,	item: c237});AddArraySlot(bp1, 46);AddArraySlot(b1.list, {	// 99	level: 2,	item: c239});AddArraySlot(bp1, 46);AddArraySlot(b1.list, {	// 100	level: 2,	item: c241});AddArraySlot(bp1, 47);AddArraySlot(b1.list, {	// 101	level: 2,	item: c243});AddArraySlot(bp1, 47);AddArraySlot(b1.list, {	// 102	level: 2,	item: c245});AddArraySlot(bp1, 47);AddArraySlot(b1.list, {	// 103	level: 2,	item: c247});AddArraySlot(bp1, 47);AddArraySlot(b1.list, {	// 104	level: 2,	item: c249});AddArraySlot(bp1, 47);AddArraySlot(b1.list, {	// 105	level: 2,	item: c251});AddArraySlot(bp1, 48);AddArraySlot(b1.list, {	// 106	level: 2,	item: c253});AddArraySlot(bp1, 48);AddArraySlot(b1.list, {	// 107	level: 2,	item: c255});AddArraySlot(bp1, 48);AddArraySlot(book.browsers, b1);AddArraySlot(pageList.contents, bp1);// Indices and Sub-Indices
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Creating Large Strings</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Creating Large Strings</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Creating Large Strings  (1/3/97)</H3><DL><DD>Q:    What is the best way to create a really large string?<BR><BR>A:    The best way is to create the string as a virtual binary object (VBO).  VBOs are described in the chapter "Data Storage and Retrieval" in the Newton Programmer's Guide.<BR><BR>    To create a string as a VBO, you first need to create a VBO of class <CODE>'string</CODE>.  Next, you need to use the global function <CODE>BinaryMunger</CODE> to munge an empty string into the VBO.  This will properly prepare the binary object to be used as a NewtonScript string.<BR><BR>    Finally, use the global function <CODE>StrMunger</CODE> as often as needed to copy new string data into the VBO.  Here is a code example:<BR><BR><CODE><PRE>// Prepare a VBO to be the stringlocal myString := GetDefaultStore():NewVBO( 'string, Length("") );BinaryMunger( myString, 0, nil, "", 0, nil );StrMunger( myString, StrLen( myString ), nil, "My new string", 0, nil );// Repeat with more data if necessary...</PRE><BR></CODE>    <BR>    Note that unlike the C language's <CODE>stdio</CODE> library function, the NewtonScript <CODE>StrLen</CODE> function does not need to traverse the string to determine the string length, so you probably don't need to worry about performance hits from its usage.<BR><BR>    Not all NewtonScript routines will necessarily "preserve" the VBO nature of large strings. For instance, if you concatenate strings using the <CODE>Stringer</CODE> global function or the & or && operators, the result is currently a non-VBO string. Be aware that if you accidentally create a very large  non-VBO string, the code may throw a "out of NewtonScript heap memory" <CODE>evt.ex.outofmem</CODE> exception.</DL>
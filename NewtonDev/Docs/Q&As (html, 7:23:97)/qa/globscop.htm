<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Global Name Scope</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Global Name Scope</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Global Name Scope  (6/7/94)</H3><DL><DD>Q:    What is the scope of global variables and functions?<BR><BR>A:    In NewtonScript, global functions and variables are true globals. This means that if you create global functions and global variables, you might get name clashes with other possible globals. As this system is dynamic, you can't do any pre-testing of existing global names.<BR><BR>    Here are two recommended solutions in order to avoid name space problems:<BR><BR>    Use your signature in any slot you create that is outside of the domain of your own application.<BR><BR>    Unless you really want a true global function or variable, place the variable or function inside your base view template.  You are actually able to call this function or access this variable from other applications, because the base view is declared to the root level.<BR><BR>    If you really need to access the function or variable from a view that is not a descendent of your base view (like a floater that is a child of the root view), you might do something like:<BR><BR><CODE><PRE>    if getroot().|MyBaseView:MySIG| then        begin            getroot().|MyBaseView:MySIG|:TestThisView();            local s := getroot().|MyBaseView:MySIG|.BlahSize;        end;</CODE></PRE></DL>
DefConst(	'kExampleFSMContext,				{	fTheAnswerToTheUltimateQuestionOfLifeTheUniverseAndEverything:		nil,										DebugFSM:				func(reason, state, event, params)													begin														local s :=	"Reason = " & :ObjectToString(reason)																	& "\nState = " & :ObjectToString(state)																	& "\nEvent = " & :ObjectToString(event)																	& "\nParams = " & :ObjectToString(params);																												:MTrace(s);														print(SubstituteChars(s, "\n", "\t"));													end,										ExceptionHandler:		func(exception)													begin														inherited:?ExceptionHandler(exception);		// Implement your own exception handler here, or use the cheesy default one provided by protoFSM.													end,										MTrace:					func(s)													begin														SetValue(GetRoot().(kAppSymbol).vTraceBox, 'text, s);														RefreshViews();													end,										TraceFSM:				func(when, state, event, params)													begin														local s :=	"When = " & :ObjectToString(when)																	& "\nState = " & :ObjectToString(state)																	& "\nEvent = " & :ObjectToString(event)																	& "\nParams = " & :ObjectToString(params);																												:MTrace(s);														print(SubstituteChars(s, "\n", "\t"));													end,	}	);DefConst(	'kExampleFSM,				call kFSMBuildTemplateFunc with (	'ExampleFSM,																		kExampleFSMContext,																		HOME & "ExampleFSM.f",																		GetLayout("protoFSM")		)	);// See ResetFSM in Main.t for Instantiate syntax.
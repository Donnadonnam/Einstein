Set Exit 0set new-project-name ""set new-project-name "`Echo -n "{{new-project-name}}" | CoolRequest -d -t -q "Enter a new project name∂n(25 characters max)"`"if "{new-project-name}" == "" or "{new-project-name}" =~ /[ ]+/	 Exit 1endecho "{new-project-name}" > "{NCTScratch}temp.text"evaluate _new_namelen = `count -c "{NCTScratch}temp.text"`delete -i "{NCTScratch}temp.text"if {_new_namelen} > 25 	Alert "Sorry, a project name must be 25 or fewer characters to allow for filename extensions; e.g “.exp.o”."	Exit 1endif "{new-project-name}" =~ /≈[∂"∂']≈/	Alert "Sorry, an project folder name may not contain either single or double quotes (∂" or ')! ∂nThe MPW Make tool can't use a makefile containing such pathnames. "	Exit 1endif "{new-project-name}" =~ /([0-9 ]«1»[ 0-9]*)®1/	set _numb_name "{®1}"	if "{_numb_name}" == "{new-project-name}"		Alert "Sorry, an project folder name may not consist of just digits and spaces or begin with a digit. "	endendSet _NCT_saved-dir "`directory -q`"# Now if the current directory is NOT an _NCT or _DDK folder# then set current directory to the NCT Projects root folder# so the GetFileName starts in a relevant directoryif !( "{_NCT_saved-dir}" =~ /≈_NCT/ || "{_NCT_saved-dir}" =~ /≈_DDK/)	directory "{NCTSources}"endSet _NCT_projpath "`GetFileName -b "Select" -wd -q -m "Create new project within" && Set _nct_rqst {status} || Set Status 0`"Set Exit 1If !{_nct_rqst}	Set _NCT_leafdir ""	Set _NCT_leadpath ""	if `Evaluate "{_NCT_projpath}" =~ /(≈)®2:(≈_NCT)®1:/`		Set _suffix_ "_NCT"		Set _NCT_leafdir "{®1}"		Set _NCT_leadpath "{®2}"	else if `Evaluate "{_NCT_projpath}" =~ /(≈)®2:(≈_DDK)®1:/`		Set _suffix_ "_DDK"		Set _NCT_leafdir "{®1}"		Set _NCT_leadpath "{®2}"	end##	Echo "### leadpath = “{_NCT_leadpath}” "		if  "{_NCT_leadpath}:" != "{NCTSources}"		Alert "Please select a folder within your projects folder."		Exit 1	endElse		Echo "### operation cancelled by user "		Exit 1End# Echo "# leafdir = “{_NCT_leafdir}” "if "{new-project-name}" ≠ ""	Set new-project-path "{_NCT_projpath}{new-project-name}"	if "`Exists "{new-project-path}"`" == ""		NewFolder "{new-project-path}" || ( Alert " Unable to create the folder “{new-project-name}” " ; Exit 1 )	else 		if `files "{new-project-path}" | count -l` != 0		 ( Alert "Sorry, a project already exists with the name “{new-project-name}”. Choose another name" ; Exit 1 )		end	endenddirectory "{new-project-path}"IF "`Exists -f "FilesInBuild"`" == ""	# if there isn't a FilesInBuild file now then create a proto version for user	if "{_suffix_}" == "_NCT"		(		Echo "# NCT project created on `Date` " 		Echo "#     by {NCTMenuName} "  		Echo "#NTKCodeModule"				Echo "∂n"'LocalFunctionSetFile="'"{new-project-name}.exp"'"'		Echo "∂n"'LocalLinkOptions="-debug"'		Echo "∂n"'LocalARMCppOptions="-W -gf "'		Echo "∂n# add more lines like those below for other include directories needed by your project source files."		Echo     '-i  "{NCT_Includes}"'		Echo     '-ic "{NCT_Includes}CLibrary"'		Echo     '-ic "{NCT_Includes}Frames"'		Echo     '-ic "{NCT_Includes}Utilities"'		Echo "∂n-srcdirs ∂':∂'"				Echo "∂n# add lines here with the names of your source files"		Echo "# ARMCpp  		will compile files named with the suffix .cp"		Echo "# ARMCpp -ansic   will compile files named with the suffix .c"		Echo "# ARMAsm 			will compile files named with the suffix .a"				Echo "∂n∂n∂"∂{Objects-dir∂}{new-project-name}.exp.o∂""		Echo '"{NCT_Libraries}NewtonInterfaceLib.o"'		Echo "∂nMakefile"				) > :FilesInBuild	else		(		Echo "# DDK project created on `Date` " 		Echo "#     by {NCTMenuName} "  		Echo "#PackageofParts"				Echo "∂n"'LocalLinkOptions="-dupok "'		#### Remove -dupok when proper C++ library is included ####		Echo "∂n"'LocalARMCppOptions="-cfront -W "'		Echo "∂n"'LocalCfronttOptions=""'		Echo "∂n"'LocalCfrontCOptions="-W "'		Echo "∂n"'LocalCOptions="-d forARM "'		Echo "∂nLocalPackerOptions=∂" -packageid 'xxxx' -copyright 'Copyright (c) 1995 Apple Computer, Inc.'∂""				Echo "∂n# add/change/delete lines like those below for other include files needed by your source files."	 		Echo     '-i  "{DDK_Includes-dir}"'		Echo     '-ic "{DDK_Includes-dir}Bootstrap"'		Echo     '-ic "{DDK_Includes-dir}CLibrary"'		Echo     '-ic "{DDK_Includes-dir}CommAPI"'		Echo     '-ic "{DDK_Includes-dir}Communications"'		Echo     '-ic "{DDK_Includes-dir}Frames"'		Echo     '-ic "{DDK_Includes-dir}HAL"'		Echo     '-ic "{DDK_Includes-dir}OS600"'		Echo     '-ic "{DDK_Includes-dir}Packages"'		Echo     '-ic "{DDK_Includes-dir}Power"'		Echo     '-ic "{DDK_Includes-dir}PSS"'		Echo     '-ic "{DDK_Includes-dir}QD"'		Echo     '-ic "{DDK_Includes-dir}Toolbox"'		Echo     '-ic "{DDK_Includes-dir}UtilityClasses"'		Echo "∂n-srcdirs ∂':∂'∂n"				Echo '-tpart -protocol -aif "{Objects-dir}'"{new-project-name}.bin"'" -autoload -autoRemove'		Echo "# add lines here with the names of your protocol source files∂n"		Echo "# ARMCpp  		will compile files named with the suffix .cp"		Echo "# ARMCfront		will compile files named with the suffix .cf"		Echo "# ARMCpp -ansic   will compile files named with the suffix .c"		Echo "# ARMAsm 			will compile files named with the suffix .a"		if "`Exists "{DDK_Libraries-dir}2.0Glue.a.o"`" ≠ ""			Echo "∂n"'"{DDK_Libraries-dir}2.0Glue.a.o"'		else			Echo "∂n"'"{DDK_Libraries-dir}CardGlue.a.o"'		end		Echo "∂nMakefile"				Echo "∂n# Repeat the -tpart line above for other -protocol parts or -frame parts, etc"		Echo "# and follow it with source/library file lines to build it"		Echo "# use a line like this ‘-clike ExampleTool.impl.h’ for the .impl.h files of a protocol"				Echo "∂n# following line defines the final build target name followed by the “package name” "		Echo "#  and any other Packer options you didn't define above in the LocalPackerOptions= definition. "		Echo '-tpackage "{Objects-dir}'"{new-project-name}.pkg∂" ∂"{new-project-name}∂" -version 01"				) > :FilesInBuild	endENDIF "{_suffix_}" == "_NCT"	If "`Exists -f ":{new-project-name}.exp"`" == ""		( Echo "{new-project-name}"		  Echo "; replace the name above with the name of your code module"		  Echo "; This name will be used in NewtonScript to call your C functions. "		  Echo ";    e.g. “ Call myModuleName.aFunction(...) ” "		  Echo "; Below, add one line per function naming each of your NewtonScript interface functions."		  		 ) > ":{new-project-name}.exp"	EndEND if "`Exists ":{NCT-ObjectOut}:"`" == ""	NewFolder ":{NCT-ObjectOut}:" || ( Alert " Unable to create the :{NCT-ObjectOut}: folder in your project folder " ; Exit 1 )endSet _Alertmsg "The folder “{new-project-name}” was created with a prototype “FilesInBuild” file"if "{_suffix_}" == "_NCT"	Set _Alertmsg "{_Alertmsg} and a {new-project-name}.exp file."else	Set _Alertmsg "{_Alertmsg}."endSet _Alertmsg "{_Alertmsg}  Create your source files & edit the file(s) as directed by their comments."Set _Alertmsg "{_Alertmsg}∂nThen select the “Build Project Makefile” menu item."Alert "{_Alertmsg}"# Now add the _NCT_leafdir name to project list if its a new one so NCTMenuInstall will add it to the menuIf "{{NCT_ProjectsList}}" ≠ ""	Set _NCT_notfound 1	For _NCT_dircty in {NCT_ProjectsList}		if "{_NCT_dircty}" == "{_NCT_leafdir}"			Set _NCT_notfound 0		end	End #For	if {_NCT_notfound}		Set NCT_ProjectsList "{{NCT_ProjectsList}}∂"{_NCT_leafdir}∂" " ; Export NCT_ProjectsList	endEndUnset _suffix_Unset _nct_rqstUnset _NCT_notfoundUnset new-project-nameUnset new-project-path"{NCTTools}NCTMenuInstall"# now erase the current project defintionSet NCT_Makefile-dir ""Set NCT_project-name ""directory "{_NCT_saved-dir}"unset _NCT_saved-dir
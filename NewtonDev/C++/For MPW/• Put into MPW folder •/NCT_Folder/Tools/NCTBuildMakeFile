#	File:		NCTBuildMakefile ##	Contains:	commands to invoke MakeMake for a Newton C Toolkit project#				which must have been selected from the NewtonCTool menus##	Written by:	xxx put writers here xxx##	Copyright:	© 1991-1995 by Apple Computer, Inc., all rights reserved.##	Change History (most recent first):##		<04>	03/12/96	joa		re-arrange some variables names to refelect CFront in DDK's only#		<02>	08/01/95	joa		cleanup details and add echo comments#		<01>	 4/21/95	JOA		started derivation for Newton C++ Tools versionif {TraceFailures} ; Echo "## Beginning NCTBuildMakeFile script" ; endSet CaseSensitive 0Set NCT-OldDir "`directory -q`"if "{NCT_Makefile-dir}" == "" || "{NCT_project-name}" == ""	Alert "Error: You have not selected a project from the {NCTMenuName} menu.  Make a selection and try again."	Exit 2endSet target-dir "{NCT_Makefile-dir}"If "`Exists "{target-dir}"`" == ""	Alert "Directory “{target-dir}” does not exist.  Please try again." 	Exit 1End## __________________________ assign the Defs _______________________________________________________________Set Makefile "Makefile"Set FilesInBuild "FilesInBuild"Set MakefileDef  "MAKEFILE={Makefile}"Set ObjectsDirDef 'Objects-dir=":{NCT-ObjectOut}:"'Set FullMakefile "{target-dir}{Makefile}"Set FullFilesInBuild "{target-dir}{FilesInBuild}"# check that the makefile is checked out modifiableIf "`Exists "{FullMakefile}"`" ≠ ""	Set Info "`ProjectInfo -s "{FullMakefile}"`"	If "{Info}" ≠ ""	  if "{Info}" !~ /≈,[0-9a-z]+[*+]∂'/		Alert  "Error: “{{Makefile}}” is not checked out modifiable. Please checkout the file and try again. "		Exit 2 	  end	EndEndIf "`Exists "{FullFilesInBuild}"`" ≠ ""	echo "∂• Creating MakeMake command from your “FilesInBuild” file."	echo "∂•  for the {NCT_project-name} project."Else	Alert "Error: Couldn't find the file named “{FilesInBuild}” in your project folder. Please create one and try again"End# __________________________________________________________________________________________________________Set AsmDef 			'"Asm={NCT-asm} {NCT-asm-options} {LocalAsmOptions}"'Set CDef			'"C={NCT-ARMc} {NCT-ARMc-options} "'Set COptionsDef		'"COptions={NCT_DebugSwitch} {LocalCOptions}"'# these are here to support building DDK makefilesSet CFrontDef		'"CFront={NCT-cfront} {NCT-cfront-options} {LocalCFrontOptions}"'Set CFrontCDef		'"CFrontC={NCT-cfront-c} {NCT-cfront-c-options} {LocalCfrontCOptions}"'Set ARMCPlusDef		'"ARMCPlus={NCT-ARMCpp} {NCT-ARMCpp-options} {LocalARMCppOptions}"'Set LibDef 			'"LIB={NCT-lib} {NCT-lib-options} {LocalLibOptions} "'Set SetFileDef		'"SETFILE={NCT-setfile-cmd}"'Set SetFileOptsDef	'"SETFILEOPTS="'Set LinkDef 		'"LINK={NCT-link}"'Set LinkOptionsDef	'"LINKOPTS={NCT-link-options} {LocalLinkOptions} "'Set ProtocolOptionsDef	""Set PramDef 		'"Pram={NCT-pram} {NCT-pram-options} {LocalPRAMOptions} "'# __________________________________________________________________________________________________________Set PostFileDef '-post "{NCTTools}"DDKBuildMakefile.Post'Set needSrcDirs 0(Search -sf /-srcdirs/ "{{FullFilesInBuild}}" || Set needSrcDirs 1) > Dev:NullIf {needSrcDirs}	Set srcdirsDef "-srcdirs :"Else	Set srcdirsDef ""EndDirectory "{{target-dir}}"Unset NCT_CustomtextSet buildingProtocolPart 	0Set buildingFormPart 		0Set buildingPrebuiltPackage 0Set buildingNTKModule 		0Set buildingPkgofParts 		0Set buildingTestImage 		0# use SteamEdit to scan for embedded command switches (only opens FilesInBuild once)# NCTScanFilesInBuild returns a string of the form “buildingxxxxx = 1” which # Evaluate then uses to set one of the above variablesEvaluate `"{NCTTools}NCTScanFilesInBuild.sed"`Set theTargetDef ""If {buildingFormPart} || {buildingProtocolPart}	Set targetName '"{Objects-dir}'"{NCT_project-name}"'.pkg"'	Set LibDef 		'"LIB={NCT-link} -base 0 {NCT-link-options} {LocalLinkOptions}"'	Set ProtocolOptionsDef	'"ProtocolOptions=-package"'	If {buildingFormPart}		Set preoptions "-frames -aif"	Else		Set preoptions "-protocol -aif"	End	Set NCT_CustomText '{NCT-setfile-cmd} -t "{{NCT-lib-filetype}}" -c "{{NCT-lib-filecreator}}" {Targ}'∂∂n∂t'"{NCT-packer}" -o "{Objects-dir}'"{{NCT_project-name}}"'.pkg" "'"{{NCT_project-name}}"'" {NCT-packer-options} {LocalPackerOptions} '∂"{{preoptions}}"' {Targ} {LocalPartOptions}'∂n∂t'Rename -y {Targ} "{Objects-dir}'"{{NCT_project-name}}"'.sym"'∂∂n∂t'Rename -y "{Objects-dir}'"{{NCT_project-name}}"'.pkg" {Targ}'	Set theTargetDef "-t {{targetName}} -f ∂'-t ∂"pkg ∂" -c ∂"{NCT-package-creator}∂"∂'"Else if {buildingPkgofParts}# targetName extracted from the FilesInBuild line containing -t xxxxxxxxxxx	Set NCT-pkg-filetype '"pkg "'	Set _PackerCmd '-lcustom '∂''"{NCT-packer}" -o {Targ} '	Set ProtocolOptionsDef	'"ProtocolOptions=-package"'	Set NCT_Customtext ''Else If {buildingPrebuiltPackage}	Set targetName '"{Objects-dir}'"{NCT_project-name}"'.pkg"'	Set LibDef 		'LIB='	Set NCT_ExtraCustom 'Duplicate -y "'"{{NCT_project-name}}"'.pkg" {Targ}'	Set theTargetDef "-t {{targetName}} -f ∂'-t ∂"pkg ∂" -c ∂"{NCT-package-creator}∂"∂'"Else If {buildingTestImage}	Set targetName '"{Objects-dir}'"{NCT_project-name}"' image"'	set theTargetDef "-t ∂"{{NCT_project-name}}∂" -f ∂'-t ∂"aif ∂" -c ∂"HMR6∂" ∂'"	Set NCT_Customtext ''Else If {buildingNTKModule}	Set PostFileDef '-post "{NCTTools}"NCTBuildMakefile.Post'	Set targetName '"{Objects-dir}'"{NCT_project-name}"'.ntkc"'	Set theTargetDef "-t {{targetName}} "	Set SetFileOptsDef '"SETFILEOPTS= -a C "'   # 	Set LinkOptionsDef '"LINKOPTS={NCT-link-options} -rel {LocalLinkOptions} "'	if "{NCT-NTKapplname}" ≠ "" && "`which SendAE ≥ Dev:Null`" ≠ ""	Set NCT_Customtext 'Rename -y {Targ} "{Objects-dir}'"{{NCT_project-name}}"'.sym"'∂∂n∂t'{NCT-AIFtoNTK} {LocalAIFtoNTKOptions} -via "{LocalFunctionSetFile}" -o  {Targ} "{Objects-dir}'"{{NCT_project-name}}"'.sym" '∂∂n∂t'Rez "{NCTTools}NCTIcons.r" -i "{RIncludes}" -append -o {Targ}'∂∂n∂t"SendAE -e ∂"NTK BILD∂" -t ∂"{NCT-NTKapplname}∂" || Set Status 0"	else		Set NCT_Customtext 'Rename -y {Targ} "{Objects-dir}'"{{NCT_project-name}}"'.sym"'∂∂n∂t'{NCT-AIFtoNTK} {LocalAIFtoNTKOptions} -via "{LocalFunctionSetFile}" -o  {Targ} "{Objects-dir}'"{{NCT_project-name}}"'.sym" '∂∂n∂t'Rez "{NCTTools}NCTIcons.r" -i "{RIncludes}" -append -o {Targ}'	end	Else	Alert "If “{NCT_project-name}” is a package, its FilesInBuild must contain a line containing #FormPart, #ProtocolPart, "∂			 "#PackageofParts, or #PrebuiltPackage otherwise, it should contain #NTKCodeModule."	Exit 1End###  newt build system allowed running "FilesInBuild" thru Cfront preprocessor for conditionals and inclusion, but WE don'tif {buildingPkgofParts}# Invoke script that runs StreamEdit using itself as its cmd-script on the FilesInBuild# and produces a converted version of FilesInBuild   _NCT_MakeMakeExt.seout, which is later read as MakeMake parameters below	"{NCTTools}NCTBuildPkgofParts.sed" "{{_PackerCmd}}"  || (Alert "Error: NCTBuildMakeFIle Conversion of FilesInBuild Failed" ; Exit 1)	Set tempFullFilesInBuild "{NCTScratch}_NCT_MakeMakeExt.seout"else	Set tempFullFilesInBuild "{FullFilesInBuild}"endif "{{NCT_Customtext}}" ≠ "" 	Set NCT_lcustom "-lcustom '{{NCT_Customtext}}'"else	unset NCT_lcustomendecho "• Running MakeMake to create “Makefile”."if {TraceFailures} ; Set Echo 1 ; endMakeMake -nosys -nomacro -nodoth -nodotr -nosrcs			∂	{MakefileDef}											∂	{theTargetDef}											∂															∂	{ObjectsDirDef}											∂	### Source Directories ###								∂	{srcdirsDef}											∂															∂	### Object directory ###								∂	-objdir '{Objects-dir}'									∂															∂	### Which Compiler? ###									∂	{LibDef} 												∂	{LinkDef} 												∂	{LinkOptionsDef} 										∂	{AsmDef}												∂	{CFrontDef}												∂	{CFrontCDef}											∂	{CDef}													∂	{COptionsDef}											∂	{ARMCPlusDef}											∂	{ProtocolOptionsDef}									∂	{PramDef}												∂															∂	{SetFileDef}											∂	{SetFileOptsDef}										∂															∂	### CFront dependency rules ###							∂	{PostFileDef}											∂															∂	{NCT_lcustom} 											∂															∂	`StreamEdit -e "/#≈∂n/ Replace // ''" "{tempFullFilesInBuild}" `  || (Set _nct_make {Status} ; Set Status 0)Set Echo 0if {_nct_make}	echo "∂• MakeMake command failed with status = {_nct_make}."else	echo "∂• MakeMake completed successfully."endUnset _nct_makeIf {buildingPkgofParts} 	Delete "{{tempFullFilesInBuild}}"EndDirectory "{NCT-OldDir}"
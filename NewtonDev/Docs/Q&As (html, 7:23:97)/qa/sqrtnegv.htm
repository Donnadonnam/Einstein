<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Square Root of Negative Number Bug</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Square Root of Negative Number Bug</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Square Root of Negative Number Bug  (3/4/97)</H3><DL><DD>Q:    When I call <CODE>Sqrt</CODE> with a negative number on the Newton, or use <CODE>Compile</CODE> in the NTK Inspector, I get a strange result.  However, if I just type <CODE>sqrt(-2)</CODE> into the listener I get a different strange result.  What's going on?<BR><BR><CODE><PRE>    call compile("sqrt(-2)") with ()    #4412F2D  -1.79769e+308    sqrt(-2)    #440DE05  1.00000e+999</PRE><BR></CODE><BR>A:    There is a floating point library bug in <CODE>Sqrt</CODE> on the Newton OS.  When passed a negative number, the large positive value is returned instead of a not-a-number value.  You can work around it using <CODE>Pow(x, 0.5)</CODE> instead of <CODE>Sqrt(x)</CODE> if there is no way to guarantee that the value passed to <CODE>Sqrt</CODE> is non-negative, or simply check and see if the argument is less than 0 and return a not-a-number constant.<BR><BR>    The reason <CODE>sqrt(-2)</CODE> works differently when you type it into the NTK Inspector is because of a compiler process known as constant folding.  <CODE>Sqrt</CODE> can be evaluated at compile time if you pass it a constant argument.  So what's really happening is that NTK is evaluating the <CODE>Sqrt</CODE> function during the compile phase and passing the resulting floating point number (or rather, not-a-number) to the Newton device where it's promptly returned.  An NTK real number formatting limitation displays non-a-number values and infinities as <CODE>1.00000e+999</CODE> rather than as some other string.  You can use <CODE>IsNAN</CODE> to determine if a real number is a not-a-number value.<BR><BR>    You can avoid constant folding and force evaluation on the Newton device by using a variable. For instance:<BR><CODE><PRE>    x := -2;    y := sqrt(x);    #C4335B1  -1.79769e+308</PRE><BR></CODE><BR>    Also, note that <CODE>FormattedNumberStr</CODE> does not properly handle not-a-number values.  (it returns "Number too small.") <BR></DL>
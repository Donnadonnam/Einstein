# =========== Header ===========# File:					Gestalt.README# Project:				Gestalt# Written by:			Paul Guyot (pguyot@kallisys.net)## Created on:			05/21/2001# Internal version:		1## Copyright:			© 2001 by Paul Guyot.# 						All rights reserved worldwide.# ===========# =========== Change History ===========# 05/21/2001	v1	[PG]	Creation of the file# ===========# You may incorporate this sample code into your applications without# restriction.  This sample code has been provided "AS IS" and the# responsibility for its operation is 100% yours.This C++ sample shows how to mix DDK and NCT APIs.The Newton C++ Tools were inherited from the Newton OS source headers.They were divided into NCT and the DDKs.NCT was just built to allow developers to write C++ functions to manipulate NewtonScript objectsand use the subset of the ANSI C library which is in the ROM. It is limited to 376 functions outof the thousands of functions of the NewtonOS Public APIs.DDKs were built to allow developers to make drivers and therefore are much closer to the NewtonOSAPIs. But NewtonScript isn't thread safe, so they removed any NewtonScript objet manipulation.You may want to use NewtonOS APIs in your NewtonScript-called C++ functions. That's what thissample does. It uses the TUGestalt object which is normally only accessible from the DDKs.If you used the standard NCT way to do things, you would have to call the Gestalt NewtonScriptfunction which means translating data to and from NewtonScript objects, invoking the interpreterwhich will then invoke the native Gestalt function which then will translate data from and toNewtonScript objects. In a nutshell, it would mean a big loss of time.Because some headers have the same name and some constants are defined on both sides, this sampleuses four additional files derived from the Includes and the DDKIncludes. It's still EXPERIMENTALbut it works properly for Waba and the ATA Project (the NewtonScript-called C++ functions part of it).This project is only for NewtonScript-called C++ functions. If you don't need to manipulate NewtonScriptobjects, you'd better use a simple _DDK project.This sample shows what to put in the FilesInBuild file, and in the source file. To build it, launch MPW,select it from the NCT menu, choose Build with NoDebug in the NCT menu.If you don't have the 'Newton Public APIs.o' file, you'll need to comment/uncomment three lines inFilesInBuild. Then choose Build current project from the NCT menu. Finally, launch NTK with the GestaltNTK project, and build the package. It will register the C++ function as a global function.If you want to use the maximum out of NewtonOS public APIs, you must respect the following rules:a/ NEVER call any NewtonScript related functions and NEVER manipulate any NewtonScript object if you arenot in the NewtonScript task. (if you don't play with tasks and if you only design functions which arecalled from NewtonScript, there should be no problem)b/ NEVER call any floating point function if you are not in the NewtonScript task.BTW, some NewtonScript object manipulation functions were not included (e.g. MakeInt). Instead, use themacros (MAKEINT).## ========================================== #### Writing software is more fun than working. #### ========================================== ##
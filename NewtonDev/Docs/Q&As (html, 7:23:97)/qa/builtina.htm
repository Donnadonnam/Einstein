<HTML><HEAD><TITLE>Newton 2.x Q&amp;A Category: Built-In Apps and System Data</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><img src="pictures/newtninc.gif" HEIGHT=42 WIDTH=187 BORDER=0><H2>Newton 2.x Q&amp;A Category: Built-In Apps and System Data</H2><H4>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H2><A HREF="builtina.htm">Built-In Apps and System Data</H2></A><UL><A HREF="#There_Is_No_ProtoFormulasPanel"><B> </B>There Is No ProtoFormulasPanel  (2/5/96)<BR></A><A HREF="#ProtoPrefsRollItem_Undocumented_Slots"><B> </B>ProtoPrefsRollItem Undocumented Slots  (2/6/96)<BR></A><A HREF="#SetEntryAlarm_Does_Not_Handle_Events"><B> </B>SetEntryAlarm Does Not Handle Events  (2/6/96)<BR></A><A HREF="#How_to_Avoid_CardFile_Extensions_"Still_needs_the_card""><B> </B>How to Avoid CardFile Extensions "Still needs the card"  (5/9/96)<BR></A><A HREF="#How_to_Find_Distance_Between_Two_Points_on_the_Earth"><B> </B>How to Find Distance Between Two Points on the Earth  (6/7/96)<BR></A><A HREF="#Avoiding_Query_Bug_in_GetExtraIcons_Call"><B> </B>Avoiding Query Bug in GetExtraIcons Call  (8/2/96)<BR></A><A HREF="#How_to_Get_Labels_for_Custom_Names_Fields"><B> </B>How to Get Labels for Custom Names Fields  (8/13/96)<BR></A><A HREF="#How_to_Add_Confidential_Owner_Data"><B> </B>How to Add Confidential Owner Data  (10/1/96)<BR></A><A HREF="#Adding_Notes_to_Closed_Notes_Application"><B> </B>Adding Notes to Closed Notes Application  (1/14/97)<BR></A><A HREF="#TapAction_Slot_Requires_Text_Slot_to_be_Present"><B> </B>TapAction Slot Requires Text Slot to be Present  (1/15/97)<BR></A><A HREF="#Getting_the_Current_Set_of_Multi-User_Names"><B> </B>Getting the Current Set of Multi-User Names  (3/17/97)<BR></A><A HREF="#Registering_an_Auxillary_Button_for_Newton_Works"><B>NEW: </B>Registering an Auxillary Button for Newton Works  (5/12/97)<BR></A><A HREF="#How_to_Create_Newton_Works_Documents"><B>NEW: </B>How to Create Newton Works Documents  (5/15/97)<BR></A><A HREF="#Reading/Modifying_Newton_Works_Data"><B>NEW: </B>Reading/Modifying Newton Works Data  (5/15/97)<BR></A><A HREF="#Opening_a_Specified_Document_in_Works"><B>NEW: </B>Opening a Specified Document in Works  (5/27/97)<BR></A><A HREF="#Creating_a_Works_Word_Processor_Document_with_Data"><B>NEW: </B>Creating a Works Word Processor Document with Data  (6/9/97)<BR></A><A HREF="#Unregistering_Stamps_in_Newton_Works_Draw"><B>NEW: </B>Unregistering Stamps in Newton Works Draw  (7/2/97)<BR></A></UL><A NAME="There_Is_No_ProtoFormulasPanel"><H3><HR><B> </B>There Is No ProtoFormulasPanel  (2/5/96)</A></H3><DL><DD>Q:    The current documentation says to use <CODE>protoFormulasPanel </CODE>for <CODE>RegFormulas</CODE>, but there does not appear to be such a template.<BR><BR>A:    You are correct, there is no such template. You use a <CODE>protoFloatNGo </CODE>as your base and add your formula elements to it. The only requirements are:<BR><BR>    1. There must be an <CODE>overview </CODE>slot that contains the text to show in the formula's overview.<BR><BR>    2. <CODE>viewbounds.bottom </CODE>must be the height of your panel.<BR><BR>    3. There must be a <CODE>protoTitle </CODE>whose <CODE>title </CODE>slot is the name of the formula panel.<BR></DL><A NAME="ProtoPrefsRollItem_Undocumented_Slots"><H3><HR><B> </B>ProtoPrefsRollItem Undocumented Slots  (2/6/96)</A></H3><DL><DD>Q:    When I try  to open my own system preference, I get a -48204 error. The preference registers OK with the <CODE>RegPrefs </CODE>function.<BR><BR>A:    The documentation on <CODE>protoPrefsRollItem </CODE>is incomplete. You must define an <CODE>overview </CODE>slot which is the text to show in the overview mode. You can optionally define an <CODE>icon </CODE>slot which is an icon for the title in the non-overview mode (a title icon). Note that title icons are much smaller than normal icons.</DL><A NAME="SetEntryAlarm_Does_Not_Handle_Events"><H3><HR><B> </B>SetEntryAlarm Does Not Handle Events  (2/6/96)</A></H3><DL><DD>Q:    I tried to set the alarm of an event using the <CODE>SetEntryAlarm </CODE>calendar message, but the alarm is not set.<BR><BR>A:    It turns out that <CODE>SetEntryAlarm </CODE>will not find events. You need to use a new Calendar API called <CODE>SetEventAlarm</CODE>. This function is provided in the Newton 2.0 Platform File. See the Platform File Notes for more information.<BR><BR></DL><A NAME="How_to_Avoid_CardFile_Extensions_"Still_needs_the_card""><H3><HR><B> </B>How to Avoid CardFile Extensions "Still needs the card"  (5/9/96)</A></H3><DL><DD>Q:    I have a package that registers a data definition and view definition for a new card type for the Names application. If the package is installed on a card and the card is removed, the user gets the following error message:<BR><BR>    "The package &lt;The package name&gt; still needs the card you removed.  Please insert it now, or information on the card may be damaged."<BR><BR>    How can I avoid this problem?<BR><BR>A:    Currently, the cardfile <CODE>AddLayout </CODE>method requires that the symbol in the layout is internal.  This bug will be fixed in a future ROM.  To work around this, do the following:<BR><BR><CODE><PRE>local newLayout := {_proto: GetLayout("A Test Layout")};newLayout.symbol := EnsureInternal (newLayout.symbol);GetRoot().cardfile:AddLayout(newLayout);</PRE><BR></CODE>    For more information about issues for applications running from a PCMCIA card, see the article "The Newton Still Needs the Card You Removed"<BR></DL><A NAME="How_to_Find_Distance_Between_Two_Points_on_the_Earth"><H3><HR><B> </B>How to Find Distance Between Two Points on the Earth  (6/7/96)</A></H3><DL><DD>Q:    Is there an API which calculates the distance between two points on the Earth?<BR><BR>A:    Yes. In the Newton 2.0 ROM there is a global function called <CODE>CircleDistance</CODE> which takes two longitude/latitude pairs and the units to use in reporting the distance, and <CODE>CircleDistance</CODE> returns the distance between the two points.  NTK may give a warning about "<CODE>Unknown global function 'CircleDistance'</CODE>".  This warning can be safely ignored so long as you're writing a package for a Newton 2.0 OS device.<BR><BR>    <CODE>CircleDistance</CODE> (firstLong, firstLat, secondLong, secondLat, units)<BR><BR>    Returns the distance between the two points.  The distance is an integer.  Currently <CODE>CircleDistance</CODE> rounds the distance to the nearest ten miles or ten kilometers.<BR><BR><CODE>    firstLong</CODE>:  The longitude for the first point on the Earth.<BR><CODE>    firstLat</CODE>:  The latitude for the first point on the Earth.<BR><CODE>    secondLong</CODE>:  The longitude for the second point on the Earth.<BR><CODE>    secondLat</CODE>:  The latitude for the second point on the Earth.<BR><CODE>    units</CODE>:  A symbol specifying the units in which the distance will be calculated.  Currently the options are <CODE>'miles</CODE> or <CODE>'kilometers</CODE>.<BR><BR>    Note: the longitude and latitude arguments need to be integer values of the type used by <CODE>NewCity</CODE>.  Check the section titled "Using the Time Zone Application" in the Built-In Applications and System Data chapter of the Newton Programmer's Guide for information on how to convert a longitude or latitude in degrees, minutes & seconds to an integer for <CODE>CircleDistance</CODE>.</DL><A NAME="Avoiding_Query_Bug_in_GetExtraIcons_Call"><H3><HR><B> </B>Avoiding Query Bug in GetExtraIcons Call  (8/2/96)</A></H3><DL><DD>Q:    Some calls to <CODE>GetExtraIcons</CODE> result in an undefined <CODE>Query</CODE> method exception. How can I fix this?<BR><BR>A:    There is a bug in the implementation of <CODE>GetExtraIcons</CODE>. The code is not checking if the store has any extras information on it, so the <CODE>Query</CODE> message is getting sent to a <CODE>NIL</CODE> soup. The result is the exception.<BR><BR>    At this time it is not clear if or when this bug will be fixed. I suggest you use the following workaround code when you call <CODE>GetExtraIcons</CODE>:<BR><BR><CODE><PRE>    try        GetExtraIcons(...)        // do whatever you need to do here            onexception |evt.ex.fr.intrp;type.ref.frame| do    begin        // check for a problem calling the Query function        if currentException().data.errorCode = -48809 AND                currentException().data.symbol = 'Query then        begin            // no extras drawer info on the store        end ;        else            // a real error has occured, so let system handle it            ReThrow() ;    end ;</CODE></PRE></DL><A NAME="How_to_Get_Labels_for_Custom_Names_Fields"><H3><HR><B> </B>How to Get Labels for Custom Names Fields  (8/13/96)</A></H3><DL><DD>Q:    The Names application allows the user to add custom fields.  If I have a specific entry, the cardfile method <CODE>bcCustomFields</CODE> returns the labels and values of the custom fields used in the entry.  Is there a way to get a list of all the custom fields the user has defined?<BR><BR>A:    Yes, you can pass <CODE>'customFields </CODE>to the names soup method <CODE>GetInfo</CODE>.  This will return a frame of all the custom fields the user has defined.  Each slot in this frame will have a frame with a <CODE>'label</CODE> slot.  Each <CODE>'label</CODE> slot will be a string specified by the user.  Here is an example:<CODE><PRE>    GetStores()[0]:GetSoup(ROM_CardFileSoupName):GetInfo('customFields)</PRE><BR></CODE>     ...which returns:<BR><CODE><PRE>{custom1: {label: "Customer Label"},  custom2: {label: "Another label"}}</CODE></PRE></DL><A NAME="How_to_Add_Confidential_Owner_Data"><H3><HR><B> </B>How to Add Confidential Owner Data  (10/1/96)</A></H3><DL><DD>Q:    If I add confidential information to the Newton owner's card, all the information is beamed when the user beams the owner card.  How can I keep confidential information from being sent?<BR><BR>A:    Every owner entry has an <CODE>owner</CODE> slot, the value of which is a frame.  This slot is removed from the entry before it is sent to another Newton device.  You can add slots to this frame to store them, but keep them from being sent.  Be sure to append your developer signature to any slot names you add to the <CODE>owner</CODE> frame.<BR><BR>    Note that this only applies to the built-in Beam transport; any other transport or application can access all the slots in the Owner entry.</DL><A NAME="Adding_Notes_to_Closed_Notes_Application"><H3><HR><B> </B>Adding Notes to Closed Notes Application  (1/14/97)</A></H3><DL><DD>Q:    How do I add a note to the soup without having to have the Notepad application open?  <CODE>MakeTextNote</CODE> doesn't work if Notes is closed.<BR><BR>A:    You should use <CODE>MakeTextNote</CODE> to create the data, then add it to the soup entry using <CODE>soup:AddXmit</CODE> or <CODE>uSoup:AddToStoreXmit</CODE> (or one of the other soup functions.)<BR><BR>    <CODE>MakeTextNote</CODE> always creates a frame with all the correct data that the Notes application requires.  If the 2nd paramater (addit) is <CODE>TRUE</CODE>, it will add that frame to the Notes soup and show the note on the screen.  If addIt is <CODE>NIL</CODE>, then the frame is returned.<BR><BR>    It's the adding and showing that require the Notes app to be open, not the frame creation.  For instance, to add a note to the default store, do something like:<BR><BR><CODE><PRE>    newNote := GetRoot().paperroll:MakeTextNote("Here is a sample note", nil);    GetUnionSoup("Notes"):AddToDefaultStoreXmit(newNote, '|appSym:SIG|)</CODE></PRE></DL><A NAME="TapAction_Slot_Requires_Text_Slot_to_be_Present"><H3><HR><B> </B>TapAction Slot Requires Text Slot to be Present  (1/15/97)</A></H3><DL><DD>Q:    I have an autopart that I want to display an About slip when tapped. I added a <CODE>tapAction</CODE> slot but it does not work. What is missing?<BR><BR>A:    The system will ignore the <CODE>tapAction</CODE> slot if it does not find a <CODE>'text</CODE> slot in the <CODE>partFrame</CODE> as well. The <CODE>'text</CODE> slot contains the name that will be displayed in the Extras drawer.<BR><BR>    The following lines will correctly add a <CODE>tapAction</CODE> to a your part frame (in other words, your autopart):<BR><BR>    <CODE><PRE>    DefineGlobalConstant('kTapActionFn,func()begin    // your code goes here! end);// part MUST have a text slot for tapAction to be used// text slot is the name seen by the user in ExtrasSetPartFrameSlot('text, kAppName) ;SetPartFrameSlot('tapAction, kTapActionFn) ;</CODE></PRE></DL><A NAME="Getting_the_Current_Set_of_Multi-User_Names"><H3><HR><B> </B>Getting the Current Set of Multi-User Names  (3/17/97)</A></H3><DL><DD>Q:    How can I get a list of all the students when a unit that supports it (for instance, the Apple eMate 300) is in multi-user mode?<BR><BR>A:    The multi-user mode is implemented by the Home Page built-in application, and the list of users is stored in that application's preferences frame.  Use <CODE>GetAppPrefs</CODE> to get the prefs for that application for read-only purposes.  Only the documented slots in that frame should be accessed.  Other slots are neither documented nor supported, and their behavior may change.  You should also check to ensure that the Home Page application exists on a particular unit before using any features.  For example, here is a code snippet that evaluates to an array of user names, or NIL if the unit does not support multiple users or is not in multi-user mode.<BR><BR><CODE><PRE>    if GetRoot().HomePage then         begin            local prefs := GetAppPrefs('HomePage, '{});            if prefs.users and prefs.kMultipleUsers then                foreach item in prefs.users collect item.name;        end;</PRE><BR></CODE><BR>    The Home Page preferences frame contains the following slots that may be accessed read only:<BR>        <CODE>kMultipleUsers</CODE>:        non-nil if multi-user mode is enabled<BR>        <CODE>kRequirePassword</CODE>     non-nil if passwords required in multi-user mode<BR>        <CODE>kDisallowNewUsers</CODE>    non-nil if new users can't be created at login<BR>        <CODE>users</CODE>                    array of user frames or NIL.<BR><BR>    A user frame contains the following slot that you may use as read-only data:<BR>        <CODE>name</CODE>                    a string, the user-visible user's name<BR><BR>    Keep in mind that new users could be created or existing users names may be changed at any time, and there is no notification when this happens.  If necessary, you should check the set of users when your application launches.  It is unlikely that new users will be created, deleted, or renamed while an application is open, unless this happens as a result of a new user being created at login.  In this case, registering for change in the user configuration frame with <CODE>RegUserConfigChange</CODE> and watching for the <CODE>'kCurrentUser</CODE> slot to change will let you catch changes to the current set of multi-user names.<BR></DL><A NAME="Registering_an_Auxillary_Button_for_Newton_Works"><H3><HR><B>NEW: </B>Registering an Auxillary Button for Newton Works  (5/12/97)</A></H3><DL><DD>Q:    When I register an auxiliary button for Newton Works using the global function <CODE>RegAuxButton</CODE>, I get a -48204 error.  Why am I getting this error?<BR><BR>A:    This error is caused by a bug in Newton Works.  You will get a -48204 error if you register an auxiliary button for Newton Works while Newton Works is closed.   To work around this problem, catch that particular exception and ignore it.  Here is a code example:<BR><BR><CODE><PRE>    try        RegAuxButton( kAppSymbol, {destApp: 'newtWorks, ...} );    onexception |evt.ex.fr| do        nil;</CODE></PRE></DL><A NAME="How_to_Create_Newton_Works_Documents"><H3><HR><B>NEW: </B>How to Create Newton Works Documents  (5/15/97)</A></H3><DL><DD>Q:    How do I create a Newton Works document for Newton 2.1 OS devices or later?<BR><BR>A:    If you want to create a new "empty" stationery document, use the Newton Works method <CODE>AddEntryFromStationery</CODE>. For instance:<BR><CODE><PRE>    if GetRoot().NewtWorks then</PRE><BR>            GetRoot().NewtWorks:AddEntryFromStationery(stationerySym);</CODE><BR><BR>    If you want to create a new entry with data already in it, use the Newton Works method <CODE>AdoptEntryFromStationery</CODE>. To create a new entry, you must add the basic Newton Works soup entry slots and then any stationery-specific slots:<BR><BR>    (1) Create a frame with the basic Newton Works soup entry slots as shown below:<BR>        <CODE>class</CODE>:            Class of the item. For instance, for Draw documents, use the symbol <CODE>'drawPaper</CODE><BR>        <CODE>version</CODE>:        Integer, the current version of the entry<BR>        <CODE>title</CODE>:         String which is the document title<BR>        <CODE>timeStamp</CODE>:    Creation date of the entry<BR>        <CODE>realModTime</CODE>:    Date the entry was most recently modified<BR><BR>    (2) Add the stationery-specific slots:<BR><BR>    <B>"Draw" Stationery Additional Slots<BR></B><BR>    <CODE>saveData</CODE>: a frame with the following slots:<BR>        <CODE>shapes</CODE>:        Required. An array of a single item, a picture as returned by  the global function <CODE>MakePict</CODE>.<BR><CODE><PRE>    selection:    [], // the empty array    styles:        nil,</PRE><BR></CODE><BR>    Warning: the above information describes only how to create a new Draw document. See the Q&amp;A "Reading/Modifying Newton Works Data" for information on reading information from a Draw document. Slots in the <CODE>saveData</CODE> slot of Draw documents already in Newton Works should be treated as read-only. (Do not try to modify these data structures in any way.)<BR><BR><B>    "Paper" Stationery Additional Slots<BR></B><BR>    <CODE>SaveData</CODE>: the object returned from <CODE>protoTXView:Externalize().</CODE> See the Newton 2.1 OS documentation for information about <CODE>Externalize().</CODE>  Note that this data must be from a <CODE>protoTXView</CODE> that uses VBOs (it uses the <CODE>protoTXView:SetStore(...)</CODE> method), or Newton Works can run out of NewtonScript memory when editing the document.<BR><BR>    <CODE>hiliteRange</CODE>: frame with the document's hilite range (see the <CODE>protoTXView</CODE> documentation for details)<BR><BR>    <CODE>margins</CODE>: a frame with slots <CODE>'top</CODE>, <CODE>'left</CODE>, <CODE>'bottom</CODE>, <CODE>'right</CODE>, which are the document's margins in pixels. The frame can also optionally have the slots<CODE> 'userTop</CODE>, <CODE>'userLeft</CODE>, <CODE>'userBottom</CODE>, and <CODE>'userRight</CODE> that will contain numbers (integer or real) with the margin sizes translated to user units (inches or centimeters.)  If the <CODE>userXXX </CODE>slots are missing or <CODE>nil</CODE>, they will be calculated from the pixel values.<BR><BR><BR>    (3) Use code like the following to add the entry to the soup:<BR><CODE><PRE>    if GetRoot().NewtWorks then        GetRoot().NewtWorks:AdoptEntryFromStationery(theEntry, stationerySym, GetDefaultStore());</PRE><BR>    </CODE>    See the Newton Programmer's Reference for more info about the <CODE>NewtApplication:AdoptEntryFromStationery(...)</CODE> method.</DL><A NAME="Reading/Modifying_Newton_Works_Data"><H3><HR><B>NEW: </B>Reading/Modifying Newton Works Data  (5/15/97)</A></H3><DL><DD>Q:    How do I read/write information in Newton Works documents?<BR><BR>A:    The supported ability to read/write information from Newton Works documents depends on what type of stationery is used and what information is documented for that stationery type. For instance, word processor (paper) documents can be read and modified, whereas Draw documents can be read but not modified. If the desired Newton Works stationery is not built-in, contact the stationery's developer to determine whether reading and/or modifying the soup entry data is supported. <BR><BR>    Related APIs: To create new Newton Works documents, see the Q&amp;A"How  to Create Newton Works Documents". To modify data in Newton Works documents that are currently viewed, see the Newton 2.1 documentation for information about APIs to the word processor (Paper stationery) and the Draw application (Draw stationery) APIs for tools and stamps.<BR><BR>    For reading/writing information from "Paper" soup entries, see the format specified in the Q&amp;A"How  to Create Newton Works Documents" or the Newton 2.1 OS documentation.<BR><BR>    For "Draw" soup entries, we support creating new documents (see the Q&amp;A "How to Create Newton Works Documents") and reading shapes from documents that have been viewed in Newton Works already. However, there is no support for manipulating individual shapes of a current soup entry, nor examining shapes in items that have been created/imported, but never viewed in the Newton Works application.<BR><BR>    To read shape information from pictures, here is the information about how to extract shapes from valid Draw documents. <BR><BR>    The entry  has the basic Newton Works soup entry slots as shown below:<BR>        <CODE>class</CODE>:            Class of the item. For instance, for Draw documents, use the symbol <CODE>'drawPaper</CODE><BR>        <CODE>version</CODE>:        Integer, the current version of the entry<BR>        <CODE>title</CODE>:         String which is the document title<BR>        <CODE>timeStamp</CODE>:    Creation date of the entry<BR>        <CODE>realModTime</CODE>:    Date the entry was most recently modified<BR>    <BR>    The Draw document soup entry also has the slot called <CODE>saveData</CODE> that contains the following slots:<BR>        <CODE>shapes</CODE>:        This is an array of shapes in the document.<BR>        <CODE>styles</CODE>:        An array of all styles contained in the shapes array. <BR>        <CODE>selection</CODE>:    An array containing integer indexes into the shapes array, indicating the currently selected shapes.<BR><BR>    The <CODE>shapes</CODE> slot is represented as an array of style/shape pairs, as returned by <CODE>drawApp:GetContents()</CODE>. Each "shape" can be another array of shape and style pairs, representing grouping of shapes (these grouping can continue, so subarrays can have sub-subarrays, etc). If the shapes array contains exactly one item (its length is 1) and the class of the item is <CODE>'picture</CODE>, it is a picture that has been created/imported but not yet viewed in Newton Works. If this is the case, the individual shapes cannot be read, but the picture is the same format as the return value of the global function <CODE>MakePict</CODE>.<BR><BR>    Warning: Slots in the <CODE>saveData</CODE> slot of Draw documents already in Newton Works should be treated as read-only. Do not try to modify these data structures in any way. Manipulating them can result in serious user problems.</DL><A NAME="Opening_a_Specified_Document_in_Works"><H3><HR><B>NEW: </B>Opening a Specified Document in Works  (5/27/97)</A></H3><DL><DD>Q:    How do you make Newton Works open a particular document?<BR><BR>A:    The easiest way is to use the <CODE>ShowFoundItem</CODE> method of the Works base view only as shown below.  <CODE>ShowFoundItem</CODE> is generally intended for internal use by the application itself.  However, it provides handy access for navigating to a particular soup entry, so Works supports using it for this purpose only.  Do not attempt to use <CODE>ShowFoundItem</CODE> to do more than simply bring up an entry in the Works application.<BR><BR>    The 2nd argument (the finder) to <CODE>ShowFoundItem</CODE> may be difficult to specify because Works can use stationery provided by 3rd parties, which may have special requirements for the finder.  In Works, the stationery is responsible for adding data to the finder when a find is performed, and so the stationery may rely on that data being present when <CODE>ShowFoundItem</CODE> is later used.  For all the stationery types that exist at the time this Q&amp;A was written, a minimal finder frame of <CODE>{findWords: [""]}</CODE> is sufficient to allow the stationery to show the item.  Please note that this is NOT a fully specified finder, however it is sufficient for the <CODE>FindSoupExcerpt</CODE> method, which is used widely.  A full finder frame which accomplishes the same thing might look like this:<BR><CODE><PRE>    {owner: GetRoot().NewtWorks,     findType: 'text,     findWords: [""],     items: [{_proto: theEntry, title: "None"}]}</PRE><BR></CODE><BR>    For Works stationery developers, we recommend not making any assumptions about the contents of the finder frame when implementing your ViewDef's <CODE>ShowFoundItem</CODE> method.  (Note that <CODE>ShowFoundItem</CODE> is a Works-specific requirement of stationery.  Generic ViewDefs do not require a <CODE>ShowFoundItem</CODE> method.)<BR><BR>    Here is an inspector example of navigating Works to one of each existing stationery.  The example assumes a new untitled document of each type exists.  (You'll want to have your own code that finds the appropriate Works soup entry to open.)<BR><CODE><PRE>    // make sure Works is open    GetRoot().NewtWorks:Open();    // find an entry    s := GetUnionSoup("NewtWorks");    theEntry := s:Query({text: "Untitled Paper"}):Entry();    // show it    GetRoot().NewtWorks:ShowFoundItem(e, {findWords: [""]});    // the rest of them    theEntry := s:Query({text: "Untitled Drawing"}):Entry();    GetRoot().NewtWorks:ShowFoundItem(e, {findWords: [""]});    theEntry := s:Query({text: "Untitled Calculations"}):Entry();    GetRoot().NewtWorks:ShowFoundItem(e, {findWords: [""]});    theEntry := s:Query({text: "Untitled Spreadsheet"}):Entry();    GetRoot().NewtWorks:ShowFoundItem(e, {findWords: [""]});    // cleanup    theEntry := s := nil;</CODE></PRE></DL><A NAME="Creating_a_Works_Word_Processor_Document_with_Data"><H3><HR><B>NEW: </B>Creating a Works Word Processor Document with Data  (6/9/97)</A></H3><DL><DD>Q:    How do I create a new Works paper document with some initial data?  I'd like something like the Notes application's <CODE>MakeTextNote</CODE> function.<BR><BR>A:    First, review the Q&amp;A entitled "How to Create Newton Works Documents" for details on actually creating the document.<BR><BR>    To create initial data for a word processor document, the simplest thing to do is to create a dummy view based on <CODE>protoTXView</CODE>.  Use the <CODE>protoTXView</CODE> methods to add data to that view.  When done, use the <CODE>Externalize</CODE> method to get the data in a form suitable for saving in the Works soup.<BR><BR>    When creating your dummy <CODE>protoTXView</CODE>, it's imperative that you call the  <CODE>SetStore</CODE> method so that the data is created on the user store rather than the NS heap.  Different formats are used for store-backed and heap-backed <CODE>protoTXViews</CODE>, and the type of backing is carried into the <CODE>Externalized</CODE> data.  As a result, failure to use <CODE>SetStore</CODE> would cause you to create a Works document that was not backed by the user store and which could eventually result in out-of-memory errors when the user added sufficient data to the document.<BR><BR>    Here's an example of how to create a dummy text view and populate it with some initial data.  You may wish to vary the store passed to <CODE>SetStore</CODE> in the <CODE>viewSetupFormScript</CODE> and <CODE>AdoptEntryFromStationery</CODE>, or the intial text specified in the 2nd paramater to <CODE>Replace</CODE>.  (Notably, you may wish to provide styles for the text, see the Newton 2.1 OS documentation on the <CODE>protoTXView</CODE> method <CODE>Replace</CODE>.)<BR><BR><CODE><PRE>    // create and populate a dummy protoTXView    local textView := BuildContext(        {            _proto: protoTXView,            viewBounds: SetBounds(0, 0, 0, 0),            viewFlags: 0,            ReorientToScreen: ROM_DefRotateFunc,            viewSetupFormScript: func() begin                inherited:?viewSetupFormScript();                self:SetStore(GetDefaultStore());            end,        });    textView:Open();    textView:Replace({first: 0, last: 0}, {text: "Some initial text"}, nil);    // get the data in an external form for the Works soup    local saveData := textView:Externalize();    textView:Close();    // Create a new Works document from the data    GetRoot().NewtWorks:AdoptEntryFromStationery(        {            title: "Initial Title",            saveData: saveData,            hiliteRange: {first: 0, last: 0},            margins: {top: 72, left: 72, right: 72, bottom: 72},        }, 'paper, GetDefaultStore());</PRE><BR></CODE><BR></DL><A NAME="Unregistering_Stamps_in_Newton_Works_Draw"><H3><HR><B>NEW: </B>Unregistering Stamps in Newton Works Draw  (7/2/97)</A></H3><DL><DD>Q:    When I call the Newton Works Draw stationery's <CODE>UnRegStamps</CODE> method, my registered stamps do not get unregistered.  What is going wrong?<BR><BR>A:    There is a bug in the Draw application's <CODE>UnRegStamps</CODE> method that causes stamps to remain registered.  Use the following code to unregister your stamps:<BR><BR><CODE><PRE>local viewDef := GetViewDefs( 'drawPaper ).default;if viewDef then    begin        // Call UnregStamps conditionally.  If the Draw application is not        // installed, GetViewDefs will return the "Missing Stationery"        // stationery.        viewDef:?UnregStamps( kStampRegistrySymbol );        local registry := GetViewDefs( 'drawPaper ).StampListRegistry;        if registry AND HasSlot( registry, kStampRegistrySymbol ) then            RemoveSlot( registry, kStampRegistrySymbol );    end;</PRE><BR></CODE><BR>    Note that calling the <CODE>UnRegStamps</CODE> method is required for future compatibility.</DL>
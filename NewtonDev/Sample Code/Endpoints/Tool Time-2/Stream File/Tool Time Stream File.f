/***      Newton Developer Technical Support Sample Code****      by Ryan Robertson, Newton Developer Technical Support****      Copyright © 1997 by Apple Computer, Inc.  All rights reserved.****      You may incorporate this sample code into your applications without**      restriction.  This sample code has been provided "AS IS" and the**      responsibility for its operation is 100% yours.  You are not**      permitted to modify and redistribute the source as "DTS Sample Code."**      If you are going to re-distribute the source, we require that you**      make it clear in the source that the code was descended from**      Apple-provided sample code, but that you've made changes.*/constant kToolTimePrefsTagString				:= "Tool Time:DTS";constant kToolTimeAppSymbol					:= '|Tool Time:DTS|;constant kToolTimeRegistrySymbol 			:= '|ToolTimeRegistry:DTS|;constant kToolTimeMonitorRegistrySymbol	:= '|ToolTimeMonitors:DTS|;constant kModulePrefsSlotSymbol				:= 'modulePrefs;constant kEchoModeSymbol						:= 'echo;constant kTerminalModeSymbol 					:= 'terminal;constant kTestModeSymbol 						:= 'test; constant kAnalyzeModeSymbol					:= 'analyze;constant kConnectSymbol							:= 'connect;constant kListenSymbol							:= 'listen;// Monitor event symbolsconstant kManagerCreatedSymbol				:= 'managerCreated;constant kManagerDisposedSymbol				:= 'managerDisposed;constant kInstanceConnectingSymbol			:= 'instanceConnecting;constant kInstanceConnectedSymbol			:= 'instanceConnected;constant kInstanceDisconnectingSymbol		:= 'instanceDisconnecting;constant	kInstanceCreatedSymbol				:= 'instanceCreated;constant kInstanceDisposedSymbol				:= 'instanceDisposed;constant kInstanceOutputSymbol 				:= 'instanceOutput;constant kInstanceSetInputSpecSymbol		:= 'instanceSetInputSpec;constant kInstanceGotIntputSymbol			:= 'instanceGotInput;constant kInstanceChangeModeSymbol			:= 'instanceChangeMode;// The kInstallToolTimeModuleFunc function adds a particular module to the registry.DefineGlobalConstant( 'kInstallToolTimeModuleFunc,  func( toolSymbol, toolFrame )	begin		// Grab a reference to the registry		local registry := GetGlobalVar( kToolTimeRegistrySymbol );				// If the registry does not exist then create it		if NOT registry then			registry := DefGlobalVar( kToolTimeRegistrySymbol, EnsureInternal({}) );				// We must EnsureInternal the symbol so that we don't have a bad reference		// when the package is removed.  We don't need to EnsureInternal the tool frame		// because when we remove the slot in the RemoveToolTimeModule function, the tool frame		// is not de-referenced.		registry.(EnsureInternal(toolSymbol)) := toolFrame;				// Let the application know that a new tool has been installed		if GetRoot().(kToolTimeAppSymbol) then			GetRoot().(kToolTimeAppSymbol):?ToolManagerInstalled( toolSymbol, toolFrame );				// Finally, return a reference to the registry		registry;	end );// The kRemoveToolTimeModuleFunc removes a particular module from the registry.DefineGlobalConstant( 'kRemoveToolTimeModuleFunc,  func( toolSymbol )	begin		// Grab a reference to the registry		local registry := GetGlobalVar( kToolTimeRegistrySymbol );				// If it doesn't exist then return because there is nothing to remove		if NOT registry then			return;	// nil				// Remove the slot from the registry.		RemoveSlot( registry, toolSymbol );				// Let the application know that a tool has been removed		if GetRoot().(kToolTimeAppSymbol) then			GetRoot().(kToolTimeAppSymbol):?ToolManagerRemoved( toolSymbol );				// Finally, return a reference to the registry		registry;	end );	// The kDeleteToolTimeModuleFunc deletes the preferences for a particular module.// It does not remove the module from the registry.DefineGlobalConstant( 'kDeleteToolTimeModuleFunc,  func( toolSymbol )	begin		// Grab a reference to the tool time preferences		local systemSoupCursor := GetStores()[0]:GetSoup( ROM_SystemSoupName ):Query( {type:		'index,																												indexPath:	'tag, 																												beginKey:	kToolTimePrefsTagString, 																												endKey:		kToolTimePrefsTagString} );		local preferencesFrame := systemSoupCursor:Entry();			// If a preferences entry exists for this particular tool then		// remove it and save the preferences.		if preferencesFrame		AND HasSlot( preferencesFrame.(kModulePrefsSlotSymbol), toolSymbol ) then			begin				RemoveSlot( preferencesFrame.(kModulePrefsSlotSymbol), toolSymbol );				EntryChangeXmit( preferencesFrame, nil );			end;		// return nil		nil;	end );	// The kInstallToolTimeMonitorFunc function adds a particular monitor to the registry.DefineGlobalConstant( 'kInstallToolTimeMonitorFunc, func( monitorSymbol, monitorFrame )	begin		// Grab a reference to the registry		local registry := GetGlobalVar( kToolTimeMonitorRegistrySymbol );				// If the registry does not exist then create it		if NOT registry then			registry := DefGlobalVar( kToolTimeMonitorRegistrySymbol, EnsureInternal({}) );				// We must EnsureInternal the symbol so that we don't have a bad reference		// when the package is removed.  We don't need to EnsureInternal the monitor frame		// because when we remove the slot in the RemoveToolTimeMonitor function, the monitor frame		// is not de-referenced.		registry.(EnsureInternal(monitorSymbol)) := monitorFrame;				// Let the application know that a new tool has been installed		if GetRoot().(kToolTimeAppSymbol) then			GetRoot().(kToolTimeAppSymbol):?ToolMonitorInstalled( monitorSymbol, monitorFrame );				// Finally, return a reference to the registry		registry;	end );// The kRemoveToolTimeMonitorFunc removes a particular module from the registry.DefineGlobalConstant( 'kRemoveToolTimeMonitorFunc,  func( monitorSymbol )	begin		// Grab a reference to the registry		local registry := GetGlobalVar( kToolTimeMonitorRegistrySymbol );		// If it doesn't exist then return because there is nothing to remove		if NOT registry then			return;	// nil				// Remove the slot from the registry.		RemoveSlot( registry, monitorSymbol );				// Let the application know that a tool has been removed		if GetRoot().(kToolTimeAppSymbol) then			GetRoot().(kToolTimeAppSymbol):?ToolMonitorRemoved( monitorSymbol );				// Finally, return a reference to the registry		registry;	end );	// Output is the variable we have choosen for the result.  To change this variable, choose // "Project Settings" from the "Project" menu.  Then select "Output" settings.  At the bottom// right of the screen is a "Result:" field.  The value in that field must match the variable below.// When a stream file is added to a project its Install method is called.  In this method you will// define your constants for use in NTK.output :=	{Install: 	func()					begin						if IsGlobalConstant('kInstallIntoRegistryFunc) then							Throw('|evt.ex.msg|, "The Tool Time functions are already defined.");						else 							begin								// Methods								DefineGlobalConstant( 'kInstallToolTimeModuleFunc, kInstallToolTimeModuleFunc );								DefineGlobalConstant( 'kRemoveToolTimeModuleFunc, kRemoveToolTimeModuleFunc );								DefineGlobalConstant( 'kDeleteToolTimeModuleFunc, kDeleteToolTimeModuleFunc );								DefineGlobalConstant( 'kInstallToolTimeMonitorFunc, kInstallToolTimeMonitorFunc );								DefineGlobalConstant( 'kRemoveToolTimeMonitorFunc, kRemoveToolTimeMonitorFunc );																// Constants								DefineGlobalConstant( 'kEchoModeSymbol, kEchoModeSymbol );								DefineGlobalConstant( 'kTerminalModeSymbol, kTerminalModeSymbol );								DefineGlobalConstant( 'kTestModeSymbol, kTestModeSymbol );								DefineGlobalConstant( 'kAnalyzeModeSymbol, kAnalyzeModeSymbol );								DefineGlobalConstant( 'kConnectSymbol, kConnectSymbol );								DefineGlobalConstant( 'kListenSymbol, kListenSymbol );								DefineGlobalConstant( 'kToolTimeRegistrySymbol, kToolTimeRegistrySymbol );								DefineGlobalConstant( 'kToolTimeMonitorRegistrySymbol, kToolTimeMonitorRegistrySymbol );								// Tool Monitor constants								DefineGlobalConstant( 'kManagerCreatedSymbol, kManagerCreatedSymbol );								DefineGlobalConstant( 'kManagerDisposedSymbol, kManagerDisposedSymbol );								DefineGlobalConstant( 'kInstanceConnectedSymbol, kInstanceConnectedSymbol );								DefineGlobalConstant( 'kInstanceConnectingSymbol, kInstanceConnectingSymbol );								DefineGlobalConstant( 'kInstanceDisconnectingSymbol, kInstanceDisconnectingSymbol );								DefineGlobalConstant( 'kInstanceCreatedSymbol, kInstanceCreatedSymbol );								DefineGlobalConstant( 'kInstanceDisposedSymbol, kInstanceDisposedSymbol );								DefineGlobalConstant( 'kInstanceOutputSymbol, kInstanceOutputSymbol );								DefineGlobalConstant( 'kInstanceSetInputSpecSymbol, kInstanceSetInputSpecSymbol );								DefineGlobalConstant( 'kInstanceGotIntputSymbol, kInstanceGotIntputSymbol );								DefineGlobalConstant( 'kInstanceChangeModeSymbol, kInstanceChangeModeSymbol );							end;					end,	};
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Newton Bitmap Formats</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Newton Bitmap Formats</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Newton Bitmap Formats  (5/14/96)</H3><DL><DD>Q:    What is the format for bitmap binary objects in the Newton OS?<BR><BR>A:    There are several bitmap formats used in the Newton OS. The Newton OS provides routines for creating and manipulating bitmaps at runtime, and uses other formats for displaying bitmaps from developer packages.<BR><BR>    If you want to create a bitmap object at compile time, below is a description of the format of a simple bitmap object. If you want to create a bitmap at run time, we strongly encourage you to use <CODE>MakeBitmap</CODE> and copy data into the bitmap.<BR><BR><B>    Simple Bitmaps<BR></B><BR>    Normally, bitmaps are created at compile time using Newton Toolkit picture editors or functions (for example, <CODE>GetPICTAsBits</CODE>). If you want to create bitmaps dynamically at compile time, you can create a simple bitmap object with the following format.<BR><BR>    <I>Warning</I>: Different formats may be used by images or functions in future ROMs. This format will still be supported for displaying images. This format does <I>not</I> describe images created by other applications nor any images provided or found in the Newton ROM. You can use the following format information to create and manipulate your own bitmaps -- preferably at compile time:<BR><B><BR></B><CODE><PRE>{    bounds: &lt;bounds frame&gt;,    bits:   &lt;raw bitmap data&gt;,    mask:   &lt;raw bitmap data for mask - optional&gt;}    Binary object &lt;raw bitmap data&gt; - class 'bits        bytes    data-type  descr    0-3      long       ignored    4-5      word       #bytes per row of the bitmap data                        (must be a multiple of 4)    6-7      word       ignored    8-15     bitmap     rectangle - portion of bits to use--see IM I    8-9      word       top    10-11    word       left    12-13    word       bottom    14-15    word       right    16-*     bits       pixel data, 1 for "on" pixel, 0 for off</PRE><BR></CODE><BR>    The bitmap rectangle and bounds slot must be in agreement regarding the size of the bitmap. <BR><BR>    <B>MakeBitmap Shapes<BR></B><BR>    If you want to create bitmap data at run time or extract bitmap data from a bitmap created with the <CODE>MakeBitmap</CODE> global function, use the <CODE>GetShapeInfo</CODE> function to get the bitmap and other slots required to interpret the meaning of the bitmap created by <CODE>MakeBitmap</CODE>. <BR><BR>    <I>Warning</I>: the following information applies only to bitmaps of depth 1 (black and white bitmaps) created by your application with MakeBitmap. Do <I>not</I> rely on <CODE>GetShapeInfo</CODE> or the following slots for images created by other applications, images stored in the Newton ROM, images created with functions other than <CODE>MakeBitmap</CODE>, nor images with a depth other than 1.<BR><BR>    If you created a bitmap using <CODE>MakeBitmap</CODE> of <CODE>depth</CODE> 1, the return value of <CODE>GetShapeInfo</CODE> contains frame with information you can use to interpret the bitmap data.<BR><BR>    This frame includes a <CODE>bits</CODE> slot referencing the bitmap data for the bitmap. This bitmap data can be manipulated at run time (or copied for non-Newton use), using other slots in the return value of <CODE>GetShapeInfo</CODE> to interpret the bitmap binary object: <CODE>scanOffset</CODE>, <CODE>bitsBounds</CODE>, and <CODE>rowBytes</CODE>. For instance, the first bit of the image created with <CODE>MakeBitmap</CODE> can be obtained with code like:<BR><BR><CODE><PRE>   bitmapInfo := GetShapeInfo(theBitmap);   firstByte := ExtractByte(bitmapInfo.bits, bitmapInfo.scanOffset);   firstBit := firstByte &gt;&gt; 7; // 1 or 0, representing on or off</PRE><BR></CODE>   <BR>    Note that <CODE>rowBytes</CODE> will always be 32-bit aligned. For instance, for a bitmap with a <CODE>bitsBounds</CODE> having width 33 pixels, <CODE>rowBytes</CODE> will be 8 to indicate 8 bytes offsets per horizontal line and 31 bits of unused data at the end of every horizontal line.</DL>
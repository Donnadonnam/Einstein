/*	File:		LanternDriver.proto.h	Contains:	Lantern Card Driver Protocol.	Copyright:	© 11997 by Apple Computer, Inc., all rights reserved.	Obtained from NIE2.0 F1C2 build. 9/4/97*/#ifndef	__LANTERNDRIVER_PROTO_H#define __LANTERNDRIVER_PROTO_H#include "Protocols.h"#include "CardPCMCIA.h"#include "CardSocket.h"#include "LanternTypes.h"#include "LanternErrors.h"class TLanternDriverAPI;// Lantern Driver APIPROTOCOL TLanternDriver : public TProtocol	{public:	// C++ Object Setup	static TLanternDriver *	New(char*);				// called when the card is inserted	void					Delete();				// called when the card is removed	NewtonErr	Init(void);							// called when card inserted		// These methods correspond to the when services are requested via Lantern.  It is a requirement	// the the driver maintain any state that is requested before and during and after these methods	// are called.  ie. If AddMulticast event is sent after Enable and then Disable is called	// the driver must ensure this address is current at the next Enable call.	NewtonErr	Enable(void);						// resume card operations (startup/newton power on)	NewtonErr	Disable(void);						// suspend card operations (shutdown/newton power off)	void		InterruptHandler(void);				// called to handle a card interruptprotected:friend class TLanternTask;	// These variables are set up by lantern after New (ie. can't access these in New).	TCardSocket* 		fCardSocket;				// card socket (really need this???)	TCardPCMCIA*		fCardPCMCIA;				// card data	TLanternDriverAPI*	fDriverAPI;					// used by the driver	};#endif __LANTERNDRIVER_PROTO_H
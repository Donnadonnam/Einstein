<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Making Use of the Serial Number Chip</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Making Use of the Serial Number Chip</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Making Use of the Serial Number Chip  (4/3/97)</H3><DL><DD>Q:    I would like to get the serial number from the units that support it, as either an integer or real number.  How can I do this?<BR><BR>A:    You probably don't really want to do this.  The serial number is an 8-byte binary object, so you could use <CODE>ExtractByte</CODE> or <CODE>ExtractWord</CODE> or possibly <CODE>ExtractLong</CODE> to get the bytes out in integer form, then do something with them.  However, keep in mind that NewtonScript integers are only 30 bits wide, whereas the serial number is 64 bits wide, so you'll never be able to put all the information contained in the serial number into a single integer. (3 integers would be required.)<BR><BR>    That is, let us suppose you added up the value of all the bytes in a serial number.  You would get a single NewtonScript integer, but it would also be possible for a different serial number to produce the same integer.  (Just swap the positions of two of the bytes.)  Same goes for XOR or any checksumming scheme.  There's just no way to reduce 64 bits of information to 30 bits without allowing loss of uniqueness.  (If you come up with a way, let us know, it'd make a great compression algorithm!)<BR><BR>    Real numbers aren't suitable either, for much the same reason.  It's true that in NewtonScript reals are 8 bytes wide, but they use the IEEE 64-bit real number specification, and so not all combinations of 8 bytes are considered unique.  That is, you might think about taking the serial number result and using <CODE>SetClass</CODE> to change it's class to <CODE>'real</CODE>, which would effectively "cast" the 8-byte object to a real number.  This is a bad idea, because real numbers are interpreted using  bitfields with special meanings, and it's possible for two real numbers to have different binary representations and still evaluate as equal using the '=' operator.  (Any two not-a-number values will do this.)<BR><BR>    Serial numbers are best treated as strings or as 8-byte binary objects, so that no data is lost.  <CODE>StrHexDump</CODE> is the best way to format the serial number object for humans to read.  If you want to break it up to make it more easily readable, you could do something like this:<BR><CODE><PRE>    local s := StrHexDump(call ROM_GetSerialNumber with (), 2);    StrReplace(s, " ", "-", 3);</PRE><BR>    </CODE>Which produces this string (on my unit):<BR><CODE><PRE>    "0000-0000-0154-8423 "</PRE><BR>    </CODE>Please note that the serial number provided by the chip does NOT match the serial number that Apple Computer and other Newton device manufacturers may put on the outside of the case.  When supporting a device, Apple and its licensees will most likely request the user-visible serial number, typically found on a sticker on the case.  Please be sure that you present data from the internal chip-based serial number in such a way as to ensure the user will not be confused.  (This is the reason the chip-based serial number is not displayed by any software built into the device.)</DL>
<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Registering Soup Change Notifications in NewtApp</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Registering Soup Change Notifications in NewtApp</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B>NEW: </B>Registering Soup Change Notifications in NewtApp  (5/15/97)</H3><DL><DD>Q:    I have an application based on the NewtApp framework.  When I register to receive soup change notifications, things start to behave strangely.  What's going wrong?<BR><BR>A:    This problem is caused because of a naming conflict.  When your application is opened, the NewtApp framework registers to receive soup change notifications using your application's symbol as the <CODE>callbackID</CODE> parameter to the <CODE>RegSoupChange</CODE> global function.  If you also use your application's symbol as the <CODE>callbackID</CODE> parameter, you will overwrite the NewtApp framework's registration.  There are two ways to work around this problem.<BR><BR>    1) Use a different <CODE>callbackID</CODE> symbol in your call to <CODE>RegSoupChange</CODE>.<BR>    2) Use the NewtApp framework's registration callback method.  When your soup has changed, the NewtApplication's <CODE>NewtSoupChangedNotify</CODE> method is called.  It is passed the same four parameters as the callback function parameter of <CODE>RegSoupChange</CODE>.<BR><BR>    If you do override the <CODE>NewtSoupChangedNotify</CODE> method, be sure to call the inherited method.<BR><BR>    Here is an example:<BR><BR>    <CODE><PRE>    application:NewtSoupChangedNotify(theName, appSym, changeType, changeData)begin    // Do your stuff here        inherited:?NewtSoupChangedNotify( theName, appSym, changeType, changeData );end;</CODE></PRE></DL>
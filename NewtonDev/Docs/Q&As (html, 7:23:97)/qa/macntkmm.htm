<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: NTK 1.6 Heap/Partition Memory Issues</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>NTK 1.6 Heap/Partition Memory Issues</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>NTK 1.6 Heap/Partition Memory Issues  (11/24/95)</H3><DL><DD>Q:    How do I set the build heap, main heap, and MacOS multifinder partition sizes in NTK 1.6 so I can build my package without running out of memory?<BR><BR>A:    Here is an explanation of how Mac NTK makes uses of the various heaps.  Understanding this will allow you to set your sizes for optimal performance.  The same concepts apply to the Windows NTK, except for the sections talking about MacOS multifinder partitions.<BR><BR><B>    Main Heap<BR><BR></B>    The Main heap holds your frame data while you're working in NTK.  Its size is set through the Toolkit Preference dialog. You must quit and restart NTK for changes to take effect.<BR><BR>    The Main heap is allocated when NTK starts up.  It is not disposed off until you quit NTK. If NTK can't allocate the Main heap it reports the problem and quits. As a result, if you can start NTK, Main heap allocation has completed.<BR><BR>    We have no rule of thumb for setting the Main heap size. You need to experiment keeping the following in mind: <BR><BR>    1) If the Main heap is insufficient, NTK will tell you so. <BR>    2) Reducing the Main heap size reduces overall RAM requirements.<BR>    3) The Main heap is garbage collected (GC).  Increasing its size may improve performance by reducing GC activity.   This will affect build time, and to a lesser degree the time it takes to open a project.  Please note that the gains in build time are nonlinear and quickly reach a plateau, as shown in the following example:<BR>    <BR>            <CODE><PRE>            Main        Build time    heap size        (+/- 0.5 sec)        1250K            Main heap ran out of memory...        1275K            32.7 sec        1300K            26.4 sec        1400K            22.3 sec        1500K            19.2 sec        1600K            17.5 sec        2000K            16.0 sec        3000K            15.2 sec</PRE><BR></CODE><BR>    Experiment with Main heap size by measuring build time until you find a reasonable compromise between build time and memory requirements for your particular project.<BR><BR>    If you are curious about GC activity, do the following:<BR><BR>    1) Add the following line to your <CODE>GlobalData </CODE>file (in the NTK folder) and restart NTK:<BR><CODE><PRE>    protoEditor:DefineKey({key: 65}, 'EvaluateSelection);</PRE><BR></CODE>    This allows you to use the period key on the numeric keypad to evaluate selected text in the Inspector window or any text file in the NTK build-time environment.  (Normally the text is compiled by NTK and then evaluated by the Newton device when you hit the Enter key.)  See the NTK User's Guide for details on the <CODE>GlobalData</CODE> file.<BR><BR>    2) Type <CODE>VerboseGC(TRUE)</CODE> in the Inspector window, select, and hit the keypad-period key.  Each time the GC kicks in, a line will be displayed in the Inspector window.  By watching the frequency of GCs, you can get some idea of how your main heap is being used.<BR><BR>    3) Use <CODE>VerboseGC(FALSE)</CODE> to turn this feature off.   Please note that <CODE>VerboseGC </CODE>is available only in the NTK build-time environment.  The function does not exist on the Newton device itself.  It should be used only for debugging and optimization.<BR><BR><B>    Build Heap<BR><BR></B>    The Build heap holds your package frame data during the last part of the build. Its size is set through the Toolkit Preference dialog. Changes take effect immediately.<BR><BR>    The Build heap is allocated only when the Build Package command is issued. It is released as soon as the resulting file is written to disk. As a result Build heap allocation is a recurring issue.<BR><BR>    The rule of thumb is to set the Build heap to the size of your package (on the MacOS computer hard disk, not on the Newton device). If the Build heap is insufficient, NTK will tell you so. <BR><BR>    There is nothing to be gained by setting the Build heap larger than necessary. <BR><BR>    NTK first attempts to allocate the Build heap from MultiFinder memory. If that fails, NTK tries to allocate the Build heap from NTK's partition. <BR><BR>    To verify that you have enough memory for the Build heap you need to look at the "About This Macintosh" dialog in the Finder application just prior to issuing the build command. <BR><BR>    1) If the "Largest Unused Block" exceeds the Build heap requested size, the Build heap will be allocated from MultiFinder memory. <BR><BR>    2) If 1 failed and NTK's partition bar shows enough free memory to accommodate the request, the Build heap will be allocated in NTK's partition.<BR><BR>    3) If both 1 and 2 failed, the build will fail.  Try to increase MultiFinder free memory by quitting any other open application, or increase the free memory in NTK's partition by closing some or all of NTK's open windows. Then try building again.<BR><BR>    To prevent fragmentation of MultiFinder memory launch NTK first, and DocViewer, ResEdit, etc. afterwards. Whenever possible, quit those other applications in the reverse order .<BR><BR>    Note: You can use Balloon help to see how much memory an application is actually using. Simply select the Show Balloons menu item and position the cursor on the application partition bar in the About Macintosh dialog. This feature is missing from PowerPC-based MacOS computers. <BR><BR><B>    NTK Partition Size<BR><BR></B>    For NTK 1.6 the rule of thumb for the "smallest useful" partition size for small projects is:<BR>        (3500K + Main heap size) for a 680x0 MacOS computer<BR>        (5500K + Main heap size) for a PowerPC MacOS computer with Virtual Memory off.<BR><BR>    These rules do not include space for the Build heap. <BR><BR>    The "smallest useful" partition size is defined by the following example: Using NTK default Main and Build heaps, open the Checkbook sample. Open one browser and one layout window for each file in the project, connect the Inspector, build and download. Perform a global search on "Check" (case insensitive) producing slightly more than 200 matches. Double click on several of these matches displayed in the search results window. Build and download again.<BR><BR>    For serious work, increase the partition size by at least 256K for small projects, more for large ones.  If you routinely perform global searches that produces many matches, see the next section.<BR><BR>    On a PowerPC-based MacOS computer with Virtual Memory on, NTK's 2.7 Meg of code (the exact number is shown in the Finder Info dialog) stays on the hard disk, reducing memory requirements at the expense of performance.</DL>
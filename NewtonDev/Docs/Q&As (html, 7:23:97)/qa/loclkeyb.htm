<HTML><HEAD><TITLE>Newton 2.x Q&amp;A: Adding a Local Keyboard to a ProtoKeyboardButton-based Button</TITLE></HEAD><BODY BGCOLOR="#FFFFFF"><CENTER><H2>Adding a Local Keyboard to a ProtoKeyboardButton-based Button</H2><H4> One of the Newton 2.x OS Q&amp;As<BR>Copyright © 1997 Newton, Inc.  All Rights Reserved. Newton, Newton Technology, Newton Works, the Newton, Inc. logo, the Newton Technology logo, the Light Bulb logo and MessagePad are trademarks of Newton, Inc. and may be registered in the U.S.A. and other countries. Windows is a registered trademark of Microsoft Corp. All other trademarks and company names are the intellectual property of their respective owners.</H4><BR>For the most recent version of the Q&amp;As on the World Wide Web, check the URL: <CODE><A HREF="http://www.newton-inc.com/dev/techinfo/qa/qa.htm">http://www.newton-inc.com/dev/techinfo/qa/qa.htm</A></CODE><BR>If you've copied this file locally,<A HREF="qa.htm">click here to go to the main Newton Q&amp;A page.</A><BR>This document was exported on 7/23/97.</CENTER><H3><HR><B> </B>Adding a Local Keyboard to a ProtoKeyboardButton-based Button  (1/14/97)</H3><DL><DD>Q:    I have an application-specific keyboard that I would like to have appear only in my application's <CODE>protoKeyboardButton</CODE>-based keyboard list.  Is this possible?<BR><BR>A:    Yes, <CODE>protoKeyboardButton</CODE> has a method called <CODE>SetKeyboardList</CODE> that lets you do this.  <CODE>SetKeyboardList</CODE> takes two arguments. The first argument is an array of keyboard symbols to add to the list.  The second argument is an array of keyboard symbols to remove from the list.  Note that the keyboard symbols of the built-in keyboards are listed on pages pages 8-26 and 8-27 of the Newton Programmer's Guide.<BR><BR>    To create a local keyboard, your keyboard view must be declared either to the keyboard button view or to a view within in its parent view chain. It is common to declare the keyboard view in your application's base view.  When you declare the keyboard view, it must be declared using the keyboard's <CODE>keyboardSymbol</CODE>.<BR><BR>    There are three additional slots that your keyboard template must have: <BR>    1) a <CODE>preallocatedContext</CODE> slot with the symbol of the keyboard<BR>    2) a <CODE>userName</CODE> slot with the name that will appear in the <CODE>protoKeyboardButton</CODE> popup<BR>    3) a <CODE>keyboardSymbol</CODE> slot with your keyboard's symbol <BR><BR>    The <CODE>preallocatedContext</CODE> slot and the <CODE>keyboardSymbol</CODE> slot must be the same symbol.  Note that the <CODE>keyboardSymbol</CODE> slot is required, but the <CODE>preallocatedContext</CODE> slot is additionally necessary to avoid exceptions on devices prior to Newton 2.1 OS.<BR><BR>    Next, in the <CODE>viewSetupDoneScript</CODE> of the <CODE>protoKeyboardButton</CODE>-based view, send the button a <CODE>SetKeyboardList</CODE> message with your keyboard's symbol.  For instance, you might have the following <CODE>viewSetupDoneScript</CODE>:<BR><BR><CODE><PRE>viewSetupDoneScript: func()    begin        :SetKeyboardList( [kMyKeyboardSymbol], nil );        // Be sure to call the inherited viewSetupDoneScript method!        inherited:?viewSetupDoneScript();</PRE><BR>        end;</CODE><BR><BR>    If you want to dynamically change the keyboard list, you can also override the <CODE>buttonClickScript</CODE>.  You must first call <CODE>SetKeyboardList</CODE>, then call the inherited <CODE>buttonClickScript</CODE>.<BR><BR>    All additions and subtractions are removed from the list when your <CODE>protoKeyboardButton</CODE>-based view is closed.</DL>